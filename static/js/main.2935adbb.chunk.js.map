{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","canvasRef","useRef","useEffect","stats","Stats","showPanel","document","body","appendChild","dom","bodyPixNet","drawBackgroundHandle","video","createElement","a","bodyPix","navigator","mediaDevices","getUserMedia","stream","getVideoTracks","videoTrack","getSettings","width","height","srcObject","console","error","drawBackground","begin","segmentPerson","segmentation","current","end","requestAnimationFrame","autoplay","playsInline","controls","onloadeddata","loadBodyPix","setupCamera","cancelAnimationFrame","remove","className","ref","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"kVAmEeA,MA9Df,WACE,IAAMC,EAAYC,iBAA0B,MA0D5C,OAxDAC,qBAAU,WACR,IAAMC,EAAQ,IAAIC,IAClBD,EAAME,UAAU,GAChBC,SAASC,KAAKC,YAAYL,EAAMM,KAEhC,IAMIC,EACAC,EAPEC,EAAQN,SAASO,cAAc,SALvB,4CAcd,sBAAAC,EAAA,sEACqBC,MADrB,OACEL,EADF,mDAdc,kEAkBd,wCAAAI,EAAA,+EAEyBE,UAAUC,aAAaC,aAAa,CACvDN,OAAO,IAHb,OAEUO,EAFV,SAKyBA,EAAOC,iBALhC,mBAKWC,EALX,OAM8BA,EAAWC,cAA7BC,EANZ,EAMYA,MAAOC,EANnB,EAMmBA,OACfZ,EAAMa,UAAYN,EAClBP,EAAMW,MAAQA,EACdX,EAAMY,OAASA,EATnB,kDAWIE,QAAQC,MAAM,8BAAd,MAXJ,2DAlBc,+BAiCCC,IAjCD,2EAiCd,4BAAAd,EAAA,0DAEMJ,EAFN,uBAGIP,EAAM0B,QAHV,SAK+BnB,EAAWoB,cAAclB,GALxD,OAKUmB,EALV,OAMIhB,IAAwBf,EAAUgC,QAAUpB,EAAOmB,GAEnD5B,EAAM8B,MARV,OAWEtB,EAAuBuB,sBAAsBN,GAX/C,4CAjCc,sBAkDd,OA5CAhB,EAAMuB,UAAW,EACjBvB,EAAMwB,aAAc,EACpBxB,EAAMyB,UAAW,EACjBzB,EAAM0B,aAAeV,EATP,mCA+CdW,GA/Cc,mCAgDdC,GAEO,WACLC,qBAAqB9B,GACrBR,EAAMM,IAAIiC,YAEX,IAEI,wBAAQC,UAAU,aAAaC,IAAK5C,KClD9B6C,G,MAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,QCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFlD,SAASmD,eAAe,SAM1BZ,M","file":"static/js/main.2935adbb.chunk.js","sourcesContent":["import * as bodyPix from '@tensorflow-models/body-pix'\nimport React, { useEffect, useRef } from 'react'\nimport Stats from 'stats.js'\nimport './App.css'\n\nfunction App() {\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n\n  useEffect(() => {\n    const stats = new Stats()\n    stats.showPanel(0)\n    document.body.appendChild(stats.dom)\n\n    const video = document.createElement('video')\n    video.autoplay = true\n    video.playsInline = true\n    video.controls = false\n    video.onloadeddata = drawBackground\n\n    let bodyPixNet: bodyPix.BodyPix\n    let drawBackgroundHandle: number\n\n    async function loadBodyPix() {\n      bodyPixNet = await bodyPix.load()\n    }\n\n    async function setupCamera() {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          video: true,\n        })\n        const [videoTrack] = stream.getVideoTracks()\n        const { width, height } = videoTrack.getSettings()\n        video.srcObject = stream\n        video.width = width!\n        video.height = height!\n      } catch (error) {\n        console.error('Error opening video camera.', error)\n      }\n    }\n\n    async function drawBackground() {\n      // Wait for BodyPix model to be loaded\n      if (bodyPixNet) {\n        stats.begin()\n\n        const segmentation = await bodyPixNet.segmentPerson(video)\n        bodyPix.drawBokehEffect(canvasRef.current!, video, segmentation)\n\n        stats.end()\n      }\n\n      drawBackgroundHandle = requestAnimationFrame(drawBackground)\n    }\n\n    loadBodyPix()\n    setupCamera()\n\n    return () => {\n      cancelAnimationFrame(drawBackgroundHandle)\n      stats.dom.remove()\n    }\n  }, [])\n\n  return <canvas className=\"App-canvas\" ref={canvasRef}></canvas>\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}