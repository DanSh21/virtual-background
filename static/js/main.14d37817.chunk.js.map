{"version":3,"sources":["shared/helpers/thumbnailHelper.ts","shared/hooks/useImageThumbnail.ts","shared/components/SelectionButton.tsx","shared/components/TumbnailButton.tsx","shared/components/ImageButton.tsx","shared/components/SelectionIconButton.tsx","core/helpers/backgroundHelper.ts","core/components/BackgroundSelectionCard.tsx","core/components/PostProcessingConfigCard.tsx","core/components/SegmentationConfigCard.tsx","shared/hooks/useVideoThumbnail.ts","shared/components/VideoButton.tsx","core/helpers/sourceHelper.ts","core/components/SourceSelectionCard.tsx","core/helpers/segmentationHelper.ts","pipelines/canvas2d/canvas2dPipeline.ts","pipelines/helpers/webglHelper.ts","pipelines/webgl2/webgl2Pipeline.ts","pipelines/webgl2/resizingStage.ts","pipelines/webgl2/softmaxStage.ts","pipelines/webgl2/jointBilateralFilterStage.ts","core/hooks/useStats.ts","core/hooks/useRenderingPipeline.ts","core/components/OutputViewer.tsx","core/components/SourceViewer.tsx","core/components/ViewerCard.tsx","core/hooks/useBodyPix.ts","core/hooks/useMeetModel.ts","core/hooks/useTFLite.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getThumbnailBlob","source","originalWidth","originalHeight","sourceSize","Math","min","horizontalShift","verticalShift","canvas","document","createElement","width","height","getContext","drawImage","Promise","resolve","toBlob","blob","useImageThumbnail","imageUrl","useState","thumbnailUrl","setThumbnailUrl","useEffect","image","Image","src","onload","a","naturalWidth","naturalHeight","URL","createObjectURL","revokeObjectURL","useStyles","makeStyles","theme","createStyles","root","padding","minWidth","spacing","marginRight","marginBottom","border","alignItems","transitionProperty","transitionDuration","transitions","duration","shorter","transitionTimingFunction","easing","easeInOut","transform","active","borderColor","palette","primary","main","SelectionButton","props","classes","Button","className","clsx","disabled","onClick","children","scalableContent","margin","borderRadius","shape","objectFit","ThumbnailButton","alt","onLoad","Skeleton","variant","ImageButton","revokeThumbnailUrl","borderWidth","borderStyle","boxSizing","display","justifyContent","SelectionIconButton","backgroundImageUrls","map","imageName","process","flex","BackgroundSelectionCard","Card","CardContent","Typography","gutterBottom","component","background","type","onChange","url","PostProcessingConfigCard","pipeline","Fragment","Slider","value","config","jointBilateralFilter","sigmaSpace","step","valueLabelDisplay","_event","sigmaColor","max","FormControlLabel","label","control","Switch","color","checked","smoothSegmentationMask","event","target","breakpoints","only","gridColumnStart","gridRowStart","formControl","marginTop","SegmentationConfigCard","FormControl","InputLabel","Select","model","inputResolution","MenuItem","useVideoThumbnail","videoUrl","video","onloadedmetadata","currentTime","onseeked","videoWidth","videoHeight","icon","position","bottom","right","common","white","VideoButton","sourceImageUrls","sourceVideoUrls","videoName","SourceSelectionCard","inputResolutions","buildCanvas2dPipeline","sourcePlayback","bodyPix","tflite","segmentationConfig","postProcessingConfig","addFrameEvent","ctx","segmentationWidth","segmentationHeight","segmentationPixelCount","segmentationMask","ImageData","segmentationMaskCanvas","segmentationMaskCtx","inputMemoryOffset","_getInputMemoryOffset","outputMemoryOffset","_getOutputMemoryOffset","resizeSource","runBodyPixInference","runTFLiteInference","runPostProcessing","htmlElement","imageData","getImageData","i","HEAPF32","data","segmentPerson","segmentation","putImageData","_runInference","person","shift","backgroundExp","exp","personExp","globalCompositeOperation","filter","render","cleanUp","glsl","String","raw","createPiplelineStageProgram","gl","vertexShader","fragmentShader","positionBuffer","texCoordBuffer","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","Error","getProgramInfoLog","positionAttributeLocation","getAttribLocation","enableVertexAttribArray","bindBuffer","ARRAY_BUFFER","vertexAttribPointer","FLOAT","texCoordAttributeLocation","compileShader","shaderType","shaderSource","shader","createShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","createTexture","internalformat","texture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","texStorage2D","buildWebGL2Pipeline","vertexShaderSource","inputWidth","inputHeight","getExtension","VERTEX_SHADER","vertexArray","createVertexArray","bindVertexArray","createBuffer","bufferData","Float32Array","STATIC_DRAW","inputFrameTexture","RGBA8","segmentationTexture","resizingStage","fragmentShaderSource","tfliteInputMemoryOffset","outputWidth","outputHeight","outputPixelCount","FRAGMENT_SHADER","flipYLocation","getUniformLocation","inputFrameLocation","outputTexture","RGBA32F","frameBuffer","createFramebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","outputPixels","useProgram","uniform1f","uniform1i","viewport","drawArrays","TRIANGLE_STRIP","readPixels","RGBA","tfliteIndex","outputIndex","deleteFramebuffer","deleteTexture","deleteProgram","deleteShader","buildResizingStage","softmaxStage","tfliteOutputMemoryOffset","inputLocation","inputTexture","RG32F","activeTexture","TEXTURE1","texSubImage2D","RG","buildSoftmaxStage","jointBilateralFilterStage","toFixed","texelWidth","texelHeight","segmentationMaskLocation","texelSizeLocation","uniform2f","buildJointBilateralFilterStage","clearColor","clear","COLOR_BUFFER_BIT","TEXTURE0","UNSIGNED_BYTE","deleteBuffer","deleteVertexArray","useStats","fps","setFps","durations","setDurations","previousTimeRef","useRef","beginTimeRef","durationsRef","eventCount","frameCountRef","beginFrame","useCallback","current","Date","now","time","endFrame","useRenderingPipeline","canvasRef","renderRequestId","shouldRender","requestAnimationFrame","console","log","cancelAnimationFrame","stats","top","left","textAlign","backgroundColor","OutputViewer","resizingDuration","inferenceDuration","postProcessingDuration","statDetails","round","join","ref","down","overflow","up","borderRightWidth","borderRightStyle","borderRightColor","divider","SourceViewer","sourceUrl","setSourceUrl","isLoading","setLoading","isCameraError","setCameraError","videoRef","undefined","setTimeout","constraint","navigator","mediaDevices","getUserMedia","stream","srcObject","error","getCameraStream","CircularProgress","hidden","fontSize","autoPlay","playsInline","controls","muted","loop","onLoadedData","minHeight","gridColumnEnd","gridRowEnd","noOutput","avatar","ViewerCard","setSourcePlayback","Paper","Avatar","useBodyPix","setBodyPix","tf","tfBodyPix","loadBodyPix","useMeetModel","isLoaded","setLoaded","modelFileName","fetch","modelResponse","arrayBuffer","byteLength","modelBufferOffset","_getModelBufferMemoryOffset","HEAPU8","set","Uint8Array","_loadModel","_getInputHeight","_getInputWidth","_getInputChannelCount","_getOutputHeight","_getOutputWidth","_getOutputChannelCount","loadMeetModel","useTFLite","setTFLite","createTFLiteModule","loadTFLite","gap","gridTemplateColumns","resourceSelectionCards","flexDirection","App","setSource","setBackground","setSegmentationConfig","setPostProcessingConfig","isMeetModelLoaded","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","CssBaseline","getElementById"],"mappings":"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","file":"static/js/main.14d37817.chunk.js","sourcesContent":["/**\n * Returns a thumbnail as a Blob.\n * @param source The source image or video.\n * @param originalWidth The original width of the source before sizing.\n * @param originalHeight The original height of the source before sizing.\n */\nexport function getThumbnailBlob(\n  source: HTMLImageElement | HTMLVideoElement,\n  originalWidth: number,\n  originalHeight: number\n) {\n  const sourceSize = Math.min(originalWidth, originalHeight)\n  const horizontalShift = (originalWidth - sourceSize) / 2\n  const verticalShift = (originalHeight - sourceSize) / 2\n\n  const canvas = document.createElement('canvas')\n  canvas.width = 63\n  canvas.height = 63\n  const ctx = canvas.getContext('2d')!\n  ctx.drawImage(\n    source,\n    horizontalShift,\n    verticalShift,\n    sourceSize,\n    sourceSize,\n    0,\n    0,\n    canvas.width,\n    canvas.height\n  )\n\n  return new Promise<Blob | null>((resolve) =>\n    canvas.toBlob((blob) => resolve(blob))\n  )\n}\n","import { useEffect, useState } from 'react'\nimport { getThumbnailBlob } from '../helpers/thumbnailHelper'\n\n/**\n * Returns an image thumbnail URL and a function to revoke it.\n */\nfunction useImageThumbnail(imageUrl: string): [string | undefined, () => void] {\n  const [thumbnailUrl, setThumbnailUrl] = useState<string>()\n\n  useEffect(() => {\n    const image = new Image()\n    image.src = imageUrl\n    image.onload = async () => {\n      const blob = await getThumbnailBlob(\n        image,\n        image.naturalWidth,\n        image.naturalHeight\n      )\n      setThumbnailUrl(URL.createObjectURL(blob))\n    }\n  }, [imageUrl])\n\n  return [thumbnailUrl, () => URL.revokeObjectURL(thumbnailUrl!)]\n}\n\nexport default useImageThumbnail\n","import Button from '@material-ui/core/Button'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport clsx from 'clsx'\n\ntype SelectionButtonProps = {\n  active: boolean\n  disabled?: boolean\n  children: React.ReactNode\n  onClick: () => void\n}\n\nfunction SelectionButton(props: SelectionButtonProps) {\n  const classes = useStyles()\n\n  return (\n    <Button\n      className={clsx(classes.root, props.active && classes.active)}\n      disabled={props.disabled}\n      onClick={props.onClick}\n    >\n      {props.children}\n    </Button>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      padding: 0,\n      minWidth: theme.spacing(7) + 2,\n      height: theme.spacing(7) + 2,\n      width: theme.spacing(7) + 2,\n      marginRight: theme.spacing(1),\n      marginBottom: theme.spacing(1),\n      border: '2px solid transparent',\n      alignItems: 'stretch',\n      transitionProperty: 'transform, border-color',\n      transitionDuration: `${theme.transitions.duration.shorter}ms`,\n      transitionTimingFunction: theme.transitions.easing.easeInOut,\n\n      '&:hover': {\n        transform: 'scale(1.125)',\n      },\n    },\n    active: {\n      borderColor: theme.palette.primary.main,\n      transform: 'scale(1.125)',\n    },\n  })\n)\n\nexport default SelectionButton\n","import { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport Skeleton from '@material-ui/lab/Skeleton'\nimport clsx from 'clsx'\nimport SelectionButton from './SelectionButton'\n\ntype ThumbnailButtonProps = {\n  thumbnailUrl?: string\n  active: boolean\n  children?: React.ReactNode\n  onClick: () => void\n  onLoad?: () => void\n}\n\nfunction ThumbnailButton(props: ThumbnailButtonProps) {\n  const classes = useStyles()\n\n  return (\n    <SelectionButton\n      active={!!props.thumbnailUrl && props.active}\n      disabled={!props.thumbnailUrl}\n      onClick={props.onClick}\n    >\n      {props.thumbnailUrl ? (\n        <img\n          className={clsx(classes.scalableContent, classes.image)}\n          src={props.thumbnailUrl}\n          alt=\"\"\n          onLoad={props.onLoad}\n        />\n      ) : (\n        <Skeleton className={classes.scalableContent} variant=\"rect\" />\n      )}\n      {props.children}\n    </SelectionButton>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    scalableContent: {\n      // Fixes rendering issues with border when scaled\n      width: 'calc(100% + 2px)',\n      height: 'calc(100% + 2px)',\n      margin: -1,\n      borderRadius: theme.shape.borderRadius,\n    },\n    image: {\n      objectFit: 'cover',\n    },\n  })\n)\n\nexport default ThumbnailButton\n","import useImageThumbnail from '../hooks/useImageThumbnail'\nimport ThumbnailButton from './TumbnailButton'\n\ntype ImageButtonProps = {\n  imageUrl: string\n  active: boolean\n  onClick: () => void\n}\n\nfunction ImageButton(props: ImageButtonProps) {\n  const [thumbnailUrl, revokeThumbnailUrl] = useImageThumbnail(props.imageUrl)\n\n  return (\n    <ThumbnailButton\n      thumbnailUrl={thumbnailUrl}\n      active={props.active}\n      onClick={props.onClick}\n      onLoad={revokeThumbnailUrl}\n    />\n  )\n}\n\nexport default ImageButton\n","import { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport SelectionButton from './SelectionButton'\n\ntype SelectionIconButtonProps = {\n  active: boolean\n  children: React.ReactNode\n  onClick: () => void\n}\n\nfunction SelectionIconButton(props: SelectionIconButtonProps) {\n  const classes = useStyles()\n\n  return (\n    <SelectionButton active={props.active} onClick={props.onClick}>\n      <div className={classes.root}>{props.children}</div>\n    </SelectionButton>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: '100%',\n      height: '100%',\n      borderWidth: 1,\n      borderStyle: 'solid',\n      borderColor: 'rgba(0, 0, 0, 0.23)',\n      borderRadius: theme.shape.borderRadius,\n      margin: -1,\n      boxSizing: 'content-box',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n    },\n  })\n)\n\nexport default SelectionIconButton\n","export type Background = {\n  type: 'none' | 'blur' | 'image'\n  url?: string\n}\n\nexport const backgroundImageUrls = [\n  'architecture-5082700_1280',\n  'porch-691330_1280',\n  'saxon-switzerland-539418_1280',\n  'shibuyasky-4768679_1280',\n].map((imageName) => `${process.env.PUBLIC_URL}/backgrounds/${imageName}.jpg`)\n","import Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport Typography from '@material-ui/core/Typography'\nimport BlockIcon from '@material-ui/icons/Block'\nimport BlurOnIcon from '@material-ui/icons/BlurOn'\nimport ImageButton from '../../shared/components/ImageButton'\nimport SelectionIconButton from '../../shared/components/SelectionIconButton'\nimport { Background, backgroundImageUrls } from '../helpers/backgroundHelper'\n\ntype BackgroundSelectionCardProps = {\n  background: Background\n  onChange: (background: Background) => void\n}\n\nfunction BackgroundSelectionCard(props: BackgroundSelectionCardProps) {\n  const classes = useStyles()\n\n  return (\n    <Card className={classes.root}>\n      <CardContent>\n        <Typography gutterBottom variant=\"h6\" component=\"h2\">\n          Background\n        </Typography>\n        <SelectionIconButton\n          active={props.background.type === 'none'}\n          onClick={() => props.onChange({ type: 'none' })}\n        >\n          <BlockIcon />\n        </SelectionIconButton>\n        <SelectionIconButton\n          active={props.background.type === 'blur'}\n          onClick={() => props.onChange({ type: 'blur' })}\n        >\n          <BlurOnIcon />\n        </SelectionIconButton>\n        {backgroundImageUrls.map((imageUrl) => (\n          <ImageButton\n            key={imageUrl}\n            imageUrl={imageUrl}\n            active={imageUrl === props.background.url}\n            onClick={() => props.onChange({ type: 'image', url: imageUrl })}\n          />\n        ))}\n      </CardContent>\n    </Card>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flex: 1,\n    },\n  })\n)\n\nexport default BackgroundSelectionCard\n","import Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport Slider from '@material-ui/core/Slider'\nimport Switch from '@material-ui/core/Switch'\nimport Typography from '@material-ui/core/Typography'\nimport React, { ChangeEvent } from 'react'\nimport { PostProcessingConfig } from '../helpers/postProcessingHelper'\nimport { Pipeline } from '../helpers/segmentationHelper'\n\ntype PostProcessingConfigCardProps = {\n  config: PostProcessingConfig\n  pipeline: Pipeline\n  onChange: (postProcessingConfig: PostProcessingConfig) => void\n}\n\nfunction PostProcessingConfigCard(props: PostProcessingConfigCardProps) {\n  function handleSmoothSegmentationMaskChange(\n    event: ChangeEvent<HTMLInputElement>\n  ) {\n    props.onChange({\n      ...props.config,\n      smoothSegmentationMask: event.target.checked,\n    })\n  }\n\n  function handleSigmaSpaceChange(_event: any, value: number | number[]) {\n    props.onChange({\n      ...props.config,\n      jointBilateralFilter: {\n        ...props.config.jointBilateralFilter,\n        sigmaSpace: value as number,\n      },\n    })\n  }\n\n  function handleSigmaColorChange(_event: any, value: number | number[]) {\n    props.onChange({\n      ...props.config,\n      jointBilateralFilter: {\n        ...props.config.jointBilateralFilter,\n        sigmaColor: value as number,\n      },\n    })\n  }\n\n  return (\n    <Card>\n      <CardContent>\n        <Typography gutterBottom variant=\"h6\" component=\"h2\">\n          Post-processing\n        </Typography>\n        {props.pipeline === 'webgl2' ? (\n          <React.Fragment>\n            <Typography gutterBottom>Joint bilateral filter</Typography>\n            <Typography variant=\"body2\">Sigma space</Typography>\n            <Slider\n              value={props.config.jointBilateralFilter.sigmaSpace}\n              step={0.1}\n              valueLabelDisplay=\"auto\"\n              onChange={handleSigmaSpaceChange}\n            />\n            <Typography variant=\"body2\">Sigma color</Typography>\n            <Slider\n              value={props.config.jointBilateralFilter.sigmaColor}\n              min={0}\n              max={2}\n              step={0.01}\n              valueLabelDisplay=\"auto\"\n              onChange={handleSigmaColorChange}\n            />\n          </React.Fragment>\n        ) : (\n          <FormControlLabel\n            label=\"Smooth segmentation mask\"\n            control={\n              <Switch\n                color=\"primary\"\n                checked={props.config.smoothSegmentationMask}\n                onChange={handleSmoothSegmentationMaskChange}\n              />\n            }\n          />\n        )}\n      </CardContent>\n    </Card>\n  )\n}\n\nexport default PostProcessingConfigCard\n","import Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport FormControl from '@material-ui/core/FormControl'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport Select from '@material-ui/core/Select'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport Typography from '@material-ui/core/Typography'\nimport { ChangeEvent } from 'react'\nimport {\n  InputResolution,\n  Pipeline,\n  SegmentationConfig,\n  SegmentationModel,\n} from '../helpers/segmentationHelper'\n\ntype SegmentationConfigCardProps = {\n  config: SegmentationConfig\n  onChange: (segmentationConfig: SegmentationConfig) => void\n}\n\nfunction SegmentationConfigCard(props: SegmentationConfigCardProps) {\n  const classes = useStyles()\n\n  function handleModelChange(event: ChangeEvent<{ value: unknown }>) {\n    const model = event.target.value as SegmentationModel\n    let inputResolution = props.config.inputResolution\n    if (model === 'meet' && inputResolution === '360p') {\n      inputResolution = '144p'\n    }\n    let pipeline = props.config.pipeline\n    if (model === 'bodyPix' && pipeline === 'webgl2') {\n      pipeline = 'canvas2dCpu'\n    }\n    props.onChange({ ...props.config, model, inputResolution, pipeline })\n  }\n\n  function handleInputResolutionChange(event: ChangeEvent<{ value: unknown }>) {\n    props.onChange({\n      ...props.config,\n      inputResolution: event.target.value as InputResolution,\n    })\n  }\n\n  function handlePipelineChange(event: ChangeEvent<{ value: unknown }>) {\n    props.onChange({\n      ...props.config,\n      pipeline: event.target.value as Pipeline,\n    })\n  }\n\n  return (\n    <Card className={classes.root}>\n      <CardContent>\n        <Typography gutterBottom variant=\"h6\" component=\"h2\">\n          Segmentation\n        </Typography>\n        <FormControl className={classes.formControl} variant=\"outlined\">\n          <InputLabel>Model</InputLabel>\n          <Select\n            label=\"Model\"\n            value={props.config.model}\n            onChange={handleModelChange}\n          >\n            <MenuItem value=\"meet\">Meet</MenuItem>\n            <MenuItem value=\"bodyPix\">BodyPix</MenuItem>\n          </Select>\n        </FormControl>\n        <FormControl className={classes.formControl} variant=\"outlined\">\n          <InputLabel>Input resolution</InputLabel>\n          <Select\n            label=\"Input resolution\"\n            value={props.config.inputResolution}\n            onChange={handleInputResolutionChange}\n          >\n            <MenuItem value=\"360p\" disabled={props.config.model === 'meet'}>\n              360p\n            </MenuItem>\n            <MenuItem value=\"144p\">144p</MenuItem>\n            <MenuItem value=\"96p\">96p</MenuItem>\n          </Select>\n        </FormControl>\n        <FormControl className={classes.formControl} variant=\"outlined\">\n          <InputLabel>Pipeline</InputLabel>\n          <Select\n            label=\"Pipeline\"\n            value={props.config.pipeline}\n            onChange={handlePipelineChange}\n          >\n            <MenuItem\n              value=\"webgl2\"\n              disabled={props.config.model === 'bodyPix'}\n            >\n              WebGL 2 (WIP)\n            </MenuItem>\n            <MenuItem value=\"canvas2dCpu\">Canvas 2D + CPU</MenuItem>\n          </Select>\n        </FormControl>\n      </CardContent>\n    </Card>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      [theme.breakpoints.only('md')]: {\n        gridColumnStart: 2,\n        gridRowStart: 2,\n      },\n    },\n    formControl: {\n      marginTop: theme.spacing(1),\n      marginBottom: theme.spacing(1),\n      marginRight: theme.spacing(2),\n      minWidth: 120,\n    },\n  })\n)\n\nexport default SegmentationConfigCard\n","import { useEffect, useState } from 'react'\nimport { getThumbnailBlob } from '../helpers/thumbnailHelper'\n\n/**\n * Returns a video thumbnail URL and a function to revoke it.\n */\nfunction useVideoThumbnail(videoUrl: string): [string | undefined, () => void] {\n  const [thumbnailUrl, setThumbnailUrl] = useState<string>()\n\n  useEffect(() => {\n    const video = document.createElement('video')\n    video.src = videoUrl\n    video.onloadedmetadata = () => {\n      video.currentTime = video.duration / 2\n    }\n    video.onseeked = async () => {\n      const blob = await getThumbnailBlob(\n        video,\n        video.videoWidth,\n        video.videoHeight\n      )\n      setThumbnailUrl(URL.createObjectURL(blob))\n    }\n  }, [videoUrl])\n\n  return [thumbnailUrl, () => URL.revokeObjectURL(thumbnailUrl!)]\n}\n\nexport default useVideoThumbnail\n","import { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport PlayCircleOutlineIcon from '@material-ui/icons/PlayCircleOutline'\nimport useVideoThumbnail from '../hooks/useVideoThumbnail'\nimport ThumbnailButton from './TumbnailButton'\n\ntype VideoButtonProps = {\n  videoUrl: string\n  active: boolean\n  onClick: () => void\n}\n\nfunction VideoButton(props: VideoButtonProps) {\n  const classes = useStyles()\n  const [thumbnailUrl, revokeThumbnailUrl] = useVideoThumbnail(props.videoUrl)\n\n  return (\n    <ThumbnailButton\n      thumbnailUrl={thumbnailUrl}\n      active={props.active}\n      onClick={props.onClick}\n      onLoad={revokeThumbnailUrl}\n    >\n      <PlayCircleOutlineIcon className={classes.icon} />\n    </ThumbnailButton>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    icon: {\n      position: 'absolute',\n      bottom: 0,\n      right: 0,\n      color: theme.palette.common.white,\n    },\n  })\n)\n\nexport default VideoButton\n","export type Source = {\n  type: 'image' | 'video' | 'camera'\n  url?: string\n}\n\nexport type SourcePlayback = {\n  htmlElement: HTMLImageElement | HTMLVideoElement\n  width: number\n  height: number\n}\n\nexport const sourceImageUrls = [\n  'girl-919048_1280',\n  'doctor-5871743_640',\n  'woman-5883428_1280',\n].map((imageName) => `${process.env.PUBLIC_URL}/images/${imageName}.jpg`)\n\nexport const sourceVideoUrls = [\n  'Dance - 32938',\n  'Doctor - 26732',\n  'Thoughtful - 35590',\n].map((videoName) => `${process.env.PUBLIC_URL}/videos/${videoName}.mp4`)\n","import Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport Typography from '@material-ui/core/Typography'\nimport VideocamIcon from '@material-ui/icons/Videocam'\nimport ImageButton from '../../shared/components/ImageButton'\nimport SelectionIconButton from '../../shared/components/SelectionIconButton'\nimport VideoButton from '../../shared/components/VideoButton'\nimport {\n  Source,\n  sourceImageUrls,\n  sourceVideoUrls,\n} from '../helpers/sourceHelper'\n\ntype SourceSelectionCardProps = {\n  source: Source\n  onChange: (source: Source) => void\n}\n\nfunction SourceSelectionCard(props: SourceSelectionCardProps) {\n  const classes = useStyles()\n\n  return (\n    <Card className={classes.root}>\n      <CardContent>\n        <Typography gutterBottom variant=\"h6\" component=\"h2\">\n          Source\n        </Typography>\n        <SelectionIconButton\n          active={props.source.type === 'camera'}\n          onClick={() => props.onChange({ type: 'camera' })}\n        >\n          <VideocamIcon />\n        </SelectionIconButton>\n        {sourceImageUrls.map((imageUrl) => (\n          <ImageButton\n            key={imageUrl}\n            imageUrl={imageUrl}\n            active={imageUrl === props.source.url}\n            onClick={() => props.onChange({ type: 'image', url: imageUrl })}\n          />\n        ))}\n        {sourceVideoUrls.map((videoUrl) => (\n          <VideoButton\n            key={videoUrl}\n            videoUrl={videoUrl}\n            active={videoUrl === props.source.url}\n            onClick={() => props.onChange({ type: 'video', url: videoUrl })}\n          />\n        ))}\n      </CardContent>\n    </Card>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flex: 1,\n    },\n  })\n)\n\nexport default SourceSelectionCard\n","export type SegmentationModel = 'bodyPix' | 'meet'\n\nexport type InputResolution = '360p' | '144p' | '96p'\n\nexport const inputResolutions: {\n  [resolution in InputResolution]: [number, number]\n} = {\n  '360p': [640, 360],\n  '144p': [256, 144],\n  '96p': [160, 96],\n}\n\nexport type Pipeline = 'canvas2dCpu' | 'webgl2'\n\nexport type SegmentationConfig = {\n  model: SegmentationModel\n  inputResolution: InputResolution\n  pipeline: Pipeline\n}\n","import { BodyPix } from '@tensorflow-models/body-pix'\nimport { Background } from '../../core/helpers/backgroundHelper'\nimport { PostProcessingConfig } from '../../core/helpers/postProcessingHelper'\nimport {\n  inputResolutions,\n  SegmentationConfig,\n} from '../../core/helpers/segmentationHelper'\nimport { SourcePlayback } from '../../core/helpers/sourceHelper'\nimport { TFLite } from '../../core/hooks/useTFLite'\n\nexport function buildCanvas2dPipeline(\n  sourcePlayback: SourcePlayback,\n  background: Background,\n  canvas: HTMLCanvasElement,\n  bodyPix: BodyPix,\n  tflite: TFLite,\n  segmentationConfig: SegmentationConfig,\n  postProcessingConfig: PostProcessingConfig,\n  addFrameEvent: () => void\n) {\n  const ctx = canvas.getContext('2d')!\n\n  const [segmentationWidth, segmentationHeight] = inputResolutions[\n    segmentationConfig.inputResolution\n  ]\n  const segmentationPixelCount = segmentationWidth * segmentationHeight\n  const segmentationMask = new ImageData(segmentationWidth, segmentationHeight)\n  const segmentationMaskCanvas = document.createElement('canvas')\n  segmentationMaskCanvas.width = segmentationWidth\n  segmentationMaskCanvas.height = segmentationHeight\n  const segmentationMaskCtx = segmentationMaskCanvas.getContext('2d')!\n\n  const inputMemoryOffset = tflite._getInputMemoryOffset() / 4\n  const outputMemoryOffset = tflite._getOutputMemoryOffset() / 4\n\n  async function render() {\n    if (background.type !== 'none') {\n      resizeSource()\n    }\n\n    addFrameEvent()\n\n    if (background.type !== 'none') {\n      if (segmentationConfig.model === 'bodyPix') {\n        await runBodyPixInference()\n      } else {\n        runTFLiteInference()\n      }\n    }\n\n    addFrameEvent()\n\n    runPostProcessing()\n  }\n\n  function cleanUp() {\n    // Nothing to clean up in this rendering pipeline\n  }\n\n  function resizeSource() {\n    segmentationMaskCtx.drawImage(\n      sourcePlayback.htmlElement,\n      0,\n      0,\n      sourcePlayback.width,\n      sourcePlayback.height,\n      0,\n      0,\n      segmentationWidth,\n      segmentationHeight\n    )\n\n    if (segmentationConfig.model === 'meet') {\n      // TODO Use a shader to directly output the resizing result in memory\n      const imageData = segmentationMaskCtx.getImageData(\n        0,\n        0,\n        segmentationWidth,\n        segmentationHeight\n      )\n\n      for (let i = 0; i < segmentationPixelCount; i++) {\n        tflite.HEAPF32[inputMemoryOffset + i * 3] = imageData.data[i * 4] / 255\n        tflite.HEAPF32[inputMemoryOffset + i * 3 + 1] =\n          imageData.data[i * 4 + 1] / 255\n        tflite.HEAPF32[inputMemoryOffset + i * 3 + 2] =\n          imageData.data[i * 4 + 2] / 255\n      }\n    }\n  }\n\n  async function runBodyPixInference() {\n    const segmentation = await bodyPix.segmentPerson(segmentationMaskCanvas)\n    for (let i = 0; i < segmentationPixelCount; i++) {\n      // Sets only the alpha component of each pixel\n      segmentationMask.data[i * 4 + 3] = segmentation.data[i] ? 255 : 0\n    }\n    segmentationMaskCtx.putImageData(segmentationMask, 0, 0)\n  }\n\n  function runTFLiteInference() {\n    tflite._runInference()\n\n    // TODO Use shaders to completely avoid this kind of CPU manipulations\n    for (let i = 0; i < segmentationPixelCount; i++) {\n      // TODO Implement softmax on GPU instead\n      const background = tflite.HEAPF32[outputMemoryOffset + i * 2]\n      const person = tflite.HEAPF32[outputMemoryOffset + i * 2 + 1]\n      const shift = Math.max(background, person)\n      const backgroundExp = Math.exp(background - shift)\n      const personExp = Math.exp(person - shift)\n\n      // Sets only the alpha component of each pixel\n      segmentationMask.data[i * 4 + 3] =\n        (255 * personExp) / (backgroundExp + personExp) // softmax\n    }\n    segmentationMaskCtx.putImageData(segmentationMask, 0, 0)\n  }\n\n  function runPostProcessing() {\n    ctx.globalCompositeOperation = 'copy'\n    ctx.filter = 'none'\n\n    if (postProcessingConfig.smoothSegmentationMask) {\n      if (background.type === 'blur') {\n        ctx.filter = 'blur(8px)' // FIXME Does not work on Safari\n      } else if (background.type === 'image') {\n        ctx.filter = 'blur(4px)' // FIXME Does not work on Safari\n      }\n    }\n\n    if (background.type !== 'none') {\n      drawSegmentationMask()\n      ctx.globalCompositeOperation = 'source-in'\n      ctx.filter = 'none'\n    }\n\n    ctx.drawImage(sourcePlayback.htmlElement, 0, 0)\n\n    if (background.type === 'blur') {\n      blurBackground()\n    }\n  }\n\n  function drawSegmentationMask() {\n    ctx.drawImage(\n      segmentationMaskCanvas,\n      0,\n      0,\n      segmentationWidth,\n      segmentationHeight,\n      0,\n      0,\n      sourcePlayback.width,\n      sourcePlayback.height\n    )\n  }\n\n  function blurBackground() {\n    ctx.globalCompositeOperation = 'destination-over'\n    ctx.filter = 'blur(8px)' // FIXME Does not work on Safari\n    ctx.drawImage(sourcePlayback.htmlElement, 0, 0)\n  }\n\n  return { render, cleanUp }\n}\n","/**\n * Use it along with boyswan.glsl-literal VSCode extension\n * to get GLSL syntax highlighting.\n * https://marketplace.visualstudio.com/items?itemName=boyswan.glsl-literal\n *\n * On VSCode OSS, boyswan.glsl-literal requires slevesque.shader extension\n * to be installed as well.\n * https://marketplace.visualstudio.com/items?itemName=slevesque.shader\n */\nexport const glsl = String.raw\n\nexport function createPiplelineStageProgram(\n  gl: WebGL2RenderingContext,\n  vertexShader: WebGLShader,\n  fragmentShader: WebGLShader,\n  positionBuffer: WebGLBuffer,\n  texCoordBuffer: WebGLBuffer\n) {\n  const program = createProgram(gl, vertexShader, fragmentShader)\n\n  const positionAttributeLocation = gl.getAttribLocation(program, 'a_position')\n  gl.enableVertexAttribArray(positionAttributeLocation)\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer)\n  gl.vertexAttribPointer(positionAttributeLocation, 2, gl.FLOAT, false, 0, 0)\n\n  const texCoordAttributeLocation = gl.getAttribLocation(program, 'a_texCoord')\n  gl.enableVertexAttribArray(texCoordAttributeLocation)\n  gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer)\n  gl.vertexAttribPointer(texCoordAttributeLocation, 2, gl.FLOAT, false, 0, 0)\n\n  return program\n}\n\nexport function createProgram(\n  gl: WebGL2RenderingContext,\n  vertexShader: WebGLShader,\n  fragmentShader: WebGLShader\n) {\n  const program = gl.createProgram()!\n  gl.attachShader(program, vertexShader)\n  gl.attachShader(program, fragmentShader)\n  gl.linkProgram(program)\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    throw new Error(\n      `Could not link WebGL program: ${gl.getProgramInfoLog(program)}`\n    )\n  }\n  return program\n}\n\nexport function compileShader(\n  gl: WebGL2RenderingContext,\n  shaderType: number,\n  shaderSource: string\n) {\n  const shader = gl.createShader(shaderType)!\n  gl.shaderSource(shader, shaderSource)\n  gl.compileShader(shader)\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    throw new Error(`Could not compile shader: ${gl.getShaderInfoLog(shader)}`)\n  }\n  return shader\n}\n\nexport function createTexture(\n  gl: WebGL2RenderingContext,\n  internalformat: number,\n  width: number,\n  height: number\n) {\n  const texture = gl.createTexture()\n  gl.bindTexture(gl.TEXTURE_2D, texture)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST)\n  gl.texStorage2D(gl.TEXTURE_2D, 1, internalformat, width, height)\n  return texture\n}\n","import { Background } from '../../core/helpers/backgroundHelper'\nimport { PostProcessingConfig } from '../../core/helpers/postProcessingHelper'\nimport {\n  inputResolutions,\n  SegmentationConfig,\n} from '../../core/helpers/segmentationHelper'\nimport { SourcePlayback } from '../../core/helpers/sourceHelper'\nimport { TFLite } from '../../core/hooks/useTFLite'\nimport { compileShader, createTexture, glsl } from '../helpers/webglHelper'\nimport { buildJointBilateralFilterStage } from './jointBilateralFilterStage'\nimport { buildResizingStage } from './resizingStage'\nimport { buildSoftmaxStage } from './softmaxStage'\n\nexport function buildWebGL2Pipeline(\n  sourcePlayback: SourcePlayback,\n  background: Background,\n  canvas: HTMLCanvasElement,\n  tflite: TFLite,\n  segmentationConfig: SegmentationConfig,\n  postProcessingConfig: PostProcessingConfig,\n  addFrameEvent: () => void\n) {\n  const vertexShaderSource = glsl`#version 300 es\n\n    in vec4 a_position;\n    in vec2 a_texCoord;\n\n    uniform float u_flipY;\n\n    out vec2 v_texCoord;\n\n    void main() {\n      gl_Position = vec4(a_position.x, a_position.y * u_flipY, 0.0, 1.0);\n      v_texCoord = a_texCoord;\n    }\n  `\n\n  const { width: inputWidth, height: inputHeight } = sourcePlayback\n  const [segmentationWidth, segmentationHeight] = inputResolutions[\n    segmentationConfig.inputResolution\n  ]\n\n  const gl = canvas.getContext('webgl2')!\n\n  // TODO Check if the extension is available otherwise convert to floats on CPU\n  gl.getExtension('EXT_color_buffer_float')\n\n  const vertexShader = compileShader(gl, gl.VERTEX_SHADER, vertexShaderSource)\n\n  const vertexArray = gl.createVertexArray()\n  gl.bindVertexArray(vertexArray)\n\n  const positionBuffer = gl.createBuffer()!\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer)\n  gl.bufferData(\n    gl.ARRAY_BUFFER,\n    new Float32Array([-1.0, -1.0, 1.0, -1.0, -1.0, 1.0, 1.0, 1.0]),\n    gl.STATIC_DRAW\n  )\n\n  const texCoordBuffer = gl.createBuffer()!\n  gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer)\n  gl.bufferData(\n    gl.ARRAY_BUFFER,\n    new Float32Array([0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0]),\n    gl.STATIC_DRAW\n  )\n\n  const inputFrameTexture = createTexture(gl, gl.RGBA8, inputWidth, inputHeight)\n  const segmentationTexture = createTexture(\n    gl,\n    gl.RGBA8,\n    segmentationWidth,\n    segmentationHeight\n  )!\n\n  const resizingStage = buildResizingStage(\n    gl,\n    vertexShader,\n    positionBuffer,\n    texCoordBuffer,\n    segmentationConfig,\n    tflite\n  )\n  const softmaxStage = buildSoftmaxStage(\n    gl,\n    vertexShader,\n    positionBuffer,\n    texCoordBuffer,\n    segmentationConfig,\n    tflite,\n    segmentationTexture\n  )\n  const jointBilateralFilterStage = buildJointBilateralFilterStage(\n    gl,\n    vertexShader,\n    positionBuffer,\n    texCoordBuffer,\n    segmentationTexture,\n    postProcessingConfig,\n    canvas\n  )\n\n  async function render() {\n    gl.clearColor(0, 0, 0, 0)\n    gl.clear(gl.COLOR_BUFFER_BIT)\n\n    gl.activeTexture(gl.TEXTURE0)\n    gl.bindTexture(gl.TEXTURE_2D, inputFrameTexture)\n    gl.texSubImage2D(\n      gl.TEXTURE_2D,\n      0,\n      0,\n      0,\n      gl.RGBA,\n      gl.UNSIGNED_BYTE,\n      sourcePlayback.htmlElement\n    )\n\n    gl.bindVertexArray(vertexArray)\n\n    resizingStage.render()\n\n    addFrameEvent()\n\n    tflite._runInference()\n\n    addFrameEvent()\n\n    softmaxStage.render()\n    jointBilateralFilterStage.render()\n  }\n\n  function cleanUp() {\n    jointBilateralFilterStage.cleanUp()\n    softmaxStage.cleanUp()\n    resizingStage.cleanUp()\n\n    gl.deleteTexture(segmentationTexture)\n    gl.deleteTexture(inputFrameTexture)\n    gl.deleteBuffer(texCoordBuffer)\n    gl.deleteBuffer(positionBuffer)\n    gl.deleteVertexArray(vertexArray)\n    gl.deleteShader(vertexShader)\n  }\n\n  return { render, cleanUp }\n}\n","import {\n  inputResolutions,\n  SegmentationConfig,\n} from '../../core/helpers/segmentationHelper'\nimport { TFLite } from '../../core/hooks/useTFLite'\nimport {\n  compileShader,\n  createPiplelineStageProgram,\n  createTexture,\n  glsl,\n} from '../helpers/webglHelper'\n\nexport function buildResizingStage(\n  gl: WebGL2RenderingContext,\n  vertexShader: WebGLShader,\n  positionBuffer: WebGLBuffer,\n  texCoordBuffer: WebGLBuffer,\n  segmentationConfig: SegmentationConfig,\n  tflite: TFLite\n) {\n  const fragmentShaderSource = glsl`#version 300 es\n\n    precision highp float;\n\n    uniform sampler2D u_inputFrame;\n\n    in vec2 v_texCoord;\n\n    out vec4 outColor;\n\n    void main() {\n      outColor = texture(u_inputFrame, v_texCoord);\n    }\n  `\n\n  // TFLite memory will be accessed as float32\n  const tfliteInputMemoryOffset = tflite._getInputMemoryOffset() / 4\n\n  const [outputWidth, outputHeight] = inputResolutions[\n    segmentationConfig.inputResolution\n  ]\n  const outputPixelCount = outputWidth * outputHeight\n\n  const fragmentShader = compileShader(\n    gl,\n    gl.FRAGMENT_SHADER,\n    fragmentShaderSource\n  )\n  const program = createPiplelineStageProgram(\n    gl,\n    vertexShader,\n    fragmentShader,\n    positionBuffer,\n    texCoordBuffer\n  )\n  const flipYLocation = gl.getUniformLocation(program, 'u_flipY')\n  const inputFrameLocation = gl.getUniformLocation(program, 'u_inputFrame')\n  const outputTexture = createTexture(gl, gl.RGBA32F, outputWidth, outputHeight)\n\n  const frameBuffer = gl.createFramebuffer()\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer)\n  gl.framebufferTexture2D(\n    gl.FRAMEBUFFER,\n    gl.COLOR_ATTACHMENT0,\n    gl.TEXTURE_2D,\n    outputTexture,\n    0\n  )\n  const outputPixels = new Float32Array(outputPixelCount * 4)\n\n  function render() {\n    gl.useProgram(program)\n    gl.uniform1f(flipYLocation, 1)\n    gl.uniform1i(inputFrameLocation, 0)\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer)\n    gl.viewport(0, 0, outputWidth, outputHeight)\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4)\n\n    gl.readPixels(\n      0,\n      0,\n      outputWidth,\n      outputHeight,\n      gl.RGBA,\n      gl.FLOAT,\n      outputPixels\n    )\n    for (let i = 0; i < outputPixelCount; i++) {\n      const tfliteIndex = tfliteInputMemoryOffset + i * 3\n      const outputIndex = i * 4\n      tflite.HEAPF32[tfliteIndex] = outputPixels[outputIndex]\n      tflite.HEAPF32[tfliteIndex + 1] = outputPixels[outputIndex + 1]\n      tflite.HEAPF32[tfliteIndex + 2] = outputPixels[outputIndex + 2]\n    }\n  }\n\n  function cleanUp() {\n    gl.deleteFramebuffer(frameBuffer)\n    gl.deleteTexture(outputTexture)\n    gl.deleteProgram(program)\n    gl.deleteShader(fragmentShader)\n  }\n\n  return { render, cleanUp }\n}\n","import {\n  inputResolutions,\n  SegmentationConfig,\n} from '../../core/helpers/segmentationHelper'\nimport { TFLite } from '../../core/hooks/useTFLite'\nimport {\n  compileShader,\n  createPiplelineStageProgram,\n  createTexture,\n  glsl,\n} from '../helpers/webglHelper'\n\nexport function buildSoftmaxStage(\n  gl: WebGL2RenderingContext,\n  vertexShader: WebGLShader,\n  positionBuffer: WebGLBuffer,\n  texCoordBuffer: WebGLBuffer,\n  segmentationConfig: SegmentationConfig,\n  tflite: TFLite,\n  outputTexture: WebGLTexture\n) {\n  const fragmentShaderSource = glsl`#version 300 es\n\n    precision highp float;\n\n    uniform sampler2D u_inputSegmentation;\n\n    in vec2 v_texCoord;\n\n    out vec4 outColor;\n\n    void main() {\n      vec2 segmentation = texture(u_inputSegmentation, v_texCoord).rg;\n      float shift = max(segmentation.r, segmentation.g);\n      float backgroundExp = exp(segmentation.r - shift);\n      float personExp = exp(segmentation.g - shift);\n      outColor = vec4(vec3(0.0), personExp / (backgroundExp + personExp));\n    }\n  `\n\n  // TFLite memory will be accessed as float32\n  const tfliteOutputMemoryOffset = tflite._getOutputMemoryOffset() / 4\n\n  const [segmentationWidth, segmentationHeight] = inputResolutions[\n    segmentationConfig.inputResolution\n  ]\n\n  const fragmentShader = compileShader(\n    gl,\n    gl.FRAGMENT_SHADER,\n    fragmentShaderSource\n  )\n  const program = createPiplelineStageProgram(\n    gl,\n    vertexShader,\n    fragmentShader,\n    positionBuffer,\n    texCoordBuffer\n  )\n  const flipYLocation = gl.getUniformLocation(program, 'u_flipY')\n  const inputLocation = gl.getUniformLocation(program, 'u_inputSegmentation')\n  const inputTexture = createTexture(\n    gl,\n    gl.RG32F,\n    segmentationWidth,\n    segmentationHeight\n  )\n\n  const frameBuffer = gl.createFramebuffer()\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer)\n  gl.framebufferTexture2D(\n    gl.FRAMEBUFFER,\n    gl.COLOR_ATTACHMENT0,\n    gl.TEXTURE_2D,\n    outputTexture,\n    0\n  )\n\n  function render() {\n    gl.useProgram(program)\n    gl.uniform1f(flipYLocation, 1)\n    gl.activeTexture(gl.TEXTURE1)\n    gl.bindTexture(gl.TEXTURE_2D, inputTexture)\n    gl.texSubImage2D(\n      gl.TEXTURE_2D,\n      0,\n      0,\n      0,\n      segmentationWidth,\n      segmentationHeight,\n      gl.RG,\n      gl.FLOAT,\n      tflite.HEAPF32,\n      tfliteOutputMemoryOffset\n    )\n    gl.uniform1i(inputLocation, 1)\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer)\n    gl.viewport(0, 0, segmentationWidth, segmentationHeight)\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4)\n  }\n\n  function cleanUp() {\n    gl.deleteFramebuffer(frameBuffer)\n    gl.deleteTexture(inputTexture)\n    gl.deleteProgram(program)\n    gl.deleteShader(fragmentShader)\n  }\n\n  return { render, cleanUp }\n}\n","import { PostProcessingConfig } from '../../core/helpers/postProcessingHelper'\nimport {\n  compileShader,\n  createPiplelineStageProgram,\n  glsl,\n} from '../helpers/webglHelper'\n\nexport function buildJointBilateralFilterStage(\n  gl: WebGL2RenderingContext,\n  vertexShader: WebGLShader,\n  positionBuffer: WebGLBuffer,\n  texCoordBuffer: WebGLBuffer,\n  inputTexture: WebGLTexture,\n  postProcessingConfig: PostProcessingConfig,\n  canvas: HTMLCanvasElement\n) {\n  const fragmentShaderSource = glsl`#version 300 es\n\n    precision highp float;\n\n    uniform sampler2D u_inputFrame;\n    uniform sampler2D u_segmentationMask;\n    uniform vec2 u_texelSize;\n\n    in vec2 v_texCoord;\n\n    out vec4 outColor;\n\n    const float sigmaSpace = ${postProcessingConfig.jointBilateralFilter.sigmaSpace.toFixed(\n      2\n    )};\n    const float sigmaColor = ${postProcessingConfig.jointBilateralFilter.sigmaColor.toFixed(\n      2\n    )};\n\n    const float kSparsityFactor = 0.66;  // Higher is more sparse.\n    const float sparsity = max(1.0, sqrt(sigmaSpace) * kSparsityFactor);\n    const float step = sparsity;\n    const float radius = sigmaSpace;\n    const float offset = (step > 1.0) ? (step * 0.5) : (0.0);\n\n    float gaussian(float x, float sigma) {\n      float coeff = -0.5 / (sigma * sigma * 4.0 + 1.0e-6);\n      return exp((x * x) * coeff);\n    }\n\n    void main() {\n      vec2 centerCoord = v_texCoord;\n      vec3 centerColor = texture(u_inputFrame, centerCoord).rgb;\n      float newVal = 0.0;\n\n      float spaceWeight = 0.0;\n      float colorWeight = 0.0;\n      float totalWeight = 0.0;\n\n      float sigmaTexel = max(u_texelSize.x, u_texelSize.y) * sigmaSpace;\n\n      // Subsample kernel space.\n      for (float i = -radius + offset; i <= radius; i += step) {\n        for (float j = -radius + offset; j <= radius; j += step) {\n          vec2 shift = vec2(j, i) * u_texelSize;\n          vec2 coord = vec2(centerCoord + shift);\n          vec3 frameColor = texture(u_inputFrame, coord).rgb;\n          float outVal = texture(u_segmentationMask, coord).a;\n\n          spaceWeight = gaussian(distance(centerCoord, coord), sigmaTexel);\n          colorWeight = gaussian(distance(centerColor, frameColor), sigmaColor);\n          totalWeight += spaceWeight * colorWeight;\n\n          newVal += spaceWeight * colorWeight * outVal;\n        }\n      }\n      newVal /= totalWeight;\n\n      outColor = vec4(vec3(newVal), 1.0);\n    }\n  `\n\n  const { width: outputWidth, height: outputHeight } = canvas\n\n  const texelWidth = 1 / outputWidth\n  const texelHeight = 1 / outputHeight\n\n  const fragmentShader = compileShader(\n    gl,\n    gl.FRAGMENT_SHADER,\n    fragmentShaderSource\n  )\n  const program = createPiplelineStageProgram(\n    gl,\n    vertexShader,\n    fragmentShader,\n    positionBuffer,\n    texCoordBuffer\n  )\n  const flipYLocation = gl.getUniformLocation(program, 'u_flipY')\n  const inputFrameLocation = gl.getUniformLocation(program, 'u_inputFrame')\n  const segmentationMaskLocation = gl.getUniformLocation(\n    program,\n    'u_segmentationMask'\n  )\n  const texelSizeLocation = gl.getUniformLocation(program, 'u_texelSize')\n\n  function render() {\n    gl.useProgram(program)\n    gl.uniform1f(flipYLocation, -1)\n    gl.uniform1i(inputFrameLocation, 0)\n    gl.activeTexture(gl.TEXTURE1)\n    gl.bindTexture(gl.TEXTURE_2D, inputTexture)\n    gl.uniform1i(segmentationMaskLocation, 1)\n    gl.uniform2f(texelSizeLocation, texelWidth, texelHeight)\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null)\n    gl.viewport(0, 0, outputWidth, outputHeight)\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4)\n  }\n\n  function cleanUp() {\n    gl.deleteProgram(program)\n    gl.deleteShader(fragmentShader)\n  }\n\n  return { render, cleanUp }\n}\n","import { useCallback, useRef, useState } from 'react'\n\nfunction useStats() {\n  const [fps, setFps] = useState(0)\n  const [durations, setDurations] = useState<number[]>([])\n  const previousTimeRef = useRef(0)\n  const beginTimeRef = useRef(0)\n  const durationsRef = useRef<number[]>([])\n  const eventCount = useRef(0)\n  const frameCountRef = useRef(0)\n\n  // The useCallbacks below are required to prevent infinite loop\n  // when the functions are called inside useEffect\n\n  const beginFrame = useCallback(() => {\n    beginTimeRef.current = Date.now()\n  }, [])\n\n  const addFrameEvent = useCallback(() => {\n    const time = Date.now()\n    durationsRef.current[eventCount.current] = time - beginTimeRef.current\n    beginTimeRef.current = time\n    eventCount.current++\n  }, [])\n\n  const endFrame = useCallback(() => {\n    const time = Date.now()\n    durationsRef.current[eventCount.current] = time - beginTimeRef.current\n    frameCountRef.current++\n    if (time >= previousTimeRef.current + 1000) {\n      setFps((frameCountRef.current * 1000) / (time - previousTimeRef.current))\n      setDurations(durationsRef.current)\n      previousTimeRef.current = time\n      frameCountRef.current = 0\n    }\n    eventCount.current = 0\n  }, [])\n\n  return { fps, durations, beginFrame, addFrameEvent, endFrame }\n}\n\nexport default useStats\n","import { BodyPix } from '@tensorflow-models/body-pix'\nimport { useEffect, useRef } from 'react'\nimport { buildCanvas2dPipeline } from '../../pipelines/canvas2d/canvas2dPipeline'\nimport { buildWebGL2Pipeline } from '../../pipelines/webgl2/webgl2Pipeline'\nimport { Background } from '../helpers/backgroundHelper'\nimport { PostProcessingConfig } from '../helpers/postProcessingHelper'\nimport { SegmentationConfig } from '../helpers/segmentationHelper'\nimport { SourcePlayback } from '../helpers/sourceHelper'\nimport useStats from './useStats'\nimport { TFLite } from './useTFLite'\n\nfunction useRenderingPipeline(\n  sourcePlayback: SourcePlayback,\n  background: Background,\n  bodyPix: BodyPix,\n  tflite: TFLite,\n  segmentationConfig: SegmentationConfig,\n  postProcessingConfig: PostProcessingConfig\n) {\n  const canvasRef = useRef<HTMLCanvasElement>(null!)\n  const { fps, durations, beginFrame, addFrameEvent, endFrame } = useStats()\n\n  useEffect(() => {\n    // The useEffect cleanup function is not enough to stop\n    // the rendering loop when the framerate is low\n    let shouldRender = true\n\n    let renderRequestId: number\n\n    const pipeline =\n      segmentationConfig.pipeline === 'webgl2'\n        ? buildWebGL2Pipeline(\n            sourcePlayback,\n            background,\n            canvasRef.current,\n            tflite,\n            segmentationConfig,\n            postProcessingConfig,\n            addFrameEvent\n          )\n        : buildCanvas2dPipeline(\n            sourcePlayback,\n            background,\n            canvasRef.current,\n            bodyPix,\n            tflite,\n            segmentationConfig,\n            postProcessingConfig,\n            addFrameEvent\n          )\n\n    async function render() {\n      if (!shouldRender) {\n        return\n      }\n      beginFrame()\n      await pipeline.render()\n      endFrame()\n      renderRequestId = requestAnimationFrame(render)\n    }\n\n    render()\n    console.log(\n      'Animation started:',\n      sourcePlayback,\n      background,\n      segmentationConfig,\n      postProcessingConfig\n    )\n\n    return () => {\n      shouldRender = false\n      cancelAnimationFrame(renderRequestId)\n      pipeline.cleanUp()\n      console.log(\n        'Animation stopped:',\n        sourcePlayback,\n        background,\n        segmentationConfig,\n        postProcessingConfig\n      )\n    }\n  }, [\n    sourcePlayback,\n    background,\n    bodyPix,\n    tflite,\n    segmentationConfig,\n    postProcessingConfig,\n    beginFrame,\n    addFrameEvent,\n    endFrame,\n  ])\n\n  return { canvasRef, fps, durations }\n}\n\nexport default useRenderingPipeline\n","import { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport Typography from '@material-ui/core/Typography'\nimport { BodyPix } from '@tensorflow-models/body-pix'\nimport React from 'react'\nimport { Background } from '../helpers/backgroundHelper'\nimport { PostProcessingConfig } from '../helpers/postProcessingHelper'\nimport { SegmentationConfig } from '../helpers/segmentationHelper'\nimport { SourcePlayback } from '../helpers/sourceHelper'\nimport useRenderingPipeline from '../hooks/useRenderingPipeline'\nimport { TFLite } from '../hooks/useTFLite'\n\ntype OutputViewerProps = {\n  sourcePlayback: SourcePlayback\n  background: Background\n  bodyPix: BodyPix\n  tflite: TFLite\n  segmentationConfig: SegmentationConfig\n  postProcessingConfig: PostProcessingConfig\n}\n\nfunction OutputViewer(props: OutputViewerProps) {\n  const classes = useStyles()\n  const {\n    canvasRef,\n    fps,\n    durations: [resizingDuration, inferenceDuration, postProcessingDuration],\n  } = useRenderingPipeline(\n    props.sourcePlayback,\n    props.background,\n    props.bodyPix,\n    props.tflite,\n    props.segmentationConfig,\n    props.postProcessingConfig\n  )\n\n  const statDetails = [\n    `resizing ${resizingDuration}ms`,\n    `inference ${inferenceDuration}ms`,\n    `post-processing ${postProcessingDuration}ms`,\n  ]\n  const stats = `${Math.round(fps)} fps (${statDetails.join(', ')})`\n\n  return (\n    <div className={classes.root}>\n      {props.segmentationConfig.pipeline === 'canvas2dCpu' &&\n        props.background.type === 'image' && (\n          <img className={classes.render} src={props.background.url} alt=\"\" />\n        )}\n      <canvas\n        // The key attribute is required to create a new canvas when switching\n        // context mode\n        key={props.segmentationConfig.pipeline}\n        ref={canvasRef}\n        className={classes.render}\n        width={props.sourcePlayback.width}\n        height={props.sourcePlayback.height}\n      />\n      <Typography className={classes.stats} variant=\"caption\">\n        {stats}\n      </Typography>\n    </div>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flex: 1,\n      position: 'relative',\n    },\n    render: {\n      position: 'absolute',\n      width: '100%',\n      height: '100%',\n      objectFit: 'cover',\n    },\n    stats: {\n      position: 'absolute',\n      top: 0,\n      right: 0,\n      left: 0,\n      textAlign: 'center',\n      backgroundColor: 'rgba(0, 0, 0, 0.48)',\n      color: theme.palette.common.white,\n    },\n  })\n)\n\nexport default OutputViewer\n","import CircularProgress from '@material-ui/core/CircularProgress'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport VideocamOffIcon from '@material-ui/icons/VideocamOff'\nimport React, { SyntheticEvent, useEffect, useRef, useState } from 'react'\nimport { Source, SourcePlayback } from '../helpers/sourceHelper'\n\ntype SourceViewerProps = {\n  source: Source\n  onLoad: (sourcePlayback: SourcePlayback) => void\n}\n\nfunction SourceViewer(props: SourceViewerProps) {\n  const classes = useStyles()\n  const [sourceUrl, setSourceUrl] = useState<string>()\n  const [isLoading, setLoading] = useState(false)\n  const [isCameraError, setCameraError] = useState(false)\n  const videoRef = useRef<HTMLVideoElement>(null)\n\n  useEffect(() => {\n    setSourceUrl(undefined)\n    setLoading(true)\n    setCameraError(false)\n\n    // Enforces reloading the resource, otherwise\n    // onLoad event is not always dispatched and the\n    // progress indicator never disappears\n    setTimeout(() => setSourceUrl(props.source.url))\n  }, [props.source])\n\n  useEffect(() => {\n    async function getCameraStream() {\n      try {\n        const constraint = { video: true }\n        const stream = await navigator.mediaDevices.getUserMedia(constraint)\n        if (videoRef.current) {\n          videoRef.current.srcObject = stream\n          return\n        }\n      } catch (error) {\n        console.error('Error opening video camera.', error)\n      }\n      setLoading(false)\n      setCameraError(true)\n    }\n\n    if (props.source.type === 'camera') {\n      getCameraStream()\n    } else if (videoRef.current) {\n      videoRef.current.srcObject = null\n    }\n  }, [props.source])\n\n  function handleImageLoad(event: SyntheticEvent) {\n    const image = event.target as HTMLImageElement\n    props.onLoad({\n      htmlElement: image,\n      width: image.naturalWidth,\n      height: image.naturalHeight,\n    })\n    setLoading(false)\n  }\n\n  function handleVideoLoad(event: SyntheticEvent) {\n    const video = event.target as HTMLVideoElement\n    props.onLoad({\n      htmlElement: video,\n      width: video.videoWidth,\n      height: video.videoHeight,\n    })\n    setLoading(false)\n  }\n\n  return (\n    <div className={classes.root}>\n      {isLoading && <CircularProgress />}\n      {props.source.type === 'image' ? (\n        <img\n          className={classes.sourcePlayback}\n          src={sourceUrl}\n          hidden={isLoading}\n          alt=\"\"\n          onLoad={handleImageLoad}\n        />\n      ) : isCameraError ? (\n        <VideocamOffIcon fontSize=\"large\" />\n      ) : (\n        <video\n          ref={videoRef}\n          className={classes.sourcePlayback}\n          src={sourceUrl}\n          hidden={isLoading}\n          autoPlay\n          playsInline\n          controls={false}\n          muted\n          loop\n          onLoadedData={handleVideoLoad}\n        />\n      )}\n    </div>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      position: 'relative',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n\n      [theme.breakpoints.down('xs')]: {\n        width: 0,\n        overflow: 'hidden',\n      },\n\n      [theme.breakpoints.up('sm')]: {\n        flex: 1,\n        borderRightWidth: 1,\n        borderRightStyle: 'solid',\n        borderRightColor: theme.palette.divider,\n      },\n    },\n    sourcePlayback: {\n      position: 'absolute',\n      width: '100%',\n      height: '100%',\n      objectFit: 'cover',\n    },\n  })\n)\n\nexport default SourceViewer\n","import Avatar from '@material-ui/core/Avatar'\nimport Paper from '@material-ui/core/Paper'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport { BodyPix } from '@tensorflow-models/body-pix'\nimport { useEffect, useState } from 'react'\nimport { Background } from '../helpers/backgroundHelper'\nimport { PostProcessingConfig } from '../helpers/postProcessingHelper'\nimport { SegmentationConfig } from '../helpers/segmentationHelper'\nimport { Source, SourcePlayback } from '../helpers/sourceHelper'\nimport { TFLite } from '../hooks/useTFLite'\nimport OutputViewer from './OutputViewer'\nimport SourceViewer from './SourceViewer'\n\ntype ViewerCardProps = {\n  source: Source\n  background: Background\n  bodyPix?: BodyPix\n  tflite?: TFLite\n  segmentationConfig: SegmentationConfig\n  postProcessingConfig: PostProcessingConfig\n}\n\nfunction ViewerCard(props: ViewerCardProps) {\n  const classes = useStyles()\n  const [sourcePlayback, setSourcePlayback] = useState<SourcePlayback>()\n\n  useEffect(() => {\n    setSourcePlayback(undefined)\n  }, [props.source])\n\n  return (\n    <Paper className={classes.root}>\n      <SourceViewer source={props.source} onLoad={setSourcePlayback} />\n      {sourcePlayback && props.bodyPix && props.tflite ? (\n        <OutputViewer\n          sourcePlayback={sourcePlayback}\n          background={props.background}\n          bodyPix={props.bodyPix}\n          tflite={props.tflite}\n          segmentationConfig={props.segmentationConfig}\n          postProcessingConfig={props.postProcessingConfig}\n        />\n      ) : (\n        <div className={classes.noOutput}>\n          <Avatar className={classes.avatar} />\n        </div>\n      )}\n    </Paper>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) => {\n  const minHeight = [`${theme.spacing(52)}px`, `100vh - ${theme.spacing(2)}px`]\n\n  return createStyles({\n    root: {\n      minHeight: `calc(min(${minHeight.join(', ')}))`,\n      display: 'flex',\n      overflow: 'hidden',\n\n      [theme.breakpoints.up('md')]: {\n        gridColumnStart: 1,\n        gridColumnEnd: 3,\n      },\n\n      [theme.breakpoints.up('lg')]: {\n        gridRowStart: 1,\n        gridRowEnd: 3,\n      },\n    },\n    noOutput: {\n      flex: 1,\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n    },\n    avatar: {\n      width: theme.spacing(20),\n      height: theme.spacing(20),\n    },\n  })\n})\n\nexport default ViewerCard\n","import * as tfBodyPix from '@tensorflow-models/body-pix'\nimport * as tf from '@tensorflow/tfjs'\nimport { useEffect, useState } from 'react'\n\nfunction useBodyPix() {\n  const [bodyPix, setBodyPix] = useState<tfBodyPix.BodyPix>()\n\n  useEffect(() => {\n    async function loadBodyPix() {\n      console.log('Loading TensorFlow.js and BodyPix segmentation model')\n      await tf.ready()\n      setBodyPix(await tfBodyPix.load())\n      console.log('TensorFlow.js and BodyPix loaded')\n    }\n\n    loadBodyPix()\n  }, [])\n\n  return bodyPix\n}\n\nexport default useBodyPix\n","import { useEffect, useState } from 'react'\nimport { SegmentationConfig } from '../helpers/segmentationHelper'\nimport { TFLite } from './useTFLite'\n\nfunction useMeetModel(\n  tflite: TFLite | undefined,\n  segmentationConfig: SegmentationConfig\n) {\n  const [isLoaded, setLoaded] = useState(false)\n\n  useEffect(() => {\n    async function loadMeetModel() {\n      if (!tflite || segmentationConfig.model !== 'meet') {\n        return\n      }\n\n      setLoaded(false)\n\n      const modelFileName =\n        segmentationConfig.inputResolution === '144p'\n          ? 'segm_full_v679'\n          : 'segm_lite_v681'\n      console.log('Loading meet model:', modelFileName)\n\n      const modelResponse = await fetch(\n        `${process.env.PUBLIC_URL}/models/${modelFileName}.tflite`\n      )\n      const model = await modelResponse.arrayBuffer()\n      console.log('Model buffer size:', model.byteLength)\n\n      const modelBufferOffset = tflite._getModelBufferMemoryOffset()\n      console.log('Model buffer memory offset:', modelBufferOffset)\n      console.log('Loading model buffer...')\n      tflite.HEAPU8.set(new Uint8Array(model), modelBufferOffset)\n      console.log('_loadModel result:', tflite._loadModel(model.byteLength))\n\n      console.log('Input memory offset:', tflite._getInputMemoryOffset())\n      console.log('Input height:', tflite._getInputHeight())\n      console.log('Input width:', tflite._getInputWidth())\n      console.log('Input channels:', tflite._getInputChannelCount())\n\n      console.log('Output memory offset:', tflite._getOutputMemoryOffset())\n      console.log('Output height:', tflite._getOutputHeight())\n      console.log('Output width:', tflite._getOutputWidth())\n      console.log('Output channels:', tflite._getOutputChannelCount())\n\n      setLoaded(true)\n    }\n\n    loadMeetModel()\n  }, [tflite, segmentationConfig])\n\n  return isLoaded\n}\n\nexport default useMeetModel\n","import { useEffect, useState } from 'react'\n\ndeclare function createTFLiteModule(): Promise<TFLite>\n\nexport interface TFLite extends EmscriptenModule {\n  _getModelBufferMemoryOffset(): number\n  _getInputMemoryOffset(): number\n  _getInputHeight(): number\n  _getInputWidth(): number\n  _getInputChannelCount(): number\n  _getOutputMemoryOffset(): number\n  _getOutputHeight(): number\n  _getOutputWidth(): number\n  _getOutputChannelCount(): number\n  _loadModel(bufferSize: number): number\n  _runInference(): number\n}\n\nfunction useTFLite() {\n  const [tflite, setTFLite] = useState<TFLite>()\n\n  useEffect(() => {\n    // TODO Detect WASM features to handle SIMD and multithreading\n    async function loadTFLite() {\n      setTFLite(await createTFLiteModule())\n    }\n\n    loadTFLite()\n  }, [])\n\n  return tflite\n}\n\nexport default useTFLite\n","import { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport { useState } from 'react'\nimport BackgroundSelectionCard from './core/components/BackgroundSelectionCard'\nimport PostProcessingConfigCard from './core/components/PostProcessingConfigCard'\nimport SegmentationConfigCard from './core/components/SegmentationConfigCard'\nimport SourceSelectionCard from './core/components/SourceSelectionCard'\nimport ViewerCard from './core/components/ViewerCard'\nimport {\n  Background,\n  backgroundImageUrls,\n} from './core/helpers/backgroundHelper'\nimport { PostProcessingConfig } from './core/helpers/postProcessingHelper'\nimport { SegmentationConfig } from './core/helpers/segmentationHelper'\nimport { Source, sourceImageUrls } from './core/helpers/sourceHelper'\nimport useBodyPix from './core/hooks/useBodyPix'\nimport useMeetModel from './core/hooks/useMeetModel'\nimport useTFLite from './core/hooks/useTFLite'\n\nfunction App() {\n  const bodyPix = useBodyPix()\n  const tflite = useTFLite()\n\n  const classes = useStyles()\n  const [source, setSource] = useState<Source>({\n    type: 'image',\n    url: sourceImageUrls[0],\n  })\n  const [background, setBackground] = useState<Background>({\n    type: 'image',\n    url: backgroundImageUrls[0],\n  })\n  const [\n    segmentationConfig,\n    setSegmentationConfig,\n  ] = useState<SegmentationConfig>({\n    model: 'meet',\n    inputResolution: '96p',\n    pipeline: 'canvas2dCpu',\n  })\n  const [\n    postProcessingConfig,\n    setPostProcessingConfig,\n  ] = useState<PostProcessingConfig>({\n    smoothSegmentationMask: true,\n    jointBilateralFilter: { sigmaSpace: 4, sigmaColor: 0.05 },\n  })\n\n  // FIXME Animation stops, starts and stops again when changing segmentation config\n  const isMeetModelLoaded = useMeetModel(tflite, segmentationConfig)\n\n  return (\n    <div className={classes.root}>\n      <ViewerCard\n        source={source}\n        background={background}\n        bodyPix={bodyPix}\n        tflite={\n          // TODO Find a better way to handle both bodyPix and tflite props\n          isMeetModelLoaded || segmentationConfig.model === 'bodyPix'\n            ? tflite\n            : undefined\n        }\n        segmentationConfig={segmentationConfig}\n        postProcessingConfig={postProcessingConfig}\n      />\n      <SourceSelectionCard source={source} onChange={setSource} />\n      <BackgroundSelectionCard\n        background={background}\n        onChange={setBackground}\n      />\n      <SegmentationConfigCard\n        config={segmentationConfig}\n        onChange={setSegmentationConfig}\n      />\n      <PostProcessingConfigCard\n        config={postProcessingConfig}\n        pipeline={segmentationConfig.pipeline}\n        onChange={setPostProcessingConfig}\n      />\n    </div>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'grid',\n\n      [theme.breakpoints.up('xs')]: {\n        margin: theme.spacing(1),\n        gap: theme.spacing(1),\n        gridTemplateColumns: '1fr',\n      },\n\n      [theme.breakpoints.up('md')]: {\n        margin: theme.spacing(2),\n        gap: theme.spacing(2),\n        gridTemplateColumns: 'repeat(2, 1fr)',\n      },\n\n      [theme.breakpoints.up('lg')]: {\n        gridTemplateColumns: 'repeat(3, 1fr)',\n      },\n    },\n    resourceSelectionCards: {\n      display: 'flex',\n      flexDirection: 'column',\n    },\n  })\n)\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import CssBaseline from '@material-ui/core/CssBaseline'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}