{"version":3,"sources":["shared/helpers/thumbnailHelper.ts","shared/hooks/useImageThumbnail.ts","shared/components/SelectionButton.tsx","shared/components/TumbnailButton.tsx","shared/components/ImageButton.tsx","shared/components/SelectionIconButton.tsx","core/helpers/backgroundHelper.ts","core/components/BackgroundConfigCard.tsx","core/components/PostProcessingConfigCard.tsx","core/components/SegmentationConfigCard.tsx","shared/hooks/useVideoThumbnail.ts","shared/components/VideoButton.tsx","core/helpers/sourceHelper.ts","core/components/SourceConfigCard.tsx","core/helpers/segmentationHelper.ts","pipelines/canvas2d/canvas2dPipeline.ts","pipelines/helpers/webglHelper.ts","pipelines/webgl2/webgl2Pipeline.ts","pipelines/webgl2/resizingStage.ts","pipelines/webgl2/softmaxStage.ts","pipelines/webgl2/jointBilateralFilterStage.ts","pipelines/webgl2/backgroundStage.ts","core/hooks/useStats.ts","core/hooks/useRenderingPipeline.ts","core/components/OutputViewer.tsx","core/components/SourceViewer.tsx","core/components/ViewerCard.tsx","core/hooks/useBodyPix.ts","core/hooks/useMeetModel.ts","core/hooks/useTFLite.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getThumbnailBlob","source","originalWidth","originalHeight","sourceSize","Math","min","horizontalShift","verticalShift","canvas","document","createElement","width","height","getContext","drawImage","Promise","resolve","toBlob","blob","useImageThumbnail","imageUrl","useState","thumbnailUrl","setThumbnailUrl","useEffect","image","Image","src","onload","a","naturalWidth","naturalHeight","URL","createObjectURL","revokeObjectURL","useStyles","makeStyles","theme","createStyles","root","padding","minWidth","spacing","marginRight","marginBottom","border","alignItems","transitionProperty","transitionDuration","transitions","duration","shorter","transitionTimingFunction","easing","easeInOut","transform","active","borderColor","palette","primary","main","SelectionButton","props","classes","Button","className","clsx","disabled","onClick","children","scalableContent","margin","borderRadius","shape","objectFit","ThumbnailButton","alt","onLoad","Skeleton","variant","ImageButton","revokeThumbnailUrl","borderWidth","borderStyle","boxSizing","display","justifyContent","SelectionIconButton","backgroundImageUrls","map","imageName","process","flex","BackgroundConfigCard","Card","CardContent","Typography","gutterBottom","component","config","type","onChange","url","PostProcessingConfigCard","pipeline","Fragment","Slider","value","jointBilateralFilter","sigmaSpace","max","step","valueLabelDisplay","_event","sigmaColor","FormControlLabel","label","control","Switch","color","checked","smoothSegmentationMask","event","target","breakpoints","only","gridColumnStart","gridRowStart","formControl","marginTop","SegmentationConfigCard","FormControl","InputLabel","Select","model","inputResolution","MenuItem","useVideoThumbnail","videoUrl","video","onloadedmetadata","currentTime","onseeked","videoWidth","videoHeight","icon","position","bottom","right","common","white","VideoButton","sourceImageUrls","sourceVideoUrls","videoName","SourceConfigCard","inputResolutions","buildCanvas2dPipeline","sourcePlayback","backgroundConfig","segmentationConfig","bodyPix","tflite","addFrameEvent","ctx","segmentationWidth","segmentationHeight","segmentationPixelCount","segmentationMask","ImageData","segmentationMaskCanvas","postProcessingConfig","segmentationMaskCtx","inputMemoryOffset","_getInputMemoryOffset","outputMemoryOffset","_getOutputMemoryOffset","resizeSource","runBodyPixInference","runTFLiteInference","runPostProcessing","htmlElement","imageData","getImageData","i","HEAPF32","data","segmentPerson","segmentation","putImageData","_runInference","background","person","shift","backgroundExp","exp","personExp","globalCompositeOperation","filter","render","updatePostProcessingConfig","newPostProcessingConfig","cleanUp","glsl","String","raw","createPiplelineStageProgram","gl","vertexShader","fragmentShader","positionBuffer","texCoordBuffer","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","Error","getProgramInfoLog","positionAttributeLocation","getAttribLocation","enableVertexAttribArray","bindBuffer","ARRAY_BUFFER","vertexAttribPointer","FLOAT","texCoordAttributeLocation","compileShader","shaderType","shaderSource","shader","createShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","createTexture","internalformat","minFilter","NEAREST","magFilter","texture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","texStorage2D","buildWebGL2Pipeline","backgroundImage","vertexShaderSource","frameWidth","frameHeight","getExtension","VERTEX_SHADER","vertexArray","createVertexArray","bindVertexArray","createBuffer","bufferData","Float32Array","STATIC_DRAW","inputFrameTexture","RGBA8","segmentationTexture","personMaskTexture","resizingStage","fragmentShaderSource","tfliteInputMemoryOffset","outputWidth","outputHeight","outputPixelCount","FRAGMENT_SHADER","inputFrameLocation","getUniformLocation","outputTexture","RGBA32F","frameBuffer","createFramebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","outputPixels","useProgram","uniform1i","viewport","drawArrays","TRIANGLE_STRIP","readPixels","RGBA","tfliteIndex","outputIndex","deleteFramebuffer","deleteTexture","deleteProgram","deleteShader","buildResizingStage","softmaxStage","tfliteOutputMemoryOffset","inputLocation","inputTexture","RG32F","activeTexture","TEXTURE1","texSubImage2D","RG","buildSoftmaxStage","jointBilateralFilterStage","texelWidth","texelHeight","segmentationMaskLocation","texelSizeLocation","stepLocation","radiusLocation","offsetLocation","sigmaTexelLocation","sigmaColorLocation","updateSigmaSpace","sqrt","radius","offset","sigmaTexel","uniform1f","updateSigmaColor","uniform2f","buildJointBilateralFilterStage","backgroundStage","outputRatio","backgroundScaleLocation","backgroundOffsetLocation","personMaskLocation","backgroundLocation","backgroundTexture","updateBackgroundImage","LINEAR","UNSIGNED_BYTE","xOffset","yOffset","backgroundWidth","backgroundHeight","xScale","yScale","complete","TEXTURE2","buildBackgroundStage","clearColor","clear","COLOR_BUFFER_BIT","TEXTURE0","deleteBuffer","deleteVertexArray","useStats","fps","setFps","durations","setDurations","previousTimeRef","useRef","beginTimeRef","durationsRef","eventCount","frameCountRef","beginFrame","useCallback","current","Date","now","time","endFrame","useRenderingPipeline","setPipeline","backgroundImageRef","canvasRef","renderRequestId","shouldRender","newPipeline","requestAnimationFrame","console","log","cancelAnimationFrame","stats","top","left","textAlign","backgroundColor","OutputViewer","resizingDuration","inferenceDuration","postProcessingDuration","statDetails","round","join","ref","hidden","down","overflow","up","borderRightWidth","borderRightStyle","borderRightColor","divider","SourceViewer","sourceUrl","setSourceUrl","isLoading","setLoading","isCameraError","setCameraError","videoRef","undefined","setTimeout","sourceConfig","constraint","navigator","mediaDevices","getUserMedia","stream","srcObject","error","getCameraStream","CircularProgress","fontSize","autoPlay","playsInline","controls","muted","loop","onLoadedData","minHeight","gridColumnEnd","gridRowEnd","noOutput","avatar","ViewerCard","setSourcePlayback","Paper","Avatar","useBodyPix","setBodyPix","tf","tfBodyPix","loadBodyPix","useMeetModel","isLoaded","setLoaded","modelFileName","fetch","modelResponse","arrayBuffer","byteLength","modelBufferOffset","_getModelBufferMemoryOffset","HEAPU8","set","Uint8Array","_loadModel","_getInputHeight","_getInputWidth","_getInputChannelCount","_getOutputHeight","_getOutputWidth","_getOutputChannelCount","loadMeetModel","useTFLite","setTFLite","createTFLiteModule","loadTFLite","gap","gridTemplateColumns","resourceSelectionCards","flexDirection","App","setSourceConfig","setBackgroundConfig","setSegmentationConfig","setPostProcessingConfig","isMeetModelLoaded","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","CssBaseline","getElementById"],"mappings":"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","file":"static/js/main.a4ec0c67.chunk.js","sourcesContent":["/**\n * Returns a thumbnail as a Blob.\n * @param source The source image or video.\n * @param originalWidth The original width of the source before sizing.\n * @param originalHeight The original height of the source before sizing.\n */\nexport function getThumbnailBlob(\n  source: HTMLImageElement | HTMLVideoElement,\n  originalWidth: number,\n  originalHeight: number\n) {\n  const sourceSize = Math.min(originalWidth, originalHeight)\n  const horizontalShift = (originalWidth - sourceSize) / 2\n  const verticalShift = (originalHeight - sourceSize) / 2\n\n  const canvas = document.createElement('canvas')\n  canvas.width = 63\n  canvas.height = 63\n  const ctx = canvas.getContext('2d')!\n  ctx.drawImage(\n    source,\n    horizontalShift,\n    verticalShift,\n    sourceSize,\n    sourceSize,\n    0,\n    0,\n    canvas.width,\n    canvas.height\n  )\n\n  return new Promise<Blob | null>((resolve) =>\n    canvas.toBlob((blob) => resolve(blob))\n  )\n}\n","import { useEffect, useState } from 'react'\nimport { getThumbnailBlob } from '../helpers/thumbnailHelper'\n\n/**\n * Returns an image thumbnail URL and a function to revoke it.\n */\nfunction useImageThumbnail(imageUrl: string): [string | undefined, () => void] {\n  const [thumbnailUrl, setThumbnailUrl] = useState<string>()\n\n  useEffect(() => {\n    const image = new Image()\n    image.src = imageUrl\n    image.onload = async () => {\n      const blob = await getThumbnailBlob(\n        image,\n        image.naturalWidth,\n        image.naturalHeight\n      )\n      setThumbnailUrl(URL.createObjectURL(blob))\n    }\n  }, [imageUrl])\n\n  return [thumbnailUrl, () => URL.revokeObjectURL(thumbnailUrl!)]\n}\n\nexport default useImageThumbnail\n","import Button from '@material-ui/core/Button'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport clsx from 'clsx'\n\ntype SelectionButtonProps = {\n  active: boolean\n  disabled?: boolean\n  children: React.ReactNode\n  onClick: () => void\n}\n\nfunction SelectionButton(props: SelectionButtonProps) {\n  const classes = useStyles()\n\n  return (\n    <Button\n      className={clsx(classes.root, props.active && classes.active)}\n      disabled={props.disabled}\n      onClick={props.onClick}\n    >\n      {props.children}\n    </Button>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      padding: 0,\n      minWidth: theme.spacing(7) + 2,\n      height: theme.spacing(7) + 2,\n      width: theme.spacing(7) + 2,\n      marginRight: theme.spacing(1),\n      marginBottom: theme.spacing(1),\n      border: '2px solid transparent',\n      alignItems: 'stretch',\n      transitionProperty: 'transform, border-color',\n      transitionDuration: `${theme.transitions.duration.shorter}ms`,\n      transitionTimingFunction: theme.transitions.easing.easeInOut,\n\n      '&:hover': {\n        transform: 'scale(1.125)',\n      },\n    },\n    active: {\n      borderColor: theme.palette.primary.main,\n      transform: 'scale(1.125)',\n    },\n  })\n)\n\nexport default SelectionButton\n","import { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport Skeleton from '@material-ui/lab/Skeleton'\nimport clsx from 'clsx'\nimport SelectionButton from './SelectionButton'\n\ntype ThumbnailButtonProps = {\n  thumbnailUrl?: string\n  active: boolean\n  children?: React.ReactNode\n  onClick: () => void\n  onLoad?: () => void\n}\n\nfunction ThumbnailButton(props: ThumbnailButtonProps) {\n  const classes = useStyles()\n\n  return (\n    <SelectionButton\n      active={!!props.thumbnailUrl && props.active}\n      disabled={!props.thumbnailUrl}\n      onClick={props.onClick}\n    >\n      {props.thumbnailUrl ? (\n        <img\n          className={clsx(classes.scalableContent, classes.image)}\n          src={props.thumbnailUrl}\n          alt=\"\"\n          onLoad={props.onLoad}\n        />\n      ) : (\n        <Skeleton className={classes.scalableContent} variant=\"rect\" />\n      )}\n      {props.children}\n    </SelectionButton>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    scalableContent: {\n      // Fixes rendering issues with border when scaled\n      width: 'calc(100% + 2px)',\n      height: 'calc(100% + 2px)',\n      margin: -1,\n      borderRadius: theme.shape.borderRadius,\n    },\n    image: {\n      objectFit: 'cover',\n    },\n  })\n)\n\nexport default ThumbnailButton\n","import useImageThumbnail from '../hooks/useImageThumbnail'\nimport ThumbnailButton from './TumbnailButton'\n\ntype ImageButtonProps = {\n  imageUrl: string\n  active: boolean\n  onClick: () => void\n}\n\nfunction ImageButton(props: ImageButtonProps) {\n  const [thumbnailUrl, revokeThumbnailUrl] = useImageThumbnail(props.imageUrl)\n\n  return (\n    <ThumbnailButton\n      thumbnailUrl={thumbnailUrl}\n      active={props.active}\n      onClick={props.onClick}\n      onLoad={revokeThumbnailUrl}\n    />\n  )\n}\n\nexport default ImageButton\n","import { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport SelectionButton from './SelectionButton'\n\ntype SelectionIconButtonProps = {\n  active: boolean\n  children: React.ReactNode\n  onClick: () => void\n}\n\nfunction SelectionIconButton(props: SelectionIconButtonProps) {\n  const classes = useStyles()\n\n  return (\n    <SelectionButton active={props.active} onClick={props.onClick}>\n      <div className={classes.root}>{props.children}</div>\n    </SelectionButton>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: '100%',\n      height: '100%',\n      borderWidth: 1,\n      borderStyle: 'solid',\n      borderColor: 'rgba(0, 0, 0, 0.23)',\n      borderRadius: theme.shape.borderRadius,\n      margin: -1,\n      boxSizing: 'content-box',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n    },\n  })\n)\n\nexport default SelectionIconButton\n","export type BackgroundConfig = {\n  type: 'none' | 'blur' | 'image'\n  url?: string\n}\n\nexport const backgroundImageUrls = [\n  'architecture-5082700_1280',\n  'porch-691330_1280',\n  'saxon-switzerland-539418_1280',\n  'shibuyasky-4768679_1280',\n].map((imageName) => `${process.env.PUBLIC_URL}/backgrounds/${imageName}.jpg`)\n","import Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport Typography from '@material-ui/core/Typography'\nimport BlockIcon from '@material-ui/icons/Block'\nimport BlurOnIcon from '@material-ui/icons/BlurOn'\nimport ImageButton from '../../shared/components/ImageButton'\nimport SelectionIconButton from '../../shared/components/SelectionIconButton'\nimport {\n  BackgroundConfig,\n  backgroundImageUrls,\n} from '../helpers/backgroundHelper'\n\ntype BackgroundConfigCardProps = {\n  config: BackgroundConfig\n  onChange: (config: BackgroundConfig) => void\n}\n\nfunction BackgroundConfigCard(props: BackgroundConfigCardProps) {\n  const classes = useStyles()\n\n  return (\n    <Card className={classes.root}>\n      <CardContent>\n        <Typography gutterBottom variant=\"h6\" component=\"h2\">\n          Background\n        </Typography>\n        <SelectionIconButton\n          active={props.config.type === 'none'}\n          onClick={() => props.onChange({ type: 'none' })}\n        >\n          <BlockIcon />\n        </SelectionIconButton>\n        <SelectionIconButton\n          active={props.config.type === 'blur'}\n          onClick={() => props.onChange({ type: 'blur' })}\n        >\n          <BlurOnIcon />\n        </SelectionIconButton>\n        {backgroundImageUrls.map((imageUrl) => (\n          <ImageButton\n            key={imageUrl}\n            imageUrl={imageUrl}\n            active={imageUrl === props.config.url}\n            onClick={() => props.onChange({ type: 'image', url: imageUrl })}\n          />\n        ))}\n      </CardContent>\n    </Card>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flex: 1,\n    },\n  })\n)\n\nexport default BackgroundConfigCard\n","import Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport Slider from '@material-ui/core/Slider'\nimport Switch from '@material-ui/core/Switch'\nimport Typography from '@material-ui/core/Typography'\nimport React, { ChangeEvent } from 'react'\nimport { PostProcessingConfig } from '../helpers/postProcessingHelper'\nimport { PipelineName } from '../helpers/segmentationHelper'\n\ntype PostProcessingConfigCardProps = {\n  config: PostProcessingConfig\n  pipeline: PipelineName\n  onChange: (config: PostProcessingConfig) => void\n}\n\nfunction PostProcessingConfigCard(props: PostProcessingConfigCardProps) {\n  function handleSmoothSegmentationMaskChange(\n    event: ChangeEvent<HTMLInputElement>\n  ) {\n    props.onChange({\n      ...props.config,\n      smoothSegmentationMask: event.target.checked,\n    })\n  }\n\n  function handleSigmaSpaceChange(_event: any, value: number | number[]) {\n    props.onChange({\n      ...props.config,\n      jointBilateralFilter: {\n        ...props.config.jointBilateralFilter,\n        sigmaSpace: value as number,\n      },\n    })\n  }\n\n  function handleSigmaColorChange(_event: any, value: number | number[]) {\n    props.onChange({\n      ...props.config,\n      jointBilateralFilter: {\n        ...props.config.jointBilateralFilter,\n        sigmaColor: value as number,\n      },\n    })\n  }\n\n  return (\n    <Card>\n      <CardContent>\n        <Typography gutterBottom variant=\"h6\" component=\"h2\">\n          Post-processing\n        </Typography>\n        {props.pipeline === 'webgl2' ? (\n          <React.Fragment>\n            <Typography gutterBottom>Joint bilateral filter</Typography>\n            <Typography variant=\"body2\">Sigma space</Typography>\n            <Slider\n              value={props.config.jointBilateralFilter.sigmaSpace}\n              min={0}\n              max={10}\n              step={0.1}\n              valueLabelDisplay=\"auto\"\n              onChange={handleSigmaSpaceChange}\n            />\n            <Typography variant=\"body2\">Sigma color</Typography>\n            <Slider\n              value={props.config.jointBilateralFilter.sigmaColor}\n              min={0}\n              max={1}\n              step={0.01}\n              valueLabelDisplay=\"auto\"\n              onChange={handleSigmaColorChange}\n            />\n          </React.Fragment>\n        ) : (\n          <FormControlLabel\n            label=\"Smooth segmentation mask\"\n            control={\n              <Switch\n                color=\"primary\"\n                checked={props.config.smoothSegmentationMask}\n                onChange={handleSmoothSegmentationMaskChange}\n              />\n            }\n          />\n        )}\n      </CardContent>\n    </Card>\n  )\n}\n\nexport default PostProcessingConfigCard\n","import Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport FormControl from '@material-ui/core/FormControl'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport Select from '@material-ui/core/Select'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport Typography from '@material-ui/core/Typography'\nimport { ChangeEvent } from 'react'\nimport {\n  InputResolution,\n  PipelineName,\n  SegmentationConfig,\n  SegmentationModel,\n} from '../helpers/segmentationHelper'\n\ntype SegmentationConfigCardProps = {\n  config: SegmentationConfig\n  onChange: (config: SegmentationConfig) => void\n}\n\nfunction SegmentationConfigCard(props: SegmentationConfigCardProps) {\n  const classes = useStyles()\n\n  function handleModelChange(event: ChangeEvent<{ value: unknown }>) {\n    const model = event.target.value as SegmentationModel\n    let inputResolution = props.config.inputResolution\n    if (model === 'meet' && inputResolution === '360p') {\n      inputResolution = '144p'\n    } else if (model === 'bodyPix') {\n      inputResolution = '360p'\n    }\n    let pipeline = props.config.pipeline\n    if (model === 'bodyPix' && pipeline === 'webgl2') {\n      pipeline = 'canvas2dCpu'\n    }\n    props.onChange({ ...props.config, model, inputResolution, pipeline })\n  }\n\n  function handleInputResolutionChange(event: ChangeEvent<{ value: unknown }>) {\n    props.onChange({\n      ...props.config,\n      inputResolution: event.target.value as InputResolution,\n    })\n  }\n\n  function handlePipelineChange(event: ChangeEvent<{ value: unknown }>) {\n    props.onChange({\n      ...props.config,\n      pipeline: event.target.value as PipelineName,\n    })\n  }\n\n  return (\n    <Card className={classes.root}>\n      <CardContent>\n        <Typography gutterBottom variant=\"h6\" component=\"h2\">\n          Segmentation\n        </Typography>\n        <FormControl className={classes.formControl} variant=\"outlined\">\n          <InputLabel>Model</InputLabel>\n          <Select\n            label=\"Model\"\n            value={props.config.model}\n            onChange={handleModelChange}\n          >\n            <MenuItem value=\"meet\">Meet</MenuItem>\n            <MenuItem value=\"bodyPix\">BodyPix</MenuItem>\n          </Select>\n        </FormControl>\n        <FormControl className={classes.formControl} variant=\"outlined\">\n          <InputLabel>Input resolution</InputLabel>\n          <Select\n            label=\"Input resolution\"\n            value={props.config.inputResolution}\n            onChange={handleInputResolutionChange}\n          >\n            <MenuItem value=\"360p\" disabled={props.config.model === 'meet'}>\n              360p\n            </MenuItem>\n            <MenuItem value=\"144p\" disabled={props.config.model === 'bodyPix'}>\n              144p\n            </MenuItem>\n            <MenuItem value=\"96p\" disabled={props.config.model === 'bodyPix'}>\n              96p\n            </MenuItem>\n          </Select>\n        </FormControl>\n        <FormControl className={classes.formControl} variant=\"outlined\">\n          <InputLabel>Pipeline</InputLabel>\n          <Select\n            label=\"Pipeline\"\n            value={props.config.pipeline}\n            onChange={handlePipelineChange}\n          >\n            <MenuItem\n              value=\"webgl2\"\n              disabled={props.config.model === 'bodyPix'}\n            >\n              WebGL 2 (WIP)\n            </MenuItem>\n            <MenuItem value=\"canvas2dCpu\">Canvas 2D + CPU</MenuItem>\n          </Select>\n        </FormControl>\n      </CardContent>\n    </Card>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      [theme.breakpoints.only('md')]: {\n        gridColumnStart: 2,\n        gridRowStart: 2,\n      },\n    },\n    formControl: {\n      marginTop: theme.spacing(1),\n      marginBottom: theme.spacing(1),\n      marginRight: theme.spacing(2),\n      minWidth: 120,\n    },\n  })\n)\n\nexport default SegmentationConfigCard\n","import { useEffect, useState } from 'react'\nimport { getThumbnailBlob } from '../helpers/thumbnailHelper'\n\n/**\n * Returns a video thumbnail URL and a function to revoke it.\n */\nfunction useVideoThumbnail(videoUrl: string): [string | undefined, () => void] {\n  const [thumbnailUrl, setThumbnailUrl] = useState<string>()\n\n  useEffect(() => {\n    const video = document.createElement('video')\n    video.src = videoUrl\n    video.onloadedmetadata = () => {\n      video.currentTime = video.duration / 2\n    }\n    video.onseeked = async () => {\n      const blob = await getThumbnailBlob(\n        video,\n        video.videoWidth,\n        video.videoHeight\n      )\n      setThumbnailUrl(URL.createObjectURL(blob))\n    }\n  }, [videoUrl])\n\n  return [thumbnailUrl, () => URL.revokeObjectURL(thumbnailUrl!)]\n}\n\nexport default useVideoThumbnail\n","import { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport PlayCircleOutlineIcon from '@material-ui/icons/PlayCircleOutline'\nimport useVideoThumbnail from '../hooks/useVideoThumbnail'\nimport ThumbnailButton from './TumbnailButton'\n\ntype VideoButtonProps = {\n  videoUrl: string\n  active: boolean\n  onClick: () => void\n}\n\nfunction VideoButton(props: VideoButtonProps) {\n  const classes = useStyles()\n  const [thumbnailUrl, revokeThumbnailUrl] = useVideoThumbnail(props.videoUrl)\n\n  return (\n    <ThumbnailButton\n      thumbnailUrl={thumbnailUrl}\n      active={props.active}\n      onClick={props.onClick}\n      onLoad={revokeThumbnailUrl}\n    >\n      <PlayCircleOutlineIcon className={classes.icon} />\n    </ThumbnailButton>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    icon: {\n      position: 'absolute',\n      bottom: 0,\n      right: 0,\n      color: theme.palette.common.white,\n    },\n  })\n)\n\nexport default VideoButton\n","export type SourceConfig = {\n  type: 'image' | 'video' | 'camera'\n  url?: string\n}\n\nexport type SourcePlayback = {\n  htmlElement: HTMLImageElement | HTMLVideoElement\n  width: number\n  height: number\n}\n\nexport const sourceImageUrls = [\n  'girl-919048_1280',\n  'doctor-5871743_640',\n  'woman-5883428_1280',\n].map((imageName) => `${process.env.PUBLIC_URL}/images/${imageName}.jpg`)\n\nexport const sourceVideoUrls = [\n  'Dance - 32938',\n  'Doctor - 26732',\n  'Thoughtful - 35590',\n].map((videoName) => `${process.env.PUBLIC_URL}/videos/${videoName}.mp4`)\n","import Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport Typography from '@material-ui/core/Typography'\nimport VideocamIcon from '@material-ui/icons/Videocam'\nimport ImageButton from '../../shared/components/ImageButton'\nimport SelectionIconButton from '../../shared/components/SelectionIconButton'\nimport VideoButton from '../../shared/components/VideoButton'\nimport {\n  SourceConfig,\n  sourceImageUrls,\n  sourceVideoUrls,\n} from '../helpers/sourceHelper'\n\ntype SourceConfigCardProps = {\n  config: SourceConfig\n  onChange: (config: SourceConfig) => void\n}\n\nfunction SourceConfigCard(props: SourceConfigCardProps) {\n  const classes = useStyles()\n\n  return (\n    <Card className={classes.root}>\n      <CardContent>\n        <Typography gutterBottom variant=\"h6\" component=\"h2\">\n          Source\n        </Typography>\n        <SelectionIconButton\n          active={props.config.type === 'camera'}\n          onClick={() => props.onChange({ type: 'camera' })}\n        >\n          <VideocamIcon />\n        </SelectionIconButton>\n        {sourceImageUrls.map((imageUrl) => (\n          <ImageButton\n            key={imageUrl}\n            imageUrl={imageUrl}\n            active={imageUrl === props.config.url}\n            onClick={() => props.onChange({ type: 'image', url: imageUrl })}\n          />\n        ))}\n        {sourceVideoUrls.map((videoUrl) => (\n          <VideoButton\n            key={videoUrl}\n            videoUrl={videoUrl}\n            active={videoUrl === props.config.url}\n            onClick={() => props.onChange({ type: 'video', url: videoUrl })}\n          />\n        ))}\n      </CardContent>\n    </Card>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flex: 1,\n    },\n  })\n)\n\nexport default SourceConfigCard\n","export type SegmentationModel = 'bodyPix' | 'meet'\n\nexport type InputResolution = '360p' | '144p' | '96p'\n\nexport const inputResolutions: {\n  [resolution in InputResolution]: [number, number]\n} = {\n  '360p': [640, 360],\n  '144p': [256, 144],\n  '96p': [160, 96],\n}\n\nexport type PipelineName = 'canvas2dCpu' | 'webgl2'\n\nexport type SegmentationConfig = {\n  model: SegmentationModel\n  inputResolution: InputResolution\n  pipeline: PipelineName\n}\n","import { BodyPix } from '@tensorflow-models/body-pix'\nimport { BackgroundConfig } from '../../core/helpers/backgroundHelper'\nimport { PostProcessingConfig } from '../../core/helpers/postProcessingHelper'\nimport {\n  inputResolutions,\n  SegmentationConfig,\n} from '../../core/helpers/segmentationHelper'\nimport { SourcePlayback } from '../../core/helpers/sourceHelper'\nimport { TFLite } from '../../core/hooks/useTFLite'\n\nexport function buildCanvas2dPipeline(\n  sourcePlayback: SourcePlayback,\n  backgroundConfig: BackgroundConfig,\n  segmentationConfig: SegmentationConfig,\n  canvas: HTMLCanvasElement,\n  bodyPix: BodyPix,\n  tflite: TFLite,\n  addFrameEvent: () => void\n) {\n  const ctx = canvas.getContext('2d')!\n\n  const [segmentationWidth, segmentationHeight] = inputResolutions[\n    segmentationConfig.inputResolution\n  ]\n  const segmentationPixelCount = segmentationWidth * segmentationHeight\n  const segmentationMask = new ImageData(segmentationWidth, segmentationHeight)\n  const segmentationMaskCanvas = document.createElement('canvas')\n  segmentationMaskCanvas.width = segmentationWidth\n  segmentationMaskCanvas.height = segmentationHeight\n  const segmentationMaskCtx = segmentationMaskCanvas.getContext('2d')!\n\n  const inputMemoryOffset = tflite._getInputMemoryOffset() / 4\n  const outputMemoryOffset = tflite._getOutputMemoryOffset() / 4\n\n  let postProcessingConfig: PostProcessingConfig\n\n  async function render() {\n    if (backgroundConfig.type !== 'none') {\n      resizeSource()\n    }\n\n    addFrameEvent()\n\n    if (backgroundConfig.type !== 'none') {\n      if (segmentationConfig.model === 'bodyPix') {\n        await runBodyPixInference()\n      } else {\n        runTFLiteInference()\n      }\n    }\n\n    addFrameEvent()\n\n    runPostProcessing()\n  }\n\n  function updatePostProcessingConfig(\n    newPostProcessingConfig: PostProcessingConfig\n  ) {\n    postProcessingConfig = newPostProcessingConfig\n  }\n\n  function cleanUp() {\n    // Nothing to clean up in this rendering pipeline\n  }\n\n  function resizeSource() {\n    segmentationMaskCtx.drawImage(\n      sourcePlayback.htmlElement,\n      0,\n      0,\n      sourcePlayback.width,\n      sourcePlayback.height,\n      0,\n      0,\n      segmentationWidth,\n      segmentationHeight\n    )\n\n    if (segmentationConfig.model === 'meet') {\n      const imageData = segmentationMaskCtx.getImageData(\n        0,\n        0,\n        segmentationWidth,\n        segmentationHeight\n      )\n\n      for (let i = 0; i < segmentationPixelCount; i++) {\n        tflite.HEAPF32[inputMemoryOffset + i * 3] = imageData.data[i * 4] / 255\n        tflite.HEAPF32[inputMemoryOffset + i * 3 + 1] =\n          imageData.data[i * 4 + 1] / 255\n        tflite.HEAPF32[inputMemoryOffset + i * 3 + 2] =\n          imageData.data[i * 4 + 2] / 255\n      }\n    }\n  }\n\n  async function runBodyPixInference() {\n    const segmentation = await bodyPix.segmentPerson(segmentationMaskCanvas)\n    for (let i = 0; i < segmentationPixelCount; i++) {\n      // Sets only the alpha component of each pixel\n      segmentationMask.data[i * 4 + 3] = segmentation.data[i] ? 255 : 0\n    }\n    segmentationMaskCtx.putImageData(segmentationMask, 0, 0)\n  }\n\n  function runTFLiteInference() {\n    tflite._runInference()\n\n    for (let i = 0; i < segmentationPixelCount; i++) {\n      const background = tflite.HEAPF32[outputMemoryOffset + i * 2]\n      const person = tflite.HEAPF32[outputMemoryOffset + i * 2 + 1]\n      const shift = Math.max(background, person)\n      const backgroundExp = Math.exp(background - shift)\n      const personExp = Math.exp(person - shift)\n\n      // Sets only the alpha component of each pixel\n      segmentationMask.data[i * 4 + 3] =\n        (255 * personExp) / (backgroundExp + personExp) // softmax\n    }\n    segmentationMaskCtx.putImageData(segmentationMask, 0, 0)\n  }\n\n  function runPostProcessing() {\n    ctx.globalCompositeOperation = 'copy'\n    ctx.filter = 'none'\n\n    if (postProcessingConfig?.smoothSegmentationMask) {\n      if (backgroundConfig.type === 'blur') {\n        ctx.filter = 'blur(8px)' // FIXME Does not work on Safari\n      } else if (backgroundConfig.type === 'image') {\n        ctx.filter = 'blur(4px)' // FIXME Does not work on Safari\n      }\n    }\n\n    if (backgroundConfig.type !== 'none') {\n      drawSegmentationMask()\n      ctx.globalCompositeOperation = 'source-in'\n      ctx.filter = 'none'\n    }\n\n    ctx.drawImage(sourcePlayback.htmlElement, 0, 0)\n\n    if (backgroundConfig.type === 'blur') {\n      blurBackground()\n    }\n  }\n\n  function drawSegmentationMask() {\n    ctx.drawImage(\n      segmentationMaskCanvas,\n      0,\n      0,\n      segmentationWidth,\n      segmentationHeight,\n      0,\n      0,\n      sourcePlayback.width,\n      sourcePlayback.height\n    )\n  }\n\n  function blurBackground() {\n    ctx.globalCompositeOperation = 'destination-over'\n    ctx.filter = 'blur(8px)' // FIXME Does not work on Safari\n    ctx.drawImage(sourcePlayback.htmlElement, 0, 0)\n  }\n\n  return { render, updatePostProcessingConfig, cleanUp }\n}\n","/**\n * Use it along with boyswan.glsl-literal VSCode extension\n * to get GLSL syntax highlighting.\n * https://marketplace.visualstudio.com/items?itemName=boyswan.glsl-literal\n *\n * On VSCode OSS, boyswan.glsl-literal requires slevesque.shader extension\n * to be installed as well.\n * https://marketplace.visualstudio.com/items?itemName=slevesque.shader\n */\nexport const glsl = String.raw\n\nexport function createPiplelineStageProgram(\n  gl: WebGL2RenderingContext,\n  vertexShader: WebGLShader,\n  fragmentShader: WebGLShader,\n  positionBuffer: WebGLBuffer,\n  texCoordBuffer: WebGLBuffer\n) {\n  const program = createProgram(gl, vertexShader, fragmentShader)\n\n  const positionAttributeLocation = gl.getAttribLocation(program, 'a_position')\n  gl.enableVertexAttribArray(positionAttributeLocation)\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer)\n  gl.vertexAttribPointer(positionAttributeLocation, 2, gl.FLOAT, false, 0, 0)\n\n  const texCoordAttributeLocation = gl.getAttribLocation(program, 'a_texCoord')\n  gl.enableVertexAttribArray(texCoordAttributeLocation)\n  gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer)\n  gl.vertexAttribPointer(texCoordAttributeLocation, 2, gl.FLOAT, false, 0, 0)\n\n  return program\n}\n\nexport function createProgram(\n  gl: WebGL2RenderingContext,\n  vertexShader: WebGLShader,\n  fragmentShader: WebGLShader\n) {\n  const program = gl.createProgram()!\n  gl.attachShader(program, vertexShader)\n  gl.attachShader(program, fragmentShader)\n  gl.linkProgram(program)\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    throw new Error(\n      `Could not link WebGL program: ${gl.getProgramInfoLog(program)}`\n    )\n  }\n  return program\n}\n\nexport function compileShader(\n  gl: WebGL2RenderingContext,\n  shaderType: number,\n  shaderSource: string\n) {\n  const shader = gl.createShader(shaderType)!\n  gl.shaderSource(shader, shaderSource)\n  gl.compileShader(shader)\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    throw new Error(`Could not compile shader: ${gl.getShaderInfoLog(shader)}`)\n  }\n  return shader\n}\n\nexport function createTexture(\n  gl: WebGL2RenderingContext,\n  internalformat: number,\n  width: number,\n  height: number,\n  minFilter = gl.NEAREST,\n  magFilter = gl.NEAREST\n) {\n  const texture = gl.createTexture()\n  gl.bindTexture(gl.TEXTURE_2D, texture)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, minFilter)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, magFilter)\n  gl.texStorage2D(gl.TEXTURE_2D, 1, internalformat, width, height)\n  return texture\n}\n","import { PostProcessingConfig } from '../../core/helpers/postProcessingHelper'\nimport {\n  inputResolutions,\n  SegmentationConfig,\n} from '../../core/helpers/segmentationHelper'\nimport { SourcePlayback } from '../../core/helpers/sourceHelper'\nimport { TFLite } from '../../core/hooks/useTFLite'\nimport { compileShader, createTexture, glsl } from '../helpers/webglHelper'\nimport { buildBackgroundStage } from './backgroundStage'\nimport { buildJointBilateralFilterStage } from './jointBilateralFilterStage'\nimport { buildResizingStage } from './resizingStage'\nimport { buildSoftmaxStage } from './softmaxStage'\n\nexport function buildWebGL2Pipeline(\n  sourcePlayback: SourcePlayback,\n  backgroundImage: HTMLImageElement | null,\n  segmentationConfig: SegmentationConfig,\n  canvas: HTMLCanvasElement,\n  tflite: TFLite,\n  addFrameEvent: () => void\n) {\n  const vertexShaderSource = glsl`#version 300 es\n\n    in vec2 a_position;\n    in vec2 a_texCoord;\n\n    out vec2 v_texCoord;\n\n    void main() {\n      gl_Position = vec4(a_position, 0.0, 1.0);\n      v_texCoord = a_texCoord;\n    }\n  `\n\n  const { width: frameWidth, height: frameHeight } = sourcePlayback\n  const [segmentationWidth, segmentationHeight] = inputResolutions[\n    segmentationConfig.inputResolution\n  ]\n\n  const gl = canvas.getContext('webgl2')!\n\n  // TODO Check if the extension is available otherwise convert to floats on CPU\n  gl.getExtension('EXT_color_buffer_float')\n\n  const vertexShader = compileShader(gl, gl.VERTEX_SHADER, vertexShaderSource)\n\n  const vertexArray = gl.createVertexArray()\n  gl.bindVertexArray(vertexArray)\n\n  const positionBuffer = gl.createBuffer()!\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer)\n  gl.bufferData(\n    gl.ARRAY_BUFFER,\n    new Float32Array([-1.0, -1.0, 1.0, -1.0, -1.0, 1.0, 1.0, 1.0]),\n    gl.STATIC_DRAW\n  )\n\n  const texCoordBuffer = gl.createBuffer()!\n  gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer)\n  gl.bufferData(\n    gl.ARRAY_BUFFER,\n    new Float32Array([0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0]),\n    gl.STATIC_DRAW\n  )\n\n  const inputFrameTexture = createTexture(gl, gl.RGBA8, frameWidth, frameHeight)\n  // TODO Rename segmentation and person mask to be more specific\n  const segmentationTexture = createTexture(\n    gl,\n    gl.RGBA8,\n    segmentationWidth,\n    segmentationHeight\n  )!\n  const personMaskTexture = createTexture(\n    gl,\n    gl.RGBA8,\n    frameWidth,\n    frameHeight\n  )!\n\n  const resizingStage = buildResizingStage(\n    gl,\n    vertexShader,\n    positionBuffer,\n    texCoordBuffer,\n    segmentationConfig,\n    tflite\n  )\n  const softmaxStage = buildSoftmaxStage(\n    gl,\n    vertexShader,\n    positionBuffer,\n    texCoordBuffer,\n    segmentationConfig,\n    tflite,\n    segmentationTexture\n  )\n  const jointBilateralFilterStage = buildJointBilateralFilterStage(\n    gl,\n    vertexShader,\n    positionBuffer,\n    texCoordBuffer,\n    segmentationTexture,\n    segmentationConfig,\n    personMaskTexture,\n    canvas\n  )\n  const backgroundStage = buildBackgroundStage(\n    gl,\n    positionBuffer,\n    texCoordBuffer,\n    personMaskTexture,\n    backgroundImage,\n    canvas\n  )\n\n  async function render() {\n    gl.clearColor(0, 0, 0, 0)\n    gl.clear(gl.COLOR_BUFFER_BIT)\n\n    gl.activeTexture(gl.TEXTURE0)\n    gl.bindTexture(gl.TEXTURE_2D, inputFrameTexture)\n    gl.texSubImage2D(\n      gl.TEXTURE_2D,\n      0,\n      0,\n      0,\n      frameWidth,\n      frameHeight,\n      gl.RGBA,\n      gl.UNSIGNED_BYTE,\n      sourcePlayback.htmlElement\n    )\n\n    gl.bindVertexArray(vertexArray)\n\n    resizingStage.render()\n\n    addFrameEvent()\n\n    tflite._runInference()\n\n    addFrameEvent()\n\n    softmaxStage.render()\n    jointBilateralFilterStage.render()\n    backgroundStage.render()\n  }\n\n  function updatePostProcessingConfig(\n    newPostProcessingConfig: PostProcessingConfig\n  ) {\n    jointBilateralFilterStage.updateSigmaSpace(\n      newPostProcessingConfig.jointBilateralFilter.sigmaSpace\n    )\n    jointBilateralFilterStage.updateSigmaColor(\n      newPostProcessingConfig.jointBilateralFilter.sigmaColor\n    )\n  }\n\n  function cleanUp() {\n    backgroundStage.cleanUp()\n    jointBilateralFilterStage.cleanUp()\n    softmaxStage.cleanUp()\n    resizingStage.cleanUp()\n\n    gl.deleteTexture(personMaskTexture)\n    gl.deleteTexture(segmentationTexture)\n    gl.deleteTexture(inputFrameTexture)\n    gl.deleteBuffer(texCoordBuffer)\n    gl.deleteBuffer(positionBuffer)\n    gl.deleteVertexArray(vertexArray)\n    gl.deleteShader(vertexShader)\n  }\n\n  return { render, updatePostProcessingConfig, cleanUp }\n}\n","import {\n  inputResolutions,\n  SegmentationConfig,\n} from '../../core/helpers/segmentationHelper'\nimport { TFLite } from '../../core/hooks/useTFLite'\nimport {\n  compileShader,\n  createPiplelineStageProgram,\n  createTexture,\n  glsl,\n} from '../helpers/webglHelper'\n\nexport function buildResizingStage(\n  gl: WebGL2RenderingContext,\n  vertexShader: WebGLShader,\n  positionBuffer: WebGLBuffer,\n  texCoordBuffer: WebGLBuffer,\n  segmentationConfig: SegmentationConfig,\n  tflite: TFLite\n) {\n  const fragmentShaderSource = glsl`#version 300 es\n\n    precision highp float;\n\n    uniform sampler2D u_inputFrame;\n\n    in vec2 v_texCoord;\n\n    out vec4 outColor;\n\n    void main() {\n      outColor = texture(u_inputFrame, v_texCoord);\n    }\n  `\n\n  // TFLite memory will be accessed as float32\n  const tfliteInputMemoryOffset = tflite._getInputMemoryOffset() / 4\n\n  const [outputWidth, outputHeight] = inputResolutions[\n    segmentationConfig.inputResolution\n  ]\n  const outputPixelCount = outputWidth * outputHeight\n\n  const fragmentShader = compileShader(\n    gl,\n    gl.FRAGMENT_SHADER,\n    fragmentShaderSource\n  )\n  const program = createPiplelineStageProgram(\n    gl,\n    vertexShader,\n    fragmentShader,\n    positionBuffer,\n    texCoordBuffer\n  )\n  const inputFrameLocation = gl.getUniformLocation(program, 'u_inputFrame')\n  const outputTexture = createTexture(gl, gl.RGBA32F, outputWidth, outputHeight)\n\n  const frameBuffer = gl.createFramebuffer()\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer)\n  gl.framebufferTexture2D(\n    gl.FRAMEBUFFER,\n    gl.COLOR_ATTACHMENT0,\n    gl.TEXTURE_2D,\n    outputTexture,\n    0\n  )\n  const outputPixels = new Float32Array(outputPixelCount * 4)\n\n  gl.useProgram(program)\n  gl.uniform1i(inputFrameLocation, 0)\n\n  function render() {\n    gl.useProgram(program)\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer)\n    gl.viewport(0, 0, outputWidth, outputHeight)\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4)\n\n    gl.readPixels(\n      0,\n      0,\n      outputWidth,\n      outputHeight,\n      gl.RGBA,\n      gl.FLOAT,\n      outputPixels\n    )\n    for (let i = 0; i < outputPixelCount; i++) {\n      const tfliteIndex = tfliteInputMemoryOffset + i * 3\n      const outputIndex = i * 4\n      tflite.HEAPF32[tfliteIndex] = outputPixels[outputIndex]\n      tflite.HEAPF32[tfliteIndex + 1] = outputPixels[outputIndex + 1]\n      tflite.HEAPF32[tfliteIndex + 2] = outputPixels[outputIndex + 2]\n    }\n  }\n\n  function cleanUp() {\n    gl.deleteFramebuffer(frameBuffer)\n    gl.deleteTexture(outputTexture)\n    gl.deleteProgram(program)\n    gl.deleteShader(fragmentShader)\n  }\n\n  return { render, cleanUp }\n}\n","import {\n  inputResolutions,\n  SegmentationConfig,\n} from '../../core/helpers/segmentationHelper'\nimport { TFLite } from '../../core/hooks/useTFLite'\nimport {\n  compileShader,\n  createPiplelineStageProgram,\n  createTexture,\n  glsl,\n} from '../helpers/webglHelper'\n\nexport function buildSoftmaxStage(\n  gl: WebGL2RenderingContext,\n  vertexShader: WebGLShader,\n  positionBuffer: WebGLBuffer,\n  texCoordBuffer: WebGLBuffer,\n  segmentationConfig: SegmentationConfig,\n  tflite: TFLite,\n  outputTexture: WebGLTexture\n) {\n  const fragmentShaderSource = glsl`#version 300 es\n\n    precision highp float;\n\n    uniform sampler2D u_inputSegmentation;\n\n    in vec2 v_texCoord;\n\n    out vec4 outColor;\n\n    void main() {\n      vec2 segmentation = texture(u_inputSegmentation, v_texCoord).rg;\n      float shift = max(segmentation.r, segmentation.g);\n      float backgroundExp = exp(segmentation.r - shift);\n      float personExp = exp(segmentation.g - shift);\n      outColor = vec4(vec3(0.0), personExp / (backgroundExp + personExp));\n    }\n  `\n\n  // TFLite memory will be accessed as float32\n  const tfliteOutputMemoryOffset = tflite._getOutputMemoryOffset() / 4\n\n  const [segmentationWidth, segmentationHeight] = inputResolutions[\n    segmentationConfig.inputResolution\n  ]\n\n  const fragmentShader = compileShader(\n    gl,\n    gl.FRAGMENT_SHADER,\n    fragmentShaderSource\n  )\n  const program = createPiplelineStageProgram(\n    gl,\n    vertexShader,\n    fragmentShader,\n    positionBuffer,\n    texCoordBuffer\n  )\n  const inputLocation = gl.getUniformLocation(program, 'u_inputSegmentation')\n  const inputTexture = createTexture(\n    gl,\n    gl.RG32F,\n    segmentationWidth,\n    segmentationHeight\n  )\n\n  const frameBuffer = gl.createFramebuffer()\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer)\n  gl.framebufferTexture2D(\n    gl.FRAMEBUFFER,\n    gl.COLOR_ATTACHMENT0,\n    gl.TEXTURE_2D,\n    outputTexture,\n    0\n  )\n\n  gl.useProgram(program)\n  gl.uniform1i(inputLocation, 1)\n\n  function render() {\n    gl.useProgram(program)\n    gl.activeTexture(gl.TEXTURE1)\n    gl.bindTexture(gl.TEXTURE_2D, inputTexture)\n    gl.texSubImage2D(\n      gl.TEXTURE_2D,\n      0,\n      0,\n      0,\n      segmentationWidth,\n      segmentationHeight,\n      gl.RG,\n      gl.FLOAT,\n      tflite.HEAPF32,\n      tfliteOutputMemoryOffset\n    )\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer)\n    gl.viewport(0, 0, segmentationWidth, segmentationHeight)\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4)\n  }\n\n  function cleanUp() {\n    gl.deleteFramebuffer(frameBuffer)\n    gl.deleteTexture(inputTexture)\n    gl.deleteProgram(program)\n    gl.deleteShader(fragmentShader)\n  }\n\n  return { render, cleanUp }\n}\n","import {\n  inputResolutions,\n  SegmentationConfig,\n} from '../../core/helpers/segmentationHelper'\nimport {\n  compileShader,\n  createPiplelineStageProgram,\n  glsl,\n} from '../helpers/webglHelper'\n\nexport function buildJointBilateralFilterStage(\n  gl: WebGL2RenderingContext,\n  vertexShader: WebGLShader,\n  positionBuffer: WebGLBuffer,\n  texCoordBuffer: WebGLBuffer,\n  inputTexture: WebGLTexture,\n  segmentationConfig: SegmentationConfig,\n  outputTexture: WebGLTexture,\n  canvas: HTMLCanvasElement\n) {\n  const fragmentShaderSource = glsl`#version 300 es\n\n    precision highp float;\n\n    uniform sampler2D u_inputFrame;\n    uniform sampler2D u_segmentationMask;\n    uniform vec2 u_texelSize;\n    uniform float u_step;\n    uniform float u_radius;\n    uniform float u_offset;\n    uniform float u_sigmaTexel;\n    uniform float u_sigmaColor;\n\n    in vec2 v_texCoord;\n\n    out vec4 outColor;\n\n    float gaussian(float x, float sigma) {\n      float coeff = -0.5 / (sigma * sigma * 4.0 + 1.0e-6);\n      return exp((x * x) * coeff);\n    }\n\n    void main() {\n      vec2 centerCoord = v_texCoord;\n      vec3 centerColor = texture(u_inputFrame, centerCoord).rgb;\n      float newVal = 0.0;\n\n      float spaceWeight = 0.0;\n      float colorWeight = 0.0;\n      float totalWeight = 0.0;\n\n      // Subsample kernel space.\n      for (float i = -u_radius + u_offset; i <= u_radius; i += u_step) {\n        for (float j = -u_radius + u_offset; j <= u_radius; j += u_step) {\n          vec2 shift = vec2(j, i) * u_texelSize;\n          vec2 coord = vec2(centerCoord + shift);\n          vec3 frameColor = texture(u_inputFrame, coord).rgb;\n          float outVal = texture(u_segmentationMask, coord).a;\n\n          spaceWeight = gaussian(distance(centerCoord, coord), u_sigmaTexel);\n          colorWeight = gaussian(distance(centerColor, frameColor), u_sigmaColor);\n          totalWeight += spaceWeight * colorWeight;\n\n          newVal += spaceWeight * colorWeight * outVal;\n        }\n      }\n      newVal /= totalWeight;\n\n      outColor = vec4(vec3(0.0), newVal);\n    }\n  `\n\n  const [segmentationWidth, segmentationHeight] = inputResolutions[\n    segmentationConfig.inputResolution\n  ]\n  const { width: outputWidth, height: outputHeight } = canvas\n  const texelWidth = 1 / outputWidth\n  const texelHeight = 1 / outputHeight\n\n  const fragmentShader = compileShader(\n    gl,\n    gl.FRAGMENT_SHADER,\n    fragmentShaderSource\n  )\n  const program = createPiplelineStageProgram(\n    gl,\n    vertexShader,\n    fragmentShader,\n    positionBuffer,\n    texCoordBuffer\n  )\n  const inputFrameLocation = gl.getUniformLocation(program, 'u_inputFrame')\n  const segmentationMaskLocation = gl.getUniformLocation(\n    program,\n    'u_segmentationMask'\n  )\n  const texelSizeLocation = gl.getUniformLocation(program, 'u_texelSize')\n  const stepLocation = gl.getUniformLocation(program, 'u_step')\n  const radiusLocation = gl.getUniformLocation(program, 'u_radius')\n  const offsetLocation = gl.getUniformLocation(program, 'u_offset')\n  const sigmaTexelLocation = gl.getUniformLocation(program, 'u_sigmaTexel')\n  const sigmaColorLocation = gl.getUniformLocation(program, 'u_sigmaColor')\n\n  const frameBuffer = gl.createFramebuffer()\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer)\n  gl.framebufferTexture2D(\n    gl.FRAMEBUFFER,\n    gl.COLOR_ATTACHMENT0,\n    gl.TEXTURE_2D,\n    outputTexture,\n    0\n  )\n\n  gl.useProgram(program)\n  gl.uniform1i(inputFrameLocation, 0)\n  gl.uniform1i(segmentationMaskLocation, 1)\n  gl.uniform2f(texelSizeLocation, texelWidth, texelHeight)\n\n  // Ensures default values are configured to prevent infinite\n  // loop in fragment shader\n  updateSigmaSpace(0)\n  updateSigmaColor(0)\n\n  function render() {\n    gl.useProgram(program)\n    gl.activeTexture(gl.TEXTURE1)\n    gl.bindTexture(gl.TEXTURE_2D, inputTexture)\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer)\n    gl.viewport(0, 0, outputWidth, outputHeight)\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4)\n  }\n\n  function updateSigmaSpace(sigmaSpace: number) {\n    sigmaSpace *= Math.max(\n      outputWidth / segmentationWidth,\n      outputHeight / segmentationHeight\n    )\n\n    const kSparsityFactor = 0.66 // Higher is more sparse.\n    const sparsity = Math.max(1, Math.sqrt(sigmaSpace) * kSparsityFactor)\n    const step = sparsity\n    const radius = sigmaSpace\n    const offset = step > 1 ? step * 0.5 : 0\n    const sigmaTexel = Math.max(texelWidth, texelHeight) * sigmaSpace\n\n    gl.useProgram(program)\n    gl.uniform1f(stepLocation, step)\n    gl.uniform1f(radiusLocation, radius)\n    gl.uniform1f(offsetLocation, offset)\n    gl.uniform1f(sigmaTexelLocation, sigmaTexel)\n  }\n\n  function updateSigmaColor(sigmaColor: number) {\n    gl.useProgram(program)\n    gl.uniform1f(sigmaColorLocation, sigmaColor)\n  }\n\n  function cleanUp() {\n    gl.deleteFramebuffer(frameBuffer)\n    gl.deleteProgram(program)\n    gl.deleteShader(fragmentShader)\n  }\n\n  return { render, updateSigmaSpace, updateSigmaColor, cleanUp }\n}\n","import {\n  compileShader,\n  createPiplelineStageProgram,\n  createTexture,\n  glsl,\n} from '../helpers/webglHelper'\n\nexport function buildBackgroundStage(\n  gl: WebGL2RenderingContext,\n  positionBuffer: WebGLBuffer,\n  texCoordBuffer: WebGLBuffer,\n  personMaskTexture: WebGLTexture,\n  backgroundImage: HTMLImageElement | null,\n  canvas: HTMLCanvasElement\n) {\n  const vertexShaderSource = glsl`#version 300 es\n\n    uniform vec2 u_backgroundScale;\n    uniform vec2 u_backgroundOffset;\n\n    in vec2 a_position;\n    in vec2 a_texCoord;\n\n    out vec2 v_texCoord;\n    out vec2 v_backgroundCoord;\n\n    void main() {\n      // Flipping Y is required when rendering to canvas\n      gl_Position = vec4(a_position * vec2(1.0, -1.0), 0.0, 1.0);\n      v_texCoord = a_texCoord;\n      v_backgroundCoord = a_texCoord * u_backgroundScale + u_backgroundOffset;\n    }\n  `\n\n  const fragmentShaderSource = glsl`#version 300 es\n\n    precision highp float;\n\n    uniform sampler2D u_inputFrame;\n    uniform sampler2D u_personMask;\n    uniform sampler2D u_background;\n\n    in vec2 v_texCoord;\n    in vec2 v_backgroundCoord;\n\n    out vec4 outColor;\n\n    vec3 screen(vec3 a, vec3 b) {\n      return 1.0 - (1.0 - a) * (1.0 - b);\n    }\n\n    vec3 linearDodge(vec3 a, vec3 b) {\n      return a + b;\n    }\n\n    void main() {\n      vec3 frameColor = texture(u_inputFrame, v_texCoord).rgb;\n      vec3 backgroundColor = texture(u_background, v_backgroundCoord).rgb;\n      float personMask = texture(u_personMask, v_texCoord).a;\n      float edge = smoothstep(1.0, 0.5, personMask);\n      personMask = smoothstep(0.5, 1.0, personMask);\n      vec3 lightWrap = backgroundColor * edge * 0.4;\n      // TODO Switch between screen and linearDodge based on user configuration\n      vec3 person = screen(frameColor, lightWrap);\n      outColor = vec4(person * personMask + backgroundColor * (1.0 - personMask), 1.0);\n    }\n  `\n\n  const { width: outputWidth, height: outputHeight } = canvas\n  const outputRatio = outputWidth / outputHeight\n\n  const vertexShader = compileShader(gl, gl.VERTEX_SHADER, vertexShaderSource)\n  const fragmentShader = compileShader(\n    gl,\n    gl.FRAGMENT_SHADER,\n    fragmentShaderSource\n  )\n  const program = createPiplelineStageProgram(\n    gl,\n    vertexShader,\n    fragmentShader,\n    positionBuffer,\n    texCoordBuffer\n  )\n  const backgroundScaleLocation = gl.getUniformLocation(\n    program,\n    'u_backgroundScale'\n  )\n  const backgroundOffsetLocation = gl.getUniformLocation(\n    program,\n    'u_backgroundOffset'\n  )\n  const inputFrameLocation = gl.getUniformLocation(program, 'u_inputFrame')\n  const personMaskLocation = gl.getUniformLocation(program, 'u_personMask')\n  const backgroundLocation = gl.getUniformLocation(program, 'u_background')\n\n  gl.useProgram(program)\n  gl.uniform2f(backgroundScaleLocation, 1, 1)\n  gl.uniform2f(backgroundOffsetLocation, 0, 0)\n  gl.uniform1i(inputFrameLocation, 0)\n  gl.uniform1i(personMaskLocation, 1)\n\n  let backgroundTexture: WebGLTexture | null = null\n  // TODO Find a better to handle background being loaded\n  if (backgroundImage?.complete) {\n    updateBackgroundImage(backgroundImage)\n  } else if (backgroundImage) {\n    backgroundImage.onload = () => {\n      updateBackgroundImage(backgroundImage)\n    }\n  }\n\n  function render() {\n    gl.useProgram(program)\n    gl.activeTexture(gl.TEXTURE1)\n    gl.bindTexture(gl.TEXTURE_2D, personMaskTexture)\n    if (backgroundTexture !== null) {\n      gl.activeTexture(gl.TEXTURE2)\n      gl.bindTexture(gl.TEXTURE_2D, backgroundTexture)\n      // TODO Handle correctly the background not loaded yet\n      gl.uniform1i(backgroundLocation, 2)\n    }\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null)\n    gl.viewport(0, 0, outputWidth, outputHeight)\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4)\n  }\n\n  function updateBackgroundImage(backgroundImage: HTMLImageElement) {\n    backgroundTexture = createTexture(\n      gl,\n      gl.RGBA8,\n      backgroundImage.naturalWidth,\n      backgroundImage.naturalHeight,\n      gl.LINEAR,\n      gl.LINEAR\n    )\n    gl.texSubImage2D(\n      gl.TEXTURE_2D,\n      0,\n      0,\n      0,\n      backgroundImage.naturalWidth,\n      backgroundImage.naturalHeight,\n      gl.RGBA,\n      gl.UNSIGNED_BYTE,\n      backgroundImage\n    )\n\n    let xOffset = 0\n    let yOffset = 0\n    let backgroundWidth = backgroundImage.naturalWidth\n    let backgroundHeight = backgroundImage.naturalHeight\n    const backgroundRatio = backgroundWidth / backgroundHeight\n    if (backgroundRatio < outputRatio) {\n      backgroundHeight = backgroundWidth / outputRatio\n      yOffset = (backgroundImage.naturalHeight - backgroundHeight) / 2\n    } else {\n      backgroundWidth = backgroundHeight * outputRatio\n      xOffset = (backgroundImage.naturalWidth - backgroundWidth) / 2\n    }\n\n    const xScale = backgroundWidth / backgroundImage.naturalWidth\n    const yScale = backgroundHeight / backgroundImage.naturalHeight\n    xOffset /= backgroundImage.naturalWidth\n    yOffset /= backgroundImage.naturalHeight\n\n    gl.uniform2f(backgroundScaleLocation, xScale, yScale)\n    gl.uniform2f(backgroundOffsetLocation, xOffset, yOffset)\n  }\n\n  function cleanUp() {\n    gl.deleteTexture(backgroundTexture)\n    gl.deleteProgram(program)\n    gl.deleteShader(fragmentShader)\n    gl.deleteShader(vertexShader)\n  }\n\n  return { render, cleanUp }\n}\n","import { useCallback, useRef, useState } from 'react'\n\nfunction useStats() {\n  const [fps, setFps] = useState(0)\n  const [durations, setDurations] = useState<number[]>([])\n  const previousTimeRef = useRef(0)\n  const beginTimeRef = useRef(0)\n  const durationsRef = useRef<number[]>([])\n  const eventCount = useRef(0)\n  const frameCountRef = useRef(0)\n\n  // The useCallbacks below are required to prevent infinite loop\n  // when the functions are called inside useEffect\n\n  const beginFrame = useCallback(() => {\n    beginTimeRef.current = Date.now()\n  }, [])\n\n  const addFrameEvent = useCallback(() => {\n    const time = Date.now()\n    durationsRef.current[eventCount.current] = time - beginTimeRef.current\n    beginTimeRef.current = time\n    eventCount.current++\n  }, [])\n\n  const endFrame = useCallback(() => {\n    const time = Date.now()\n    durationsRef.current[eventCount.current] = time - beginTimeRef.current\n    frameCountRef.current++\n    if (time >= previousTimeRef.current + 1000) {\n      setFps((frameCountRef.current * 1000) / (time - previousTimeRef.current))\n      setDurations(durationsRef.current)\n      previousTimeRef.current = time\n      frameCountRef.current = 0\n    }\n    eventCount.current = 0\n  }, [])\n\n  return { fps, durations, beginFrame, addFrameEvent, endFrame }\n}\n\nexport default useStats\n","import { BodyPix } from '@tensorflow-models/body-pix'\nimport { useEffect, useRef, useState } from 'react'\nimport { buildCanvas2dPipeline } from '../../pipelines/canvas2d/canvas2dPipeline'\nimport { buildWebGL2Pipeline } from '../../pipelines/webgl2/webgl2Pipeline'\nimport { BackgroundConfig } from '../helpers/backgroundHelper'\nimport { RenderingPipeline } from '../helpers/renderingPipelineHelper'\nimport { SegmentationConfig } from '../helpers/segmentationHelper'\nimport { SourcePlayback } from '../helpers/sourceHelper'\nimport useStats from './useStats'\nimport { TFLite } from './useTFLite'\n\nfunction useRenderingPipeline(\n  sourcePlayback: SourcePlayback,\n  backgroundConfig: BackgroundConfig,\n  segmentationConfig: SegmentationConfig,\n  bodyPix: BodyPix,\n  tflite: TFLite\n) {\n  const [pipeline, setPipeline] = useState<RenderingPipeline | null>(null)\n  const backgroundImageRef = useRef<HTMLImageElement>(null)\n  const canvasRef = useRef<HTMLCanvasElement>(null!)\n  const { fps, durations, beginFrame, addFrameEvent, endFrame } = useStats()\n\n  useEffect(() => {\n    // The useEffect cleanup function is not enough to stop\n    // the rendering loop when the framerate is low\n    let shouldRender = true\n\n    let renderRequestId: number\n\n    const newPipeline =\n      segmentationConfig.pipeline === 'webgl2'\n        ? buildWebGL2Pipeline(\n            sourcePlayback,\n            backgroundImageRef.current,\n            segmentationConfig,\n            canvasRef.current,\n            tflite,\n            addFrameEvent\n          )\n        : buildCanvas2dPipeline(\n            sourcePlayback,\n            backgroundConfig,\n            segmentationConfig,\n            canvasRef.current,\n            bodyPix,\n            tflite,\n            addFrameEvent\n          )\n\n    async function render() {\n      if (!shouldRender) {\n        return\n      }\n      beginFrame()\n      await newPipeline.render()\n      endFrame()\n      renderRequestId = requestAnimationFrame(render)\n    }\n\n    render()\n    console.log(\n      'Animation started:',\n      sourcePlayback,\n      backgroundConfig,\n      segmentationConfig\n    )\n\n    setPipeline(newPipeline)\n\n    return () => {\n      shouldRender = false\n      cancelAnimationFrame(renderRequestId)\n      newPipeline.cleanUp()\n      console.log(\n        'Animation stopped:',\n        sourcePlayback,\n        backgroundConfig,\n        segmentationConfig\n      )\n\n      setPipeline(null)\n    }\n  }, [\n    sourcePlayback,\n    backgroundConfig,\n    segmentationConfig,\n    bodyPix,\n    tflite,\n    setPipeline,\n    beginFrame,\n    addFrameEvent,\n    endFrame,\n  ])\n\n  return {\n    pipeline,\n    backgroundImageRef,\n    canvasRef,\n    fps,\n    durations,\n  }\n}\n\nexport default useRenderingPipeline\n","import { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport Typography from '@material-ui/core/Typography'\nimport { BodyPix } from '@tensorflow-models/body-pix'\nimport React, { useEffect } from 'react'\nimport { BackgroundConfig } from '../helpers/backgroundHelper'\nimport { PostProcessingConfig } from '../helpers/postProcessingHelper'\nimport { SegmentationConfig } from '../helpers/segmentationHelper'\nimport { SourcePlayback } from '../helpers/sourceHelper'\nimport useRenderingPipeline from '../hooks/useRenderingPipeline'\nimport { TFLite } from '../hooks/useTFLite'\n\ntype OutputViewerProps = {\n  sourcePlayback: SourcePlayback\n  backgroundConfig: BackgroundConfig\n  segmentationConfig: SegmentationConfig\n  postProcessingConfig: PostProcessingConfig\n  bodyPix: BodyPix\n  tflite: TFLite\n}\n\nfunction OutputViewer(props: OutputViewerProps) {\n  const classes = useStyles()\n  const {\n    pipeline,\n    backgroundImageRef,\n    canvasRef,\n    fps,\n    durations: [resizingDuration, inferenceDuration, postProcessingDuration],\n  } = useRenderingPipeline(\n    props.sourcePlayback,\n    props.backgroundConfig,\n    props.segmentationConfig,\n    props.bodyPix,\n    props.tflite\n  )\n\n  useEffect(() => {\n    if (pipeline) {\n      pipeline.updatePostProcessingConfig(props.postProcessingConfig)\n    }\n  }, [pipeline, props.postProcessingConfig])\n\n  const statDetails = [\n    `resizing ${resizingDuration}ms`,\n    `inference ${inferenceDuration}ms`,\n    `post-processing ${postProcessingDuration}ms`,\n  ]\n  const stats = `${Math.round(fps)} fps (${statDetails.join(', ')})`\n\n  return (\n    <div className={classes.root}>\n      {props.backgroundConfig.type === 'image' && (\n        <img\n          ref={backgroundImageRef}\n          className={classes.render}\n          src={props.backgroundConfig.url}\n          alt=\"\"\n          hidden={props.segmentationConfig.pipeline === 'webgl2'}\n        />\n      )}\n      <canvas\n        // The key attribute is required to create a new canvas when switching\n        // context mode\n        key={props.segmentationConfig.pipeline}\n        ref={canvasRef}\n        className={classes.render}\n        width={props.sourcePlayback.width}\n        height={props.sourcePlayback.height}\n      />\n      <Typography className={classes.stats} variant=\"caption\">\n        {stats}\n      </Typography>\n    </div>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flex: 1,\n      position: 'relative',\n    },\n    render: {\n      position: 'absolute',\n      width: '100%',\n      height: '100%',\n      objectFit: 'cover',\n    },\n    stats: {\n      position: 'absolute',\n      top: 0,\n      right: 0,\n      left: 0,\n      textAlign: 'center',\n      backgroundColor: 'rgba(0, 0, 0, 0.48)',\n      color: theme.palette.common.white,\n    },\n  })\n)\n\nexport default OutputViewer\n","import CircularProgress from '@material-ui/core/CircularProgress'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport VideocamOffIcon from '@material-ui/icons/VideocamOff'\nimport React, { SyntheticEvent, useEffect, useRef, useState } from 'react'\nimport { SourceConfig, SourcePlayback } from '../helpers/sourceHelper'\n\ntype SourceViewerProps = {\n  sourceConfig: SourceConfig\n  onLoad: (sourcePlayback: SourcePlayback) => void\n}\n\nfunction SourceViewer(props: SourceViewerProps) {\n  const classes = useStyles()\n  const [sourceUrl, setSourceUrl] = useState<string>()\n  const [isLoading, setLoading] = useState(false)\n  const [isCameraError, setCameraError] = useState(false)\n  const videoRef = useRef<HTMLVideoElement>(null)\n\n  useEffect(() => {\n    setSourceUrl(undefined)\n    setLoading(true)\n    setCameraError(false)\n\n    // Enforces reloading the resource, otherwise\n    // onLoad event is not always dispatched and the\n    // progress indicator never disappears\n    setTimeout(() => setSourceUrl(props.sourceConfig.url))\n  }, [props.sourceConfig])\n\n  useEffect(() => {\n    async function getCameraStream() {\n      try {\n        const constraint = { video: true }\n        const stream = await navigator.mediaDevices.getUserMedia(constraint)\n        if (videoRef.current) {\n          videoRef.current.srcObject = stream\n          return\n        }\n      } catch (error) {\n        console.error('Error opening video camera.', error)\n      }\n      setLoading(false)\n      setCameraError(true)\n    }\n\n    if (props.sourceConfig.type === 'camera') {\n      getCameraStream()\n    } else if (videoRef.current) {\n      videoRef.current.srcObject = null\n    }\n  }, [props.sourceConfig])\n\n  function handleImageLoad(event: SyntheticEvent) {\n    const image = event.target as HTMLImageElement\n    props.onLoad({\n      htmlElement: image,\n      width: image.naturalWidth,\n      height: image.naturalHeight,\n    })\n    setLoading(false)\n  }\n\n  function handleVideoLoad(event: SyntheticEvent) {\n    const video = event.target as HTMLVideoElement\n    props.onLoad({\n      htmlElement: video,\n      width: video.videoWidth,\n      height: video.videoHeight,\n    })\n    setLoading(false)\n  }\n\n  return (\n    <div className={classes.root}>\n      {isLoading && <CircularProgress />}\n      {props.sourceConfig.type === 'image' ? (\n        <img\n          className={classes.sourcePlayback}\n          src={sourceUrl}\n          hidden={isLoading}\n          alt=\"\"\n          onLoad={handleImageLoad}\n        />\n      ) : isCameraError ? (\n        <VideocamOffIcon fontSize=\"large\" />\n      ) : (\n        <video\n          ref={videoRef}\n          className={classes.sourcePlayback}\n          src={sourceUrl}\n          hidden={isLoading}\n          autoPlay\n          playsInline\n          controls={false}\n          muted\n          loop\n          onLoadedData={handleVideoLoad}\n        />\n      )}\n    </div>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      position: 'relative',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n\n      [theme.breakpoints.down('xs')]: {\n        width: 0,\n        overflow: 'hidden',\n      },\n\n      [theme.breakpoints.up('sm')]: {\n        flex: 1,\n        borderRightWidth: 1,\n        borderRightStyle: 'solid',\n        borderRightColor: theme.palette.divider,\n      },\n    },\n    sourcePlayback: {\n      position: 'absolute',\n      width: '100%',\n      height: '100%',\n      objectFit: 'cover',\n    },\n  })\n)\n\nexport default SourceViewer\n","import Avatar from '@material-ui/core/Avatar'\nimport Paper from '@material-ui/core/Paper'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport { BodyPix } from '@tensorflow-models/body-pix'\nimport { useEffect, useState } from 'react'\nimport { BackgroundConfig } from '../helpers/backgroundHelper'\nimport { PostProcessingConfig } from '../helpers/postProcessingHelper'\nimport { SegmentationConfig } from '../helpers/segmentationHelper'\nimport { SourceConfig, SourcePlayback } from '../helpers/sourceHelper'\nimport { TFLite } from '../hooks/useTFLite'\nimport OutputViewer from './OutputViewer'\nimport SourceViewer from './SourceViewer'\n\ntype ViewerCardProps = {\n  sourceConfig: SourceConfig\n  backgroundConfig: BackgroundConfig\n  segmentationConfig: SegmentationConfig\n  postProcessingConfig: PostProcessingConfig\n  bodyPix?: BodyPix\n  tflite?: TFLite\n}\n\nfunction ViewerCard(props: ViewerCardProps) {\n  const classes = useStyles()\n  const [sourcePlayback, setSourcePlayback] = useState<SourcePlayback>()\n\n  useEffect(() => {\n    setSourcePlayback(undefined)\n  }, [props.sourceConfig])\n\n  return (\n    <Paper className={classes.root}>\n      <SourceViewer\n        sourceConfig={props.sourceConfig}\n        onLoad={setSourcePlayback}\n      />\n      {sourcePlayback && props.bodyPix && props.tflite ? (\n        <OutputViewer\n          sourcePlayback={sourcePlayback}\n          backgroundConfig={props.backgroundConfig}\n          segmentationConfig={props.segmentationConfig}\n          postProcessingConfig={props.postProcessingConfig}\n          bodyPix={props.bodyPix}\n          tflite={props.tflite}\n        />\n      ) : (\n        <div className={classes.noOutput}>\n          <Avatar className={classes.avatar} />\n        </div>\n      )}\n    </Paper>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) => {\n  const minHeight = [`${theme.spacing(52)}px`, `100vh - ${theme.spacing(2)}px`]\n\n  return createStyles({\n    root: {\n      minHeight: `calc(min(${minHeight.join(', ')}))`,\n      display: 'flex',\n      overflow: 'hidden',\n\n      [theme.breakpoints.up('md')]: {\n        gridColumnStart: 1,\n        gridColumnEnd: 3,\n      },\n\n      [theme.breakpoints.up('lg')]: {\n        gridRowStart: 1,\n        gridRowEnd: 3,\n      },\n    },\n    noOutput: {\n      flex: 1,\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n    },\n    avatar: {\n      width: theme.spacing(20),\n      height: theme.spacing(20),\n    },\n  })\n})\n\nexport default ViewerCard\n","import * as tfBodyPix from '@tensorflow-models/body-pix'\nimport * as tf from '@tensorflow/tfjs'\nimport { useEffect, useState } from 'react'\n\nfunction useBodyPix() {\n  const [bodyPix, setBodyPix] = useState<tfBodyPix.BodyPix>()\n\n  useEffect(() => {\n    async function loadBodyPix() {\n      console.log('Loading TensorFlow.js and BodyPix segmentation model')\n      await tf.ready()\n      setBodyPix(await tfBodyPix.load())\n      console.log('TensorFlow.js and BodyPix loaded')\n    }\n\n    loadBodyPix()\n  }, [])\n\n  return bodyPix\n}\n\nexport default useBodyPix\n","import { useEffect, useState } from 'react'\nimport { SegmentationConfig } from '../helpers/segmentationHelper'\nimport { TFLite } from './useTFLite'\n\nfunction useMeetModel(\n  tflite: TFLite | undefined,\n  segmentationConfig: SegmentationConfig\n) {\n  const [isLoaded, setLoaded] = useState(false)\n\n  useEffect(() => {\n    async function loadMeetModel() {\n      if (!tflite || segmentationConfig.model !== 'meet') {\n        return\n      }\n\n      setLoaded(false)\n\n      const modelFileName =\n        segmentationConfig.inputResolution === '144p'\n          ? 'segm_full_v679'\n          : 'segm_lite_v681'\n      console.log('Loading meet model:', modelFileName)\n\n      const modelResponse = await fetch(\n        `${process.env.PUBLIC_URL}/models/${modelFileName}.tflite`\n      )\n      const model = await modelResponse.arrayBuffer()\n      console.log('Model buffer size:', model.byteLength)\n\n      const modelBufferOffset = tflite._getModelBufferMemoryOffset()\n      console.log('Model buffer memory offset:', modelBufferOffset)\n      console.log('Loading model buffer...')\n      tflite.HEAPU8.set(new Uint8Array(model), modelBufferOffset)\n      console.log('_loadModel result:', tflite._loadModel(model.byteLength))\n\n      console.log('Input memory offset:', tflite._getInputMemoryOffset())\n      console.log('Input height:', tflite._getInputHeight())\n      console.log('Input width:', tflite._getInputWidth())\n      console.log('Input channels:', tflite._getInputChannelCount())\n\n      console.log('Output memory offset:', tflite._getOutputMemoryOffset())\n      console.log('Output height:', tflite._getOutputHeight())\n      console.log('Output width:', tflite._getOutputWidth())\n      console.log('Output channels:', tflite._getOutputChannelCount())\n\n      setLoaded(true)\n    }\n\n    loadMeetModel()\n  }, [tflite, segmentationConfig])\n\n  return isLoaded\n}\n\nexport default useMeetModel\n","import { useEffect, useState } from 'react'\n\ndeclare function createTFLiteModule(): Promise<TFLite>\n\nexport interface TFLite extends EmscriptenModule {\n  _getModelBufferMemoryOffset(): number\n  _getInputMemoryOffset(): number\n  _getInputHeight(): number\n  _getInputWidth(): number\n  _getInputChannelCount(): number\n  _getOutputMemoryOffset(): number\n  _getOutputHeight(): number\n  _getOutputWidth(): number\n  _getOutputChannelCount(): number\n  _loadModel(bufferSize: number): number\n  _runInference(): number\n}\n\nfunction useTFLite() {\n  const [tflite, setTFLite] = useState<TFLite>()\n\n  useEffect(() => {\n    // TODO Detect WASM features to handle SIMD and multithreading\n    async function loadTFLite() {\n      setTFLite(await createTFLiteModule())\n    }\n\n    loadTFLite()\n  }, [])\n\n  return tflite\n}\n\nexport default useTFLite\n","import { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport { useState } from 'react'\nimport BackgroundConfigCard from './core/components/BackgroundConfigCard'\nimport PostProcessingConfigCard from './core/components/PostProcessingConfigCard'\nimport SegmentationConfigCard from './core/components/SegmentationConfigCard'\nimport SourceConfigCard from './core/components/SourceConfigCard'\nimport ViewerCard from './core/components/ViewerCard'\nimport {\n  BackgroundConfig,\n  backgroundImageUrls,\n} from './core/helpers/backgroundHelper'\nimport { PostProcessingConfig } from './core/helpers/postProcessingHelper'\nimport { SegmentationConfig } from './core/helpers/segmentationHelper'\nimport { SourceConfig, sourceImageUrls } from './core/helpers/sourceHelper'\nimport useBodyPix from './core/hooks/useBodyPix'\nimport useMeetModel from './core/hooks/useMeetModel'\nimport useTFLite from './core/hooks/useTFLite'\n\nfunction App() {\n  const bodyPix = useBodyPix()\n  const tflite = useTFLite()\n\n  const classes = useStyles()\n  const [sourceConfig, setSourceConfig] = useState<SourceConfig>({\n    type: 'image',\n    url: sourceImageUrls[0],\n  })\n  const [backgroundConfig, setBackgroundConfig] = useState<BackgroundConfig>({\n    type: 'image',\n    url: backgroundImageUrls[0],\n  })\n  const [\n    segmentationConfig,\n    setSegmentationConfig,\n  ] = useState<SegmentationConfig>({\n    model: 'meet',\n    inputResolution: '96p',\n    pipeline: 'canvas2dCpu',\n  })\n  const [\n    postProcessingConfig,\n    setPostProcessingConfig,\n  ] = useState<PostProcessingConfig>({\n    smoothSegmentationMask: true,\n    jointBilateralFilter: { sigmaSpace: 1, sigmaColor: 0.5 },\n  })\n\n  // FIXME Animation stops, starts and stops again when changing segmentation config\n  const isMeetModelLoaded = useMeetModel(tflite, segmentationConfig)\n\n  return (\n    <div className={classes.root}>\n      <ViewerCard\n        sourceConfig={sourceConfig}\n        backgroundConfig={backgroundConfig}\n        segmentationConfig={segmentationConfig}\n        postProcessingConfig={postProcessingConfig}\n        bodyPix={bodyPix}\n        tflite={\n          // TODO Find a better way to handle both bodyPix and tflite props\n          isMeetModelLoaded || segmentationConfig.model === 'bodyPix'\n            ? tflite\n            : undefined\n        }\n      />\n      <SourceConfigCard config={sourceConfig} onChange={setSourceConfig} />\n      <BackgroundConfigCard\n        config={backgroundConfig}\n        onChange={setBackgroundConfig}\n      />\n      <SegmentationConfigCard\n        config={segmentationConfig}\n        onChange={setSegmentationConfig}\n      />\n      <PostProcessingConfigCard\n        config={postProcessingConfig}\n        pipeline={segmentationConfig.pipeline}\n        onChange={setPostProcessingConfig}\n      />\n    </div>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'grid',\n\n      [theme.breakpoints.up('xs')]: {\n        margin: theme.spacing(1),\n        gap: theme.spacing(1),\n        gridTemplateColumns: '1fr',\n      },\n\n      [theme.breakpoints.up('md')]: {\n        margin: theme.spacing(2),\n        gap: theme.spacing(2),\n        gridTemplateColumns: 'repeat(2, 1fr)',\n      },\n\n      [theme.breakpoints.up('lg')]: {\n        gridTemplateColumns: 'repeat(3, 1fr)',\n      },\n    },\n    resourceSelectionCards: {\n      display: 'flex',\n      flexDirection: 'column',\n    },\n  })\n)\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import CssBaseline from '@material-ui/core/CssBaseline'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}