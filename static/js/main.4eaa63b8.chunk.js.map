{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","videoRef","useRef","netRef","canvasRef","useEffect","a","navigator","mediaDevices","getUserMedia","video","stream","getVideoTracks","videoTrack","getSettings","width","height","document","createElement","autoplay","playsInline","controls","srcObject","onloadeddata","drawBackground","current","console","error","segmentPerson","segmentation","bodyPix","requestAnimationFrame","setupCamera","loadBodyPixModel","ref","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"iUA4DeA,MAxDf,WACE,IAAMC,EAAWC,mBACXC,EAASD,mBACTE,EAAYF,iBAA0B,MAkD5C,OAhDAG,qBAAU,WAAM,4CACd,0CAAAC,EAAA,+EAEyBC,UAAUC,aAAaC,aAAa,CACvDC,OAAO,IAHb,OAEUC,EAFV,SAKyBA,EAAOC,iBALhC,mBAKWC,EALX,OAM8BA,EAAWC,cAA7BC,EANZ,EAMYA,MAAOC,EANnB,EAMmBA,QAETN,EAAQO,SAASC,cAAc,UAC/BC,UAAW,EACjBT,EAAMU,aAAc,EACpBV,EAAMW,UAAW,EACjBX,EAAMK,MAAQA,EACdL,EAAMM,OAASA,EACfN,EAAMY,UAAYX,EAClBD,EAAMa,aAAeC,EAErBvB,EAASwB,QAAUf,EAjBvB,kDAmBIgB,QAAQC,MAAM,8BAAd,MAnBJ,2DADc,+BAwBCH,IAxBD,2EAwBd,4BAAAlB,EAAA,sEAC6BH,EAAOsB,QAASG,cACzC3B,EAASwB,SAFb,OACQI,EADR,OAIEC,IACE1B,EAAUqB,QACVxB,EAASwB,QACTI,GAGFE,sBAAsBP,GAVxB,4CAxBc,uBAAC,WAAD,wBAqCdQ,KACC,IAEH3B,qBAAU,WAAM,4CACd,sBAAAC,EAAA,sEACyBwB,MADzB,OACE3B,EAAOsB,QADT,mDADc,uBAAC,WAAD,wBAKdQ,KACC,IAEI,wBAAQC,IAAK9B,KC3CP+B,G,MAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,QCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF7B,SAAS8B,eAAe,SAM1BZ,M","file":"static/js/main.4eaa63b8.chunk.js","sourcesContent":["import * as bodyPix from '@tensorflow-models/body-pix'\nimport React, { useEffect, useRef } from 'react'\nimport './App.css'\n\nfunction App() {\n  const videoRef = useRef<HTMLVideoElement>()\n  const netRef = useRef<bodyPix.BodyPix>()\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n\n  useEffect(() => {\n    async function setupCamera() {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          video: true,\n        })\n        const [videoTrack] = stream.getVideoTracks()\n        const { width, height } = videoTrack.getSettings()\n\n        const video = document.createElement('video')\n        video.autoplay = true\n        video.playsInline = true\n        video.controls = false\n        video.width = width!\n        video.height = height!\n        video.srcObject = stream\n        video.onloadeddata = drawBackground\n\n        videoRef.current = video\n      } catch (error) {\n        console.error('Error opening video camera.', error)\n      }\n    }\n\n    async function drawBackground() {\n      const segmentation = await netRef.current!.segmentPerson(\n        videoRef.current!\n      )\n      bodyPix.drawBokehEffect(\n        canvasRef.current!,\n        videoRef.current!,\n        segmentation\n      )\n\n      requestAnimationFrame(drawBackground)\n    }\n\n    setupCamera()\n  }, [])\n\n  useEffect(() => {\n    async function loadBodyPixModel() {\n      netRef.current = await bodyPix.load()\n    }\n\n    loadBodyPixModel()\n  }, [])\n\n  return <canvas ref={canvasRef}></canvas>\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}