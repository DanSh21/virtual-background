{"version":3,"sources":["helpers/backgroundHelper.ts","helpers/thumbnailHelper.ts","hooks/useImageThumbnail.ts","components/SelectionButton.tsx","components/TumbnailButton.tsx","components/ImageButton.tsx","components/SelectionIconButton.tsx","components/BackgroundSelectionCard.tsx","components/PostProcessingConfigCard.tsx","components/SegmentationConfigCard.tsx","helpers/sourceHelper.ts","hooks/useVideoThumbnail.ts","components/VideoButton.tsx","components/SourceSelectionCard.tsx","helpers/segmentationHelper.ts","hooks/useStats.ts","hooks/useRenderingPipeline.ts","helpers/canvas2dCpuPipeline.ts","components/OutputViewer.tsx","components/SourceViewer.tsx","components/ViewerCard.tsx","hooks/useBodyPix.ts","hooks/useMeetModel.ts","hooks/useTFLite.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["backgroundImageUrls","map","imageName","process","getThumbnailBlob","source","originalWidth","originalHeight","sourceSize","Math","min","horizontalShift","verticalShift","canvas","document","createElement","width","height","getContext","drawImage","Promise","resolve","toBlob","blob","useImageThumbnail","imageUrl","useState","thumbnailUrl","setThumbnailUrl","useEffect","image","Image","src","onload","a","naturalWidth","naturalHeight","URL","createObjectURL","revokeObjectURL","useStyles","makeStyles","theme","createStyles","root","padding","minWidth","spacing","marginRight","marginBottom","border","alignItems","transitionProperty","transitionDuration","transitions","duration","shorter","transitionTimingFunction","easing","easeInOut","transform","active","borderColor","palette","primary","main","SelectionButton","props","classes","Button","className","clsx","disabled","onClick","children","scalableContent","margin","borderRadius","shape","objectFit","ThumbnailButton","alt","onLoad","Skeleton","variant","ImageButton","revokeThumbnailUrl","borderWidth","borderStyle","boxSizing","display","justifyContent","SelectionIconButton","flex","BackgroundSelectionCard","Card","CardContent","Typography","gutterBottom","component","background","type","onChange","url","PostProcessingConfigCard","FormControlLabel","label","control","Switch","color","checked","config","smoothSegmentationMask","event","target","breakpoints","only","gridColumnStart","gridRowStart","formControl","marginTop","SegmentationConfigCard","FormControl","InputLabel","Select","value","model","inputResolution","pipeline","MenuItem","sourceImageUrls","sourceVideoUrls","videoName","useVideoThumbnail","videoUrl","video","onloadedmetadata","currentTime","onseeked","videoWidth","videoHeight","icon","position","bottom","right","common","white","VideoButton","SourceSelectionCard","inputResolutions","useStats","fps","setFps","durations","setDurations","previousTimeRef","useRef","beginTimeRef","durationsRef","eventCount","frameCountRef","beginFrame","useCallback","current","Date","now","addFrameEvent","time","endFrame","useRenderingPipeline","sourcePlayback","bodyPix","tflite","segmentationConfig","postProcessingConfig","canvasRef","renderRequestId","shouldRender","runPipeline","ctx","segmentationWidth","segmentationHeight","segmentationPixelCount","segmentationMask","ImageData","segmentationMaskCanvas","segmentationMaskCtx","inputMemoryOffset","_getInputMemoryOffset","outputMemoryOffset","_getOutputMemoryOffset","htmlElement","segmentPerson","segmentation","i","data","putImageData","imageData","getImageData","HEAPF32","_runInference","HEAP32","globalCompositeOperation","filter","buildCanvas2dCpuPipeline","render","requestAnimationFrame","console","log","cancelAnimationFrame","stats","top","left","textAlign","backgroundColor","OutputViewer","resizingDuration","inferenceDuration","postProcessingDuration","statDetails","round","join","ref","down","overflow","up","borderRightWidth","borderRightStyle","borderRightColor","divider","SourceViewer","sourceUrl","setSourceUrl","isLoading","setLoading","isCameraError","setCameraError","videoRef","undefined","setTimeout","constraint","navigator","mediaDevices","getUserMedia","stream","srcObject","error","getCameraStream","CircularProgress","hidden","fontSize","autoPlay","playsInline","controls","muted","loop","onLoadedData","minHeight","gridColumnEnd","gridRowEnd","noOutput","avatar","ViewerCard","setSourcePlayback","Paper","Avatar","useBodyPix","setBodyPix","tf","tfBodyPix","loadBodyPix","useMeetModel","isLoaded","setLoaded","modelFileName","fetch","modelResponse","arrayBuffer","byteLength","modelBufferOffset","_getModelBufferMemoryOffset","HEAPU8","set","Uint8Array","_loadModel","_getInputHeight","_getInputWidth","_getInputChannelCount","_getOutputHeight","_getOutputWidth","_getOutputChannelCount","loadMeetModel","useTFLite","setTFLite","createTFLiteModule","loadTFLite","gap","gridTemplateColumns","resourceSelectionCards","flexDirection","App","setSource","setBackground","setSegmentationConfig","setPostProcessingConfig","isMeetModelLoaded","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","CssBaseline","getElementById"],"mappings":"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","file":"static/js/main.0241022e.chunk.js","sourcesContent":["export type Background = {\n  type: 'none' | 'blur' | 'image'\n  url?: string\n}\n\nexport const backgroundImageUrls = [\n  'architecture-5082700_1280',\n  'porch-691330_1280',\n  'saxon-switzerland-539418_1280',\n  'shibuyasky-4768679_1280',\n].map((imageName) => `${process.env.PUBLIC_URL}/backgrounds/${imageName}.jpg`)\n","/**\n * Returns a thumbnail as a Blob.\n * @param source The source image or video.\n * @param originalWidth The original width of the source before sizing.\n * @param originalHeight The original height of the source before sizing.\n */\nexport function getThumbnailBlob(\n  source: HTMLImageElement | HTMLVideoElement,\n  originalWidth: number,\n  originalHeight: number\n) {\n  const sourceSize = Math.min(originalWidth, originalHeight)\n  const horizontalShift = (originalWidth - sourceSize) / 2\n  const verticalShift = (originalHeight - sourceSize) / 2\n\n  const canvas = document.createElement('canvas')\n  canvas.width = 63\n  canvas.height = 63\n  const ctx = canvas.getContext('2d')!\n  ctx.drawImage(\n    source,\n    horizontalShift,\n    verticalShift,\n    sourceSize,\n    sourceSize,\n    0,\n    0,\n    canvas.width,\n    canvas.height\n  )\n\n  return new Promise<Blob | null>((resolve) =>\n    canvas.toBlob((blob) => resolve(blob))\n  )\n}\n","import { useEffect, useState } from 'react'\nimport { getThumbnailBlob } from '../helpers/thumbnailHelper'\n\n/**\n * Returns an image thumbnail URL and a function to revoke it.\n */\nfunction useImageThumbnail(imageUrl: string): [string | undefined, () => void] {\n  const [thumbnailUrl, setThumbnailUrl] = useState<string>()\n\n  useEffect(() => {\n    const image = new Image()\n    image.src = imageUrl\n    image.onload = async () => {\n      const blob = await getThumbnailBlob(\n        image,\n        image.naturalWidth,\n        image.naturalHeight\n      )\n      setThumbnailUrl(URL.createObjectURL(blob))\n    }\n  }, [imageUrl])\n\n  return [thumbnailUrl, () => URL.revokeObjectURL(thumbnailUrl!)]\n}\n\nexport default useImageThumbnail\n","import Button from '@material-ui/core/Button'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport clsx from 'clsx'\n\ntype SelectionButtonProps = {\n  active: boolean\n  disabled?: boolean\n  children: React.ReactNode\n  onClick: () => void\n}\n\nfunction SelectionButton(props: SelectionButtonProps) {\n  const classes = useStyles()\n\n  return (\n    <Button\n      className={clsx(classes.root, props.active && classes.active)}\n      disabled={props.disabled}\n      onClick={props.onClick}\n    >\n      {props.children}\n    </Button>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      padding: 0,\n      minWidth: theme.spacing(7) + 2,\n      height: theme.spacing(7) + 2,\n      width: theme.spacing(7) + 2,\n      marginRight: theme.spacing(1),\n      marginBottom: theme.spacing(1),\n      border: '2px solid transparent',\n      alignItems: 'stretch',\n      transitionProperty: 'transform, border-color',\n      transitionDuration: `${theme.transitions.duration.shorter}ms`,\n      transitionTimingFunction: theme.transitions.easing.easeInOut,\n\n      '&:hover': {\n        transform: 'scale(1.125)',\n      },\n    },\n    active: {\n      borderColor: theme.palette.primary.main,\n      transform: 'scale(1.125)',\n    },\n  })\n)\n\nexport default SelectionButton\n","import { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport Skeleton from '@material-ui/lab/Skeleton'\nimport clsx from 'clsx'\nimport SelectionButton from './SelectionButton'\n\ntype ThumbnailButtonProps = {\n  thumbnailUrl?: string\n  active: boolean\n  children?: React.ReactNode\n  onClick: () => void\n  onLoad?: () => void\n}\n\nfunction ThumbnailButton(props: ThumbnailButtonProps) {\n  const classes = useStyles()\n\n  return (\n    <SelectionButton\n      active={!!props.thumbnailUrl && props.active}\n      disabled={!props.thumbnailUrl}\n      onClick={props.onClick}\n    >\n      {props.thumbnailUrl ? (\n        <img\n          className={clsx(classes.scalableContent, classes.image)}\n          src={props.thumbnailUrl}\n          alt=\"\"\n          onLoad={props.onLoad}\n        />\n      ) : (\n        <Skeleton className={classes.scalableContent} variant=\"rect\" />\n      )}\n      {props.children}\n    </SelectionButton>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    scalableContent: {\n      // Fixes rendering issues with border when scaled\n      width: 'calc(100% + 2px)',\n      height: 'calc(100% + 2px)',\n      margin: -1,\n      borderRadius: theme.shape.borderRadius,\n    },\n    image: {\n      objectFit: 'cover',\n    },\n  })\n)\n\nexport default ThumbnailButton\n","import useImageThumbnail from '../hooks/useImageThumbnail'\nimport ThumbnailButton from './TumbnailButton'\n\ntype ImageButtonProps = {\n  imageUrl: string\n  active: boolean\n  onClick: () => void\n}\n\nfunction ImageButton(props: ImageButtonProps) {\n  const [thumbnailUrl, revokeThumbnailUrl] = useImageThumbnail(props.imageUrl)\n\n  return (\n    <ThumbnailButton\n      thumbnailUrl={thumbnailUrl}\n      active={props.active}\n      onClick={props.onClick}\n      onLoad={revokeThumbnailUrl}\n    />\n  )\n}\n\nexport default ImageButton\n","import { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport SelectionButton from './SelectionButton'\n\ntype SelectionIconButtonProps = {\n  active: boolean\n  children: React.ReactNode\n  onClick: () => void\n}\n\nfunction SelectionIconButton(props: SelectionIconButtonProps) {\n  const classes = useStyles()\n\n  return (\n    <SelectionButton active={props.active} onClick={props.onClick}>\n      <div className={classes.root}>{props.children}</div>\n    </SelectionButton>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: '100%',\n      height: '100%',\n      borderWidth: 1,\n      borderStyle: 'solid',\n      borderColor: 'rgba(0, 0, 0, 0.23)',\n      borderRadius: theme.shape.borderRadius,\n      margin: -1,\n      boxSizing: 'content-box',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n    },\n  })\n)\n\nexport default SelectionIconButton\n","import Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport Typography from '@material-ui/core/Typography'\nimport BlockIcon from '@material-ui/icons/Block'\nimport BlurOnIcon from '@material-ui/icons/BlurOn'\nimport { Background, backgroundImageUrls } from '../helpers/backgroundHelper'\nimport ImageButton from './ImageButton'\nimport SelectionIconButton from './SelectionIconButton'\n\ntype BackgroundSelectionCardProps = {\n  background: Background\n  onChange: (background: Background) => void\n}\n\nfunction BackgroundSelectionCard(props: BackgroundSelectionCardProps) {\n  const classes = useStyles()\n\n  return (\n    <Card className={classes.root}>\n      <CardContent>\n        <Typography gutterBottom variant=\"h6\" component=\"h2\">\n          Background\n        </Typography>\n        <SelectionIconButton\n          active={props.background.type === 'none'}\n          onClick={() => props.onChange({ type: 'none' })}\n        >\n          <BlockIcon />\n        </SelectionIconButton>\n        <SelectionIconButton\n          active={props.background.type === 'blur'}\n          onClick={() => props.onChange({ type: 'blur' })}\n        >\n          <BlurOnIcon />\n        </SelectionIconButton>\n        {backgroundImageUrls.map((imageUrl) => (\n          <ImageButton\n            key={imageUrl}\n            imageUrl={imageUrl}\n            active={imageUrl === props.background.url}\n            onClick={() => props.onChange({ type: 'image', url: imageUrl })}\n          />\n        ))}\n      </CardContent>\n    </Card>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flex: 1,\n    },\n  })\n)\n\nexport default BackgroundSelectionCard\n","import Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport Switch from '@material-ui/core/Switch'\nimport Typography from '@material-ui/core/Typography'\nimport { PostProcessingConfig } from '../helpers/postProcessingHelper'\n\ntype PostProcessingConfigCardProps = {\n  config: PostProcessingConfig\n  onChange: (postProcessingConfig: PostProcessingConfig) => void\n}\n\nfunction PostProcessingConfigCard(props: PostProcessingConfigCardProps) {\n  return (\n    <Card>\n      <CardContent>\n        <Typography gutterBottom variant=\"h6\" component=\"h2\">\n          Post-processing\n        </Typography>\n        <FormControlLabel\n          label=\"Smooth segmentation mask\"\n          control={\n            <Switch\n              color=\"primary\"\n              checked={props.config.smoothSegmentationMask}\n              onChange={(event) => {\n                props.onChange({ smoothSegmentationMask: event.target.checked })\n              }}\n            />\n          }\n        />\n      </CardContent>\n    </Card>\n  )\n}\n\nexport default PostProcessingConfigCard\n","import Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport FormControl from '@material-ui/core/FormControl'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport Select from '@material-ui/core/Select'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport Typography from '@material-ui/core/Typography'\nimport { ChangeEvent } from 'react'\nimport {\n  InputResolution,\n  Pipeline,\n  SegmentationConfig,\n  SegmentationModel,\n} from '../helpers/segmentationHelper'\n\ntype SegmentationConfigCardProps = {\n  config: SegmentationConfig\n  onChange: (segmentationConfig: SegmentationConfig) => void\n}\n\nfunction SegmentationConfigCard(props: SegmentationConfigCardProps) {\n  const classes = useStyles()\n\n  function handleModelChange(event: ChangeEvent<{ value: unknown }>) {\n    const model = event.target.value as SegmentationModel\n    let inputResolution = props.config.inputResolution\n    if (model === 'meet' && inputResolution === '360p') {\n      inputResolution = '144p'\n    }\n    let pipeline = props.config.pipeline\n    if (model === 'bodyPix' && pipeline === 'webgl2') {\n      pipeline = 'canvas2dCpu'\n    }\n    props.onChange({ ...props.config, model, inputResolution, pipeline })\n  }\n\n  function handleInputResolutionChange(event: ChangeEvent<{ value: unknown }>) {\n    props.onChange({\n      ...props.config,\n      inputResolution: event.target.value as InputResolution,\n    })\n  }\n\n  function handlePipelineChange(event: ChangeEvent<{ value: unknown }>) {\n    props.onChange({\n      ...props.config,\n      pipeline: event.target.value as Pipeline,\n    })\n  }\n\n  return (\n    <Card className={classes.root}>\n      <CardContent>\n        <Typography gutterBottom variant=\"h6\" component=\"h2\">\n          Segmentation\n        </Typography>\n        <FormControl className={classes.formControl} variant=\"outlined\">\n          <InputLabel>Model</InputLabel>\n          <Select\n            label=\"Model\"\n            value={props.config.model}\n            onChange={handleModelChange}\n          >\n            <MenuItem value={'meet'}>Meet</MenuItem>\n            <MenuItem value={'bodyPix'}>BodyPix</MenuItem>\n          </Select>\n        </FormControl>\n        <FormControl className={classes.formControl} variant=\"outlined\">\n          <InputLabel>Input resolution</InputLabel>\n          <Select\n            label=\"Input resolution\"\n            value={props.config.inputResolution}\n            onChange={handleInputResolutionChange}\n          >\n            <MenuItem value={'360p'} disabled={props.config.model === 'meet'}>\n              360p\n            </MenuItem>\n            <MenuItem value={'144p'}>144p</MenuItem>\n            <MenuItem value={'96p'}>96p</MenuItem>\n          </Select>\n        </FormControl>\n        <FormControl className={classes.formControl} variant=\"outlined\">\n          <InputLabel>Pipeline</InputLabel>\n          <Select\n            label=\"Pipeline\"\n            value={props.config.pipeline}\n            onChange={handlePipelineChange}\n          >\n            <MenuItem\n              value={'webgl2'}\n              disabled={props.config.model === 'bodyPix'}\n            >\n              WebGL 2 (WIP)\n            </MenuItem>\n            <MenuItem value={'canvas2dCpu'}>Canvas 2D + CPU</MenuItem>\n          </Select>\n        </FormControl>\n      </CardContent>\n    </Card>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      [theme.breakpoints.only('md')]: {\n        gridColumnStart: 2,\n        gridRowStart: 2,\n      },\n    },\n    formControl: {\n      marginTop: theme.spacing(1),\n      marginBottom: theme.spacing(1),\n      marginRight: theme.spacing(2),\n      minWidth: 120,\n    },\n  })\n)\n\nexport default SegmentationConfigCard\n","export type Source = {\n  type: 'image' | 'video' | 'camera'\n  url?: string\n}\n\nexport type SourcePlayback = {\n  htmlElement: HTMLImageElement | HTMLVideoElement\n  width: number\n  height: number\n}\n\nexport const sourceImageUrls = [\n  'girl-919048_1280',\n  'doctor-5871743_640',\n  'woman-5883428_1280',\n].map((imageName) => `${process.env.PUBLIC_URL}/images/${imageName}.jpg`)\n\nexport const sourceVideoUrls = [\n  'Dance - 32938',\n  'Doctor - 26732',\n  'Thoughtful - 35590',\n].map((videoName) => `${process.env.PUBLIC_URL}/videos/${videoName}.mp4`)\n","import { useEffect, useState } from 'react'\nimport { getThumbnailBlob } from '../helpers/thumbnailHelper'\n\n/**\n * Returns a video thumbnail URL and a function to revoke it.\n */\nfunction useVideoThumbnail(videoUrl: string): [string | undefined, () => void] {\n  const [thumbnailUrl, setThumbnailUrl] = useState<string>()\n\n  useEffect(() => {\n    const video = document.createElement('video')\n    video.src = videoUrl\n    video.onloadedmetadata = () => {\n      video.currentTime = video.duration / 2\n    }\n    video.onseeked = async () => {\n      const blob = await getThumbnailBlob(\n        video,\n        video.videoWidth,\n        video.videoHeight\n      )\n      setThumbnailUrl(URL.createObjectURL(blob))\n    }\n  }, [videoUrl])\n\n  return [thumbnailUrl, () => URL.revokeObjectURL(thumbnailUrl!)]\n}\n\nexport default useVideoThumbnail\n","import { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport PlayCircleOutlineIcon from '@material-ui/icons/PlayCircleOutline'\nimport useVideoThumbnail from '../hooks/useVideoThumbnail'\nimport ThumbnailButton from './TumbnailButton'\n\ntype VideoButtonProps = {\n  videoUrl: string\n  active: boolean\n  onClick: () => void\n}\n\nfunction VideoButton(props: VideoButtonProps) {\n  const classes = useStyles()\n  const [thumbnailUrl, revokeThumbnailUrl] = useVideoThumbnail(props.videoUrl)\n\n  return (\n    <ThumbnailButton\n      thumbnailUrl={thumbnailUrl}\n      active={props.active}\n      onClick={props.onClick}\n      onLoad={revokeThumbnailUrl}\n    >\n      <PlayCircleOutlineIcon className={classes.icon} />\n    </ThumbnailButton>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    icon: {\n      position: 'absolute',\n      bottom: 0,\n      right: 0,\n      color: theme.palette.common.white,\n    },\n  })\n)\n\nexport default VideoButton\n","import Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport Typography from '@material-ui/core/Typography'\nimport VideocamIcon from '@material-ui/icons/Videocam'\nimport {\n  Source,\n  sourceImageUrls,\n  sourceVideoUrls,\n} from '../helpers/sourceHelper'\nimport ImageButton from './ImageButton'\nimport SelectionIconButton from './SelectionIconButton'\nimport VideoButton from './VideoButton'\n\ntype SourceSelectionCardProps = {\n  source: Source\n  onChange: (source: Source) => void\n}\n\nfunction SourceSelectionCard(props: SourceSelectionCardProps) {\n  const classes = useStyles()\n\n  return (\n    <Card className={classes.root}>\n      <CardContent>\n        <Typography gutterBottom variant=\"h6\" component=\"h2\">\n          Source\n        </Typography>\n        <SelectionIconButton\n          active={props.source.type === 'camera'}\n          onClick={() => props.onChange({ type: 'camera' })}\n        >\n          <VideocamIcon />\n        </SelectionIconButton>\n        {sourceImageUrls.map((imageUrl) => (\n          <ImageButton\n            key={imageUrl}\n            imageUrl={imageUrl}\n            active={imageUrl === props.source.url}\n            onClick={() => props.onChange({ type: 'image', url: imageUrl })}\n          />\n        ))}\n        {sourceVideoUrls.map((videoUrl) => (\n          <VideoButton\n            key={videoUrl}\n            videoUrl={videoUrl}\n            active={videoUrl === props.source.url}\n            onClick={() => props.onChange({ type: 'video', url: videoUrl })}\n          />\n        ))}\n      </CardContent>\n    </Card>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flex: 1,\n    },\n  })\n)\n\nexport default SourceSelectionCard\n","export type SegmentationModel = 'bodyPix' | 'meet'\n\nexport type InputResolution = '360p' | '144p' | '96p'\n\nexport const inputResolutions: {\n  [resolution in InputResolution]: [number, number]\n} = {\n  '360p': [640, 360],\n  '144p': [256, 144],\n  '96p': [160, 96],\n}\n\nexport type Pipeline = 'canvas2dCpu' | 'webgl2'\n\nexport type SegmentationConfig = {\n  model: SegmentationModel\n  inputResolution: InputResolution\n  pipeline: Pipeline\n}\n","import { useCallback, useRef, useState } from 'react'\n\nfunction useStats() {\n  const [fps, setFps] = useState(0)\n  const [durations, setDurations] = useState<number[]>([])\n  const previousTimeRef = useRef(0)\n  const beginTimeRef = useRef(0)\n  const durationsRef = useRef<number[]>([])\n  const eventCount = useRef(0)\n  const frameCountRef = useRef(0)\n\n  // The useCallbacks below are required to prevent infinite loop\n  // when the functions are called inside useEffect\n\n  const beginFrame = useCallback(() => {\n    beginTimeRef.current = Date.now()\n  }, [])\n\n  const addFrameEvent = useCallback(() => {\n    const time = Date.now()\n    durationsRef.current[eventCount.current] = time - beginTimeRef.current\n    beginTimeRef.current = time\n    eventCount.current++\n  }, [])\n\n  const endFrame = useCallback(() => {\n    const time = Date.now()\n    durationsRef.current[eventCount.current] = time - beginTimeRef.current\n    frameCountRef.current++\n    if (time >= previousTimeRef.current + 1000) {\n      setFps((frameCountRef.current * 1000) / (time - previousTimeRef.current))\n      setDurations(durationsRef.current)\n      previousTimeRef.current = time\n      frameCountRef.current = 0\n    }\n    eventCount.current = 0\n  }, [])\n\n  return { fps, durations, beginFrame, addFrameEvent, endFrame }\n}\n\nexport default useStats\n","import { BodyPix } from '@tensorflow-models/body-pix'\nimport { useEffect, useRef } from 'react'\nimport { Background } from '../helpers/backgroundHelper'\nimport { buildCanvas2dCpuPipeline } from '../helpers/canvas2dCpuPipeline'\nimport { PostProcessingConfig } from '../helpers/postProcessingHelper'\nimport { SegmentationConfig } from '../helpers/segmentationHelper'\nimport { SourcePlayback } from '../helpers/sourceHelper'\nimport useStats from './useStats'\nimport { TFLite } from './useTFLite'\n\nfunction useRenderingPipeline(\n  sourcePlayback: SourcePlayback,\n  background: Background,\n  bodyPix: BodyPix,\n  tflite: TFLite,\n  segmentationConfig: SegmentationConfig,\n  postProcessingConfig: PostProcessingConfig\n) {\n  const canvasRef = useRef<HTMLCanvasElement>(null!)\n  const { fps, durations, beginFrame, addFrameEvent, endFrame } = useStats()\n\n  useEffect(() => {\n    // The useEffect cleanup function is not enough to stop\n    // the rendering loop when the framerate is low\n    let shouldRender = true\n\n    let renderRequestId: number\n\n    const runPipeline = buildCanvas2dCpuPipeline(\n      sourcePlayback,\n      background,\n      canvasRef.current,\n      bodyPix,\n      tflite,\n      segmentationConfig,\n      postProcessingConfig,\n      addFrameEvent\n    )\n\n    async function render() {\n      if (!shouldRender) {\n        return\n      }\n      beginFrame()\n      await runPipeline()\n      endFrame()\n      renderRequestId = requestAnimationFrame(render)\n    }\n\n    render()\n    console.log(\n      'Animation started:',\n      sourcePlayback,\n      background,\n      segmentationConfig,\n      postProcessingConfig\n    )\n\n    return () => {\n      shouldRender = false\n      cancelAnimationFrame(renderRequestId)\n      console.log(\n        'Animation stopped:',\n        sourcePlayback,\n        background,\n        segmentationConfig,\n        postProcessingConfig\n      )\n    }\n  }, [\n    sourcePlayback,\n    background,\n    bodyPix,\n    tflite,\n    segmentationConfig,\n    postProcessingConfig,\n    beginFrame,\n    addFrameEvent,\n    endFrame,\n  ])\n\n  return { canvasRef, fps, durations }\n}\n\nexport default useRenderingPipeline\n","import { BodyPix } from '@tensorflow-models/body-pix'\nimport { TFLite } from '../hooks/useTFLite'\nimport { Background } from './backgroundHelper'\nimport { PostProcessingConfig } from './postProcessingHelper'\nimport { inputResolutions, SegmentationConfig } from './segmentationHelper'\nimport { SourcePlayback } from './sourceHelper'\n\nexport function buildCanvas2dCpuPipeline(\n  sourcePlayback: SourcePlayback,\n  background: Background,\n  canvas: HTMLCanvasElement,\n  bodyPix: BodyPix,\n  tflite: TFLite,\n  segmentationConfig: SegmentationConfig,\n  postProcessingConfig: PostProcessingConfig,\n  addFrameEvent: () => void\n) {\n  const ctx = canvas.getContext('2d')!\n\n  const [segmentationWidth, segmentationHeight] = inputResolutions[\n    segmentationConfig.inputResolution\n  ]\n  const segmentationPixelCount = segmentationWidth * segmentationHeight\n  const segmentationMask = new ImageData(segmentationWidth, segmentationHeight)\n  const segmentationMaskCanvas = document.createElement('canvas')\n  segmentationMaskCanvas.width = segmentationWidth\n  segmentationMaskCanvas.height = segmentationHeight\n  const segmentationMaskCtx = segmentationMaskCanvas.getContext('2d')!\n\n  const inputMemoryOffset = tflite._getInputMemoryOffset() / 4\n  const outputMemoryOffset = tflite._getOutputMemoryOffset() / 4\n\n  async function runPipeline() {\n    if (background.type !== 'none') {\n      segmentationMaskCtx.drawImage(\n        sourcePlayback.htmlElement,\n        0,\n        0,\n        sourcePlayback.width,\n        sourcePlayback.height,\n        0,\n        0,\n        segmentationWidth,\n        segmentationHeight\n      )\n    }\n\n    addFrameEvent()\n\n    if (background.type !== 'none') {\n      if (segmentationConfig.model === 'bodyPix') {\n        const segmentation = await bodyPix.segmentPerson(segmentationMaskCanvas)\n        for (let i = 0; i < segmentationPixelCount; i++) {\n          // Sets only the alpha component of each pixel\n          segmentationMask.data[i * 4 + 3] = segmentation.data[i] ? 255 : 0\n        }\n        segmentationMaskCtx.putImageData(segmentationMask, 0, 0)\n      } else {\n        // TODO Use a shader to directly output the resizing result in memory\n        const imageData = segmentationMaskCtx.getImageData(\n          0,\n          0,\n          segmentationWidth,\n          segmentationHeight\n        )\n\n        for (let i = 0; i < segmentationPixelCount; i++) {\n          tflite.HEAPF32[inputMemoryOffset + i * 3] =\n            imageData.data[i * 4] / 255\n          tflite.HEAPF32[inputMemoryOffset + i * 3 + 1] =\n            imageData.data[i * 4 + 1] / 255\n          tflite.HEAPF32[inputMemoryOffset + i * 3 + 2] =\n            imageData.data[i * 4 + 2] / 255\n        }\n\n        tflite._runInference()\n\n        // TODO Use shaders to completely avoid this kind of CPU manipulations\n        for (let i = 0; i < segmentationPixelCount; i++) {\n          // TODO Implement softmax on GPU instead\n          // Sets only the alpha component of each pixel\n          segmentationMask.data[i * 4 + 3] =\n            tflite.HEAPF32[outputMemoryOffset + i * 2] <\n            tflite.HEAP32[outputMemoryOffset + i * 2 + 1]\n              ? 255\n              : 0\n        }\n        segmentationMaskCtx.putImageData(segmentationMask, 0, 0)\n      }\n    }\n\n    addFrameEvent()\n\n    ctx.globalCompositeOperation = 'copy'\n    ctx.filter = 'none'\n\n    if (postProcessingConfig.smoothSegmentationMask) {\n      if (background.type === 'blur') {\n        ctx.filter = 'blur(8px)' // FIXME Does not work on Safari\n      } else if (background.type === 'image') {\n        ctx.filter = 'blur(2px)' // FIXME Does not work on Safari\n      }\n    }\n\n    if (background.type !== 'none') {\n      ctx.drawImage(\n        segmentationMaskCanvas,\n        0,\n        0,\n        segmentationWidth,\n        segmentationHeight,\n        0,\n        0,\n        sourcePlayback.width,\n        sourcePlayback.height\n      )\n      ctx.globalCompositeOperation = 'source-in'\n      ctx.filter = 'none'\n    }\n\n    ctx.drawImage(sourcePlayback.htmlElement, 0, 0)\n\n    if (background.type === 'blur') {\n      ctx.globalCompositeOperation = 'destination-over'\n      ctx.filter = 'blur(8px)' // FIXME Does not work on Safari\n      ctx.drawImage(sourcePlayback.htmlElement, 0, 0)\n    }\n  }\n\n  return runPipeline\n}\n","import { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport Typography from '@material-ui/core/Typography'\nimport { BodyPix } from '@tensorflow-models/body-pix'\nimport React from 'react'\nimport { Background } from '../helpers/backgroundHelper'\nimport { PostProcessingConfig } from '../helpers/postProcessingHelper'\nimport { SegmentationConfig } from '../helpers/segmentationHelper'\nimport { SourcePlayback } from '../helpers/sourceHelper'\nimport useRenderingPipeline from '../hooks/useRenderingPipeline'\nimport { TFLite } from '../hooks/useTFLite'\n\ntype OutputViewerProps = {\n  sourcePlayback: SourcePlayback\n  background: Background\n  bodyPix: BodyPix\n  tflite: TFLite\n  segmentationConfig: SegmentationConfig\n  postProcessingConfig: PostProcessingConfig\n}\n\nfunction OutputViewer(props: OutputViewerProps) {\n  const classes = useStyles()\n  const {\n    canvasRef,\n    fps,\n    durations: [resizingDuration, inferenceDuration, postProcessingDuration],\n  } = useRenderingPipeline(\n    props.sourcePlayback,\n    props.background,\n    props.bodyPix,\n    props.tflite,\n    props.segmentationConfig,\n    props.postProcessingConfig\n  )\n\n  const statDetails = [\n    `resizing ${resizingDuration}ms`,\n    `inference ${inferenceDuration}ms`,\n    `post-processing ${postProcessingDuration}ms`,\n  ]\n  const stats = `${Math.round(fps)} fps (${statDetails.join(', ')})`\n\n  return (\n    <div className={classes.root}>\n      {props.background.type === 'image' && (\n        <img className={classes.render} src={props.background.url} alt=\"\" />\n      )}\n      <canvas\n        ref={canvasRef}\n        className={classes.render}\n        width={props.sourcePlayback.width}\n        height={props.sourcePlayback.height}\n      />\n      <Typography className={classes.stats} variant=\"caption\">\n        {stats}\n      </Typography>\n    </div>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flex: 1,\n      position: 'relative',\n    },\n    render: {\n      position: 'absolute',\n      width: '100%',\n      height: '100%',\n      objectFit: 'cover',\n    },\n    stats: {\n      position: 'absolute',\n      top: 0,\n      right: 0,\n      left: 0,\n      textAlign: 'center',\n      backgroundColor: 'rgba(0, 0, 0, 0.48)',\n      color: theme.palette.common.white,\n    },\n  })\n)\n\nexport default OutputViewer\n","import CircularProgress from '@material-ui/core/CircularProgress'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport VideocamOffIcon from '@material-ui/icons/VideocamOff'\nimport React, { SyntheticEvent, useEffect, useRef, useState } from 'react'\nimport { Source, SourcePlayback } from '../helpers/sourceHelper'\n\ntype SourceViewerProps = {\n  source: Source\n  onLoad: (sourcePlayback: SourcePlayback) => void\n}\n\nfunction SourceViewer(props: SourceViewerProps) {\n  const classes = useStyles()\n  const [sourceUrl, setSourceUrl] = useState<string>()\n  const [isLoading, setLoading] = useState(false)\n  const [isCameraError, setCameraError] = useState(false)\n  const videoRef = useRef<HTMLVideoElement>(null)\n\n  useEffect(() => {\n    setSourceUrl(undefined)\n    setLoading(true)\n    setCameraError(false)\n\n    // Enforces reloading the resource, otherwise\n    // onLoad event is not always dispatched and the\n    // progress indicator never disappears\n    setTimeout(() => setSourceUrl(props.source.url))\n  }, [props.source])\n\n  useEffect(() => {\n    async function getCameraStream() {\n      try {\n        const constraint = { video: true }\n        const stream = await navigator.mediaDevices.getUserMedia(constraint)\n        if (videoRef.current) {\n          videoRef.current.srcObject = stream\n          return\n        }\n      } catch (error) {\n        console.error('Error opening video camera.', error)\n      }\n      setLoading(false)\n      setCameraError(true)\n    }\n\n    if (props.source.type === 'camera') {\n      getCameraStream()\n    } else if (videoRef.current) {\n      videoRef.current.srcObject = null\n    }\n  }, [props.source])\n\n  function handleImageLoad(event: SyntheticEvent) {\n    const image = event.target as HTMLImageElement\n    props.onLoad({\n      htmlElement: image,\n      width: image.naturalWidth,\n      height: image.naturalHeight,\n    })\n    setLoading(false)\n  }\n\n  function handleVideoLoad(event: SyntheticEvent) {\n    const video = event.target as HTMLVideoElement\n    props.onLoad({\n      htmlElement: video,\n      width: video.videoWidth,\n      height: video.videoHeight,\n    })\n    setLoading(false)\n  }\n\n  return (\n    <div className={classes.root}>\n      {isLoading && <CircularProgress />}\n      {props.source.type === 'image' ? (\n        <img\n          className={classes.sourcePlayback}\n          src={sourceUrl}\n          hidden={isLoading}\n          alt=\"\"\n          onLoad={handleImageLoad}\n        />\n      ) : isCameraError ? (\n        <VideocamOffIcon fontSize=\"large\" />\n      ) : (\n        <video\n          ref={videoRef}\n          className={classes.sourcePlayback}\n          src={sourceUrl}\n          hidden={isLoading}\n          autoPlay\n          playsInline\n          controls={false}\n          muted\n          loop\n          onLoadedData={handleVideoLoad}\n        />\n      )}\n    </div>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      position: 'relative',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n\n      [theme.breakpoints.down('xs')]: {\n        width: 0,\n        overflow: 'hidden',\n      },\n\n      [theme.breakpoints.up('sm')]: {\n        flex: 1,\n        borderRightWidth: 1,\n        borderRightStyle: 'solid',\n        borderRightColor: theme.palette.divider,\n      },\n    },\n    sourcePlayback: {\n      position: 'absolute',\n      width: '100%',\n      height: '100%',\n      objectFit: 'cover',\n    },\n  })\n)\n\nexport default SourceViewer\n","import Avatar from '@material-ui/core/Avatar'\nimport Paper from '@material-ui/core/Paper'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport { BodyPix } from '@tensorflow-models/body-pix'\nimport { useEffect, useState } from 'react'\nimport { Background } from '../helpers/backgroundHelper'\nimport { PostProcessingConfig } from '../helpers/postProcessingHelper'\nimport { SegmentationConfig } from '../helpers/segmentationHelper'\nimport { Source, SourcePlayback } from '../helpers/sourceHelper'\nimport { TFLite } from '../hooks/useTFLite'\nimport OutputViewer from './OutputViewer'\nimport SourceViewer from './SourceViewer'\n\ntype ViewerCardProps = {\n  source: Source\n  background: Background\n  bodyPix?: BodyPix\n  tflite?: TFLite\n  segmentationConfig: SegmentationConfig\n  postProcessingConfig: PostProcessingConfig\n}\n\nfunction ViewerCard(props: ViewerCardProps) {\n  const classes = useStyles()\n  const [sourcePlayback, setSourcePlayback] = useState<SourcePlayback>()\n\n  useEffect(() => {\n    setSourcePlayback(undefined)\n  }, [props.source])\n\n  return (\n    <Paper className={classes.root}>\n      <SourceViewer source={props.source} onLoad={setSourcePlayback} />\n      {sourcePlayback && props.bodyPix && props.tflite ? (\n        <OutputViewer\n          sourcePlayback={sourcePlayback}\n          background={props.background}\n          bodyPix={props.bodyPix}\n          tflite={props.tflite}\n          segmentationConfig={props.segmentationConfig}\n          postProcessingConfig={props.postProcessingConfig}\n        />\n      ) : (\n        <div className={classes.noOutput}>\n          <Avatar className={classes.avatar} />\n        </div>\n      )}\n    </Paper>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) => {\n  const minHeight = [`${theme.spacing(52)}px`, `100vh - ${theme.spacing(2)}px`]\n\n  return createStyles({\n    root: {\n      minHeight: `calc(min(${minHeight.join(', ')}))`,\n      display: 'flex',\n      overflow: 'hidden',\n\n      [theme.breakpoints.up('md')]: {\n        gridColumnStart: 1,\n        gridColumnEnd: 3,\n      },\n\n      [theme.breakpoints.up('lg')]: {\n        gridRowStart: 1,\n        gridRowEnd: 3,\n      },\n    },\n    noOutput: {\n      flex: 1,\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n    },\n    avatar: {\n      width: theme.spacing(20),\n      height: theme.spacing(20),\n    },\n  })\n})\n\nexport default ViewerCard\n","import * as tfBodyPix from '@tensorflow-models/body-pix'\nimport * as tf from '@tensorflow/tfjs'\nimport { useEffect, useState } from 'react'\n\nfunction useBodyPix() {\n  const [bodyPix, setBodyPix] = useState<tfBodyPix.BodyPix>()\n\n  useEffect(() => {\n    async function loadBodyPix() {\n      console.log('Loading TensorFlow.js and BodyPix segmentation model')\n      await tf.ready()\n      setBodyPix(await tfBodyPix.load())\n      console.log('TensorFlow.js and BodyPix loaded')\n    }\n\n    loadBodyPix()\n  }, [])\n\n  return bodyPix\n}\n\nexport default useBodyPix\n","import { useEffect, useState } from 'react'\nimport { SegmentationConfig } from '../helpers/segmentationHelper'\nimport { TFLite } from './useTFLite'\n\nfunction useMeetModel(\n  tflite: TFLite | undefined,\n  segmentationConfig: SegmentationConfig\n) {\n  const [isLoaded, setLoaded] = useState(false)\n\n  useEffect(() => {\n    async function loadMeetModel() {\n      if (!tflite || segmentationConfig.model !== 'meet') {\n        return\n      }\n\n      setLoaded(false)\n\n      const modelFileName =\n        segmentationConfig.inputResolution === '144p'\n          ? 'segm_full_v679'\n          : 'segm_lite_v681'\n      console.log('Loading meet model:', modelFileName)\n\n      const modelResponse = await fetch(\n        `${process.env.PUBLIC_URL}/models/${modelFileName}.tflite`\n      )\n      const model = await modelResponse.arrayBuffer()\n      console.log('Model buffer size:', model.byteLength)\n\n      const modelBufferOffset = tflite._getModelBufferMemoryOffset()\n      console.log('Model buffer memory offset:', modelBufferOffset)\n      console.log('Loading model buffer...')\n      tflite.HEAPU8.set(new Uint8Array(model), modelBufferOffset)\n      console.log('_loadModel result:', tflite._loadModel(model.byteLength))\n\n      console.log('Input memory offset:', tflite._getInputMemoryOffset())\n      console.log('Input height:', tflite._getInputHeight())\n      console.log('Input width:', tflite._getInputWidth())\n      console.log('Input channels:', tflite._getInputChannelCount())\n\n      console.log('Output memory offset:', tflite._getOutputMemoryOffset())\n      console.log('Output height:', tflite._getOutputHeight())\n      console.log('Output width:', tflite._getOutputWidth())\n      console.log('Output channels:', tflite._getOutputChannelCount())\n\n      setLoaded(true)\n    }\n\n    loadMeetModel()\n  }, [tflite, segmentationConfig])\n\n  return isLoaded\n}\n\nexport default useMeetModel\n","import { useEffect, useState } from 'react'\n\ndeclare function createTFLiteModule(): Promise<TFLite>\n\nexport interface TFLite extends EmscriptenModule {\n  _getModelBufferMemoryOffset(): number\n  _getInputMemoryOffset(): number\n  _getInputHeight(): number\n  _getInputWidth(): number\n  _getInputChannelCount(): number\n  _getOutputMemoryOffset(): number\n  _getOutputHeight(): number\n  _getOutputWidth(): number\n  _getOutputChannelCount(): number\n  _loadModel(bufferSize: number): number\n  _runInference(): number\n}\n\nfunction useTFLite() {\n  const [tflite, setTFLite] = useState<TFLite>()\n\n  useEffect(() => {\n    // TODO Detect WASM features to handle SIMD and multithreading\n    async function loadTFLite() {\n      setTFLite(await createTFLiteModule())\n    }\n\n    loadTFLite()\n  }, [])\n\n  return tflite\n}\n\nexport default useTFLite\n","import { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport { useState } from 'react'\nimport BackgroundSelectionCard from './components/BackgroundSelectionCard'\nimport PostProcessingConfigCard from './components/PostProcessingConfigCard'\nimport SegmentationConfigCard from './components/SegmentationConfigCard'\nimport SourceSelectionCard from './components/SourceSelectionCard'\nimport ViewerCard from './components/ViewerCard'\nimport { Background, backgroundImageUrls } from './helpers/backgroundHelper'\nimport { PostProcessingConfig } from './helpers/postProcessingHelper'\nimport { SegmentationConfig } from './helpers/segmentationHelper'\nimport { Source, sourceImageUrls } from './helpers/sourceHelper'\nimport useBodyPix from './hooks/useBodyPix'\nimport useMeetModel from './hooks/useMeetModel'\nimport useTFLite from './hooks/useTFLite'\n\nfunction App() {\n  const bodyPix = useBodyPix()\n  const tflite = useTFLite()\n\n  const classes = useStyles()\n  const [source, setSource] = useState<Source>({\n    type: 'image',\n    url: sourceImageUrls[0],\n  })\n  const [background, setBackground] = useState<Background>({\n    type: 'image',\n    url: backgroundImageUrls[0],\n  })\n  const [\n    segmentationConfig,\n    setSegmentationConfig,\n  ] = useState<SegmentationConfig>({\n    model: 'meet',\n    inputResolution: '96p',\n    pipeline: 'canvas2dCpu',\n  })\n  const [\n    postProcessingConfig,\n    setPostProcessingConfig,\n  ] = useState<PostProcessingConfig>({ smoothSegmentationMask: true })\n\n  // FIXME Animation stops, starts and stops again when changing segmentation config\n  const isMeetModelLoaded = useMeetModel(tflite, segmentationConfig)\n\n  return (\n    <div className={classes.root}>\n      <ViewerCard\n        source={source}\n        background={background}\n        bodyPix={bodyPix}\n        tflite={\n          // TODO Find a better way to handle both bodyPix and tflite props\n          isMeetModelLoaded || segmentationConfig.model === 'bodyPix'\n            ? tflite\n            : undefined\n        }\n        segmentationConfig={segmentationConfig}\n        postProcessingConfig={postProcessingConfig}\n      />\n      <SourceSelectionCard source={source} onChange={setSource} />\n      <BackgroundSelectionCard\n        background={background}\n        onChange={setBackground}\n      />\n      <SegmentationConfigCard\n        config={segmentationConfig}\n        onChange={setSegmentationConfig}\n      />\n      <PostProcessingConfigCard\n        config={postProcessingConfig}\n        onChange={setPostProcessingConfig}\n      />\n    </div>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'grid',\n\n      [theme.breakpoints.up('xs')]: {\n        margin: theme.spacing(1),\n        gap: theme.spacing(1),\n        gridTemplateColumns: '1fr',\n      },\n\n      [theme.breakpoints.up('md')]: {\n        margin: theme.spacing(2),\n        gap: theme.spacing(2),\n        gridTemplateColumns: 'repeat(2, 1fr)',\n      },\n\n      [theme.breakpoints.up('lg')]: {\n        gridTemplateColumns: 'repeat(3, 1fr)',\n      },\n    },\n    resourceSelectionCards: {\n      display: 'flex',\n      flexDirection: 'column',\n    },\n  })\n)\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import CssBaseline from '@material-ui/core/CssBaseline'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}