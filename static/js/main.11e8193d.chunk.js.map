{"version":3,"sources":["backgrounds/800px-Main_Control_Room_at_ESA's_Space_Operations_Centre_ESA11252261.jpg","App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","canvasRef","useRef","useEffect","canvas","current","ctx","getContext","stats","Stats","showPanel","document","body","appendChild","dom","video","createElement","autoplay","playsInline","controls","onloadeddata","drawBackground","mask","videoWidth","videoHeight","videoPixelCount","bodyPixNet","drawBackgroundHandle","backgroundImage","Image","a","tf","bodyPix","navigator","mediaDevices","getUserMedia","stream","getVideoTracks","videoTrack","videoSettings","getSettings","width","height","srcObject","ImageData","console","error","begin","segmentPerson","segmentation","i","data","putImageData","globalCompositeOperation","drawImage","end","requestAnimationFrame","src","controlRoomImage","loadBodyPix","setupCamera","cancelAnimationFrame","remove","className","ref","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"2YAAe,G,OAAA,IAA0B,kGCsG1BA,MA/Ff,WACE,IAAMC,EAAYC,iBAA0B,MA2F5C,OAzFAC,qBAAU,WACR,IAAMC,EAASH,EAAUI,QACnBC,EAAMF,EAAOG,WAAW,MAExBC,EAAQ,IAAIC,IAClBD,EAAME,UAAU,GAChBC,SAASC,KAAKC,YAAYL,EAAMM,KAEhC,IAAMC,EAAQJ,SAASK,cAAc,SACrCD,EAAME,UAAW,EACjBF,EAAMG,aAAc,EACpBH,EAAMI,UAAW,EACjBJ,EAAMK,aAAeC,EAErB,IAGIC,EAEAC,EACAC,EACAC,EAEAC,EACAC,EAVEC,EAAkB,IAAIC,MAdd,4CA0Bd,sBAAAC,EAAA,sEACQC,MADR,uBAEqBC,MAFrB,OAEEN,EAFF,mDA1Bc,kEA+Bd,oCAAAI,EAAA,+EAEyBG,UAAUC,aAAaC,aAAa,CACvDpB,OAAO,IAHb,OAEUqB,EAFV,SAKyBA,EAAOC,iBALhC,mBAKWC,EALX,KAMUC,EAAgBD,EAAWE,cACjCjB,EAAagB,EAAcE,MAC3BjB,EAAce,EAAcG,OAC5BjB,EAAkBF,EAAaC,EAE/BT,EAAM4B,UAAYP,EAClBrB,EAAM0B,MAAQlB,EACdR,EAAM2B,OAASlB,EAEfI,EAAgBa,MAAQlB,EACxBK,EAAgBc,OAASlB,EAEzBpB,EAAOqC,MAAQlB,EACfnB,EAAOsC,OAASlB,EAEhBF,EAAO,IAAIsB,UAAUrB,EAAYC,GArBrC,kDAuBIqB,QAAQC,MAAM,8BAAd,MAvBJ,2DA/Bc,+BA0DCzB,IA1DD,2EA0Dd,8BAAAS,EAAA,0DAEMJ,EAFN,wBAGIlB,EAAMuC,QAHV,SAK+BrB,EAAWsB,cAAcjC,GALxD,OAMI,IADMkC,EALV,OAMaC,EAAI,EAAGA,EAAIzB,EAAiByB,IAEnC5B,EAAK6B,KAAS,EAAJD,EAAQ,GAAKD,EAAaE,KAAKD,GAAK,IAAM,EAEtD5C,EAAI8C,aAAa9B,EAAM,EAAG,GAC1BhB,EAAI+C,yBAA2B,YAC/B/C,EAAIgD,UAAUvC,EAAO,EAAG,GACxBT,EAAI+C,yBAA2B,mBAC/B/C,EAAIgD,UAAU1B,EAAiB,EAAG,GAElCpB,EAAM+C,MAhBV,QAmBE5B,EAAuB6B,sBAAsBnC,GAnB/C,6CA1Dc,sBAmFd,OApEAO,EAAgB6B,IAAMC,EAfR,mCAgFdC,GAhFc,mCAiFdC,GAEO,WACLC,qBAAqBlC,GACrBnB,EAAMM,IAAIgD,YAEX,IAEI,wBAAQC,UAAU,aAAaC,IAAK/D,KCrF9BgE,G,OAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,QCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFjE,SAASkE,eAAe,SAM1BZ,M","file":"static/js/main.11e8193d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/800px-Main_Control_Room_at_ESA's_Space_Operations_Centre_ESA11252261.7973a2b2.jpg\";","import * as bodyPix from '@tensorflow-models/body-pix'\nimport * as tf from '@tensorflow/tfjs'\nimport React, { useEffect, useRef } from 'react'\nimport Stats from 'stats.js'\nimport './App.css'\nimport controlRoomImage from \"./backgrounds/800px-Main_Control_Room_at_ESA's_Space_Operations_Centre_ESA11252261.jpg\"\n\nfunction App() {\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n\n  useEffect(() => {\n    const canvas = canvasRef.current!\n    const ctx = canvas.getContext('2d')!\n\n    const stats = new Stats()\n    stats.showPanel(0)\n    document.body.appendChild(stats.dom)\n\n    const video = document.createElement('video')\n    video.autoplay = true\n    video.playsInline = true\n    video.controls = false\n    video.onloadeddata = drawBackground\n\n    const backgroundImage = new Image()\n    backgroundImage.src = controlRoomImage\n\n    let mask: ImageData\n\n    let videoWidth: number\n    let videoHeight: number\n    let videoPixelCount: number\n\n    let bodyPixNet: bodyPix.BodyPix\n    let drawBackgroundHandle: number\n\n    async function loadBodyPix() {\n      await tf.ready()\n      bodyPixNet = await bodyPix.load()\n    }\n\n    async function setupCamera() {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          video: true,\n        })\n        const [videoTrack] = stream.getVideoTracks()\n        const videoSettings = videoTrack.getSettings()\n        videoWidth = videoSettings.width!\n        videoHeight = videoSettings.height!\n        videoPixelCount = videoWidth * videoHeight\n\n        video.srcObject = stream\n        video.width = videoWidth\n        video.height = videoHeight\n\n        backgroundImage.width = videoWidth\n        backgroundImage.height = videoHeight\n\n        canvas.width = videoWidth\n        canvas.height = videoHeight\n\n        mask = new ImageData(videoWidth, videoHeight)\n      } catch (error) {\n        console.error('Error opening video camera.', error)\n      }\n    }\n\n    async function drawBackground() {\n      // Wait for BodyPix model to be loaded\n      if (bodyPixNet) {\n        stats.begin()\n\n        const segmentation = await bodyPixNet.segmentPerson(video)\n        for (let i = 0; i < videoPixelCount; i++) {\n          // Set only the alpha component of each pixel\n          mask.data[i * 4 + 3] = segmentation.data[i] ? 255 : 0\n        }\n        ctx.putImageData(mask, 0, 0)\n        ctx.globalCompositeOperation = 'source-in'\n        ctx.drawImage(video, 0, 0)\n        ctx.globalCompositeOperation = 'destination-over'\n        ctx.drawImage(backgroundImage, 0, 0)\n\n        stats.end()\n      }\n\n      drawBackgroundHandle = requestAnimationFrame(drawBackground)\n    }\n\n    loadBodyPix()\n    setupCamera()\n\n    return () => {\n      cancelAnimationFrame(drawBackgroundHandle)\n      stats.dom.remove()\n    }\n  }, [])\n\n  return <canvas className=\"App-canvas\" ref={canvasRef}></canvas>\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}