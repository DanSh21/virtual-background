{"version":3,"sources":["backgrounds/800px-Main_Control_Room_at_ESA's_Space_Operations_Centre_ESA11252261.jpg","hooks/useCamera.ts","hooks/useStats.ts","hooks/useVideoResize.ts","components/VideoControl.tsx","components/VideoPlayer.tsx","hooks/useBodyPix.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useCamera","videoRef","useRef","useEffect","a","constraints","video","navigator","mediaDevices","getUserMedia","stream","current","srcObject","console","error","alert","playVideoFromCamera","useStats","useState","fps","setFps","durations","setDurations","previousTimeRef","beginTimeRef","durationsRef","eventCount","frameCountRef","beginFrame","useCallback","Date","now","addFrameEvent","time","endFrame","useVideoResize","videoWidth","setVideoWidth","videoHeight","setVideoHeight","log","addEventListener","handleVideoResize","removeEventListener","VideoControl","props","className","isActivated","onClick","iconName","VideoPlayer","canvasRef","imageRef","isVideoPlaying","setVideoPlaying","background","setBackground","inferenceDuration","postProcessingDuration","ctx","getContext","mask","ImageData","videoPixelCount","imageWidth","naturalWidth","imageHeight","naturalHeight","imageScale","Math","max","animationRequestId","shouldDrawBackground","drawBackground","cancelAnimationFrame","bodyPixNeuralNetwork","segmentPerson","segmentation","i","data","putImageData","globalCompositeOperation","filter","drawImage","requestAnimationFrame","round","ref","width","height","autoPlay","playsInline","controls","hidden","onLoadedData","onAbort","src","backgroundImage","alt","useBodyPix","setBodyPixNeuralNetwork","tf","bodyPix","loadBodyPix","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c5a0890b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/800px-Main_Control_Room_at_ESA's_Space_Operations_Centre_ESA11252261.7973a2b2.jpg\";","import { useEffect, useRef } from 'react'\n\nfunction useCamera() {\n  const videoRef = useRef<HTMLVideoElement>(null!)\n\n  useEffect(() => {\n    async function playVideoFromCamera() {\n      try {\n        const constraints = { video: true }\n        const stream = await navigator.mediaDevices.getUserMedia(constraints)\n        videoRef.current.srcObject = stream\n      } catch (error) {\n        console.error('Error opening video camera.', error)\n        alert(`Error opening video camera. ${error}`)\n      }\n    }\n\n    playVideoFromCamera()\n  }, [])\n\n  return videoRef\n}\n\nexport default useCamera\n","import { useCallback, useRef, useState } from 'react'\n\nfunction useStats() {\n  const [fps, setFps] = useState(0)\n  const [durations, setDurations] = useState<number[]>([])\n  const previousTimeRef = useRef(0)\n  const beginTimeRef = useRef(0)\n  const durationsRef = useRef<number[]>([])\n  const eventCount = useRef(0)\n  const frameCountRef = useRef(0)\n\n  const beginFrame = useCallback(() => {\n    beginTimeRef.current = Date.now()\n  }, [])\n\n  const addFrameEvent = useCallback(() => {\n    const time = Date.now()\n    durationsRef.current[eventCount.current] = time - beginTimeRef.current\n    beginTimeRef.current = time\n    eventCount.current++\n  }, [])\n\n  const endFrame = useCallback(() => {\n    const time = Date.now()\n    durationsRef.current[eventCount.current] = time - beginTimeRef.current\n    frameCountRef.current++\n    if (time >= previousTimeRef.current + 1000) {\n      setFps((frameCountRef.current * 1000) / (time - previousTimeRef.current))\n      setDurations(durationsRef.current)\n      previousTimeRef.current = time\n      frameCountRef.current = 0\n    }\n    eventCount.current = 0\n  }, [])\n\n  return { fps, durations, beginFrame, addFrameEvent, endFrame }\n}\n\nexport default useStats\n","import { RefObject, useEffect, useState } from 'react'\n\nfunction useVideoResize(videoRef: RefObject<HTMLVideoElement>) {\n  const [videoWidth, setVideoWidth] = useState(0)\n  const [videoHeight, setVideoHeight] = useState(0)\n\n  useEffect(() => {\n    if (!videoRef.current) {\n      return\n    }\n    const video = videoRef.current\n\n    function handleVideoResize() {\n      console.log('Video was resized')\n      setVideoWidth(video.videoWidth)\n      setVideoHeight(video.videoHeight)\n    }\n\n    console.log('Listening for video resize')\n    video.addEventListener('resize', handleVideoResize)\n\n    return () => {\n      video.removeEventListener('resize', handleVideoResize)\n    }\n  }, [videoRef])\n\n  return { videoWidth, videoHeight }\n}\n\nexport default useVideoResize\n","import './VideoControl.css'\n\ntype VideoControlProps = {\n  iconName: string\n  isActivated?: boolean\n  onClick: () => void\n}\n\nfunction VideoControl(props: VideoControlProps) {\n  return (\n    <button\n      className={`VideoControl ${\n        props.isActivated ? 'VideoControl-activated' : ''\n      }`}\n      onClick={props.onClick}\n    >\n      {props.iconName}\n    </button>\n  )\n}\n\nexport default VideoControl\n","import { BodyPix } from '@tensorflow-models/body-pix'\nimport { useEffect, useRef, useState } from 'react'\nimport backgroundImage from \"../backgrounds/800px-Main_Control_Room_at_ESA's_Space_Operations_Centre_ESA11252261.jpg\"\nimport useCamera from '../hooks/useCamera'\nimport useStats from '../hooks/useStats'\nimport useVideoResize from '../hooks/useVideoResize'\nimport VideoControl from './VideoControl'\nimport './VideoPlayer.css'\n\ntype VideoPlayerProps = {\n  // BodyPix must be loaded outside this component to prevent\n  // GPU memory issues with Create React App HMR\n  bodyPixNeuralNetwork: BodyPix\n}\n\ntype Background = 'none' | 'blur' | 'image'\n\nfunction VideoPlayer(props: VideoPlayerProps) {\n  const canvasRef = useRef<HTMLCanvasElement>(null!)\n  const imageRef = useRef<HTMLImageElement>(null!)\n  const videoRef = useCamera()\n  const { videoWidth, videoHeight } = useVideoResize(videoRef)\n  const [isVideoPlaying, setVideoPlaying] = useState(false)\n  const [background, setBackground] = useState<Background>('none')\n  const {\n    fps,\n    durations: [inferenceDuration, postProcessingDuration],\n    beginFrame,\n    addFrameEvent,\n    endFrame,\n  } = useStats()\n\n  useEffect(() => {\n    if (!isVideoPlaying) {\n      return\n    }\n\n    const ctx = canvasRef.current.getContext('2d')!\n    const mask = new ImageData(videoWidth, videoHeight)\n    const videoPixelCount = videoWidth * videoHeight\n\n    let imageWidth = imageRef.current.naturalWidth\n    let imageHeight = imageRef.current.naturalHeight\n    const imageScale = Math.max(\n      1,\n      videoWidth / imageWidth,\n      videoHeight / imageHeight\n    )\n    imageWidth *= imageScale\n    imageHeight *= imageScale\n\n    // Required to stop looping in useEffect in development mode\n    let shouldDrawBackground = true\n\n    let animationRequestId: number\n\n    async function drawBackground() {\n      if (!shouldDrawBackground) {\n        return\n      }\n\n      beginFrame()\n      if (background !== 'none') {\n        const segmentation = await props.bodyPixNeuralNetwork.segmentPerson(\n          videoRef.current\n        )\n        for (let i = 0; i < videoPixelCount; i++) {\n          // Set only the alpha component of each pixel\n          mask.data[i * 4 + 3] = segmentation.data[i] ? 255 : 0\n        }\n      }\n      addFrameEvent()\n      if (background === 'blur') {\n        ctx.putImageData(mask, 0, 0)\n        ctx.globalCompositeOperation = 'source-out'\n        ctx.filter = 'blur(4px)' // Does not work on Safari\n        ctx.drawImage(videoRef.current, 0, 0)\n        ctx.globalCompositeOperation = 'destination-over'\n        ctx.filter = 'none'\n      } else if (background === 'image') {\n        ctx.putImageData(mask, 0, 0)\n        ctx.globalCompositeOperation = 'source-out'\n        ctx.drawImage(imageRef.current, 0, 0, imageWidth, imageHeight)\n        ctx.globalCompositeOperation = 'destination-over'\n      } else {\n        ctx.globalCompositeOperation = 'source-over'\n      }\n      ctx.drawImage(videoRef.current, 0, 0)\n      endFrame()\n\n      animationRequestId = requestAnimationFrame(drawBackground)\n    }\n\n    drawBackground()\n    console.log('Animation started:', background)\n\n    return () => {\n      shouldDrawBackground = false\n      cancelAnimationFrame(animationRequestId)\n      console.log('Animation stopped:', background)\n    }\n  }, [\n    props.bodyPixNeuralNetwork,\n    videoRef,\n    background,\n    videoWidth,\n    videoHeight,\n    isVideoPlaying,\n    beginFrame,\n    addFrameEvent,\n    endFrame,\n  ])\n\n  return (\n    <div className=\"VideoPlayer\">\n      <div className=\"VideoPlayer-stats\">\n        <span>{Math.round(fps)} fps</span> (\n        <span>inference {inferenceDuration}ms</span>,{' '}\n        <span>post-processing {postProcessingDuration}ms</span>)\n      </div>\n      <video\n        ref={videoRef}\n        width={videoWidth}\n        height={videoHeight}\n        autoPlay\n        playsInline\n        controls={false}\n        hidden\n        onLoadedData={() => setVideoPlaying(true)}\n        onAbort={() => setVideoPlaying(false)}\n      ></video>\n      <img ref={imageRef} src={backgroundImage} alt=\"\" hidden></img>\n      <canvas\n        ref={canvasRef}\n        className=\"VideoPlayer-video\"\n        width={videoWidth}\n        height={videoHeight}\n      ></canvas>\n      <div className=\"VideoPlayer-controls\">\n        <VideoControl\n          iconName=\"do_not_disturb\"\n          isActivated={background === 'none'}\n          onClick={() => setBackground('none')}\n        ></VideoControl>\n        <VideoControl\n          iconName=\"blur_on\"\n          isActivated={background === 'blur'}\n          onClick={() => setBackground('blur')}\n        ></VideoControl>\n        <VideoControl\n          iconName=\"image\"\n          isActivated={background === 'image'}\n          onClick={() => setBackground('image')}\n        ></VideoControl>\n      </div>\n    </div>\n  )\n}\n\nexport default VideoPlayer\n","import * as bodyPix from '@tensorflow-models/body-pix'\nimport * as tf from '@tensorflow/tfjs'\nimport { useEffect, useState } from 'react'\n\nfunction useBodyPix() {\n  const [\n    bodyPixNeuralNetwork,\n    setBodyPixNeuralNetwork,\n  ] = useState<bodyPix.BodyPix | null>(null)\n\n  useEffect(() => {\n    async function loadBodyPix() {\n      console.log('Loading TensorFlow.js and BodyPix segmentation model')\n      await tf.ready()\n      setBodyPixNeuralNetwork(await bodyPix.load())\n      console.log('TensorFlow.js and BodyPix loaded')\n    }\n\n    loadBodyPix()\n  }, [])\n\n  return bodyPixNeuralNetwork\n}\n\nexport default useBodyPix\n","import VideoPlayer from './components/VideoPlayer'\nimport useBodyPix from './hooks/useBodyPix'\n\nfunction App() {\n  // Load BodyPix only once outside of VideoPlayer component to prevent\n  // GPU memory issues with Create React App HMR\n  const bodyPixNeuralNetwork = useBodyPix()\n\n  return (\n    bodyPixNeuralNetwork && (\n      <VideoPlayer bodyPixNeuralNetwork={bodyPixNeuralNetwork}></VideoPlayer>\n    )\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}