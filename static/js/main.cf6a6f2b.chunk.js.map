{"version":3,"sources":["helpers/backgroundHelper.ts","hooks/useImageThumbnail.ts","components/SelectionButton.tsx","components/TumbnailButton.tsx","components/SelectionIconButton.tsx","components/BackgroundSelectionCard.tsx","components/ModelSelectionCard.tsx","components/PostProcessingSelectionCard.tsx","helpers/sourceHelper.ts","components/VideoButton.tsx","components/SourceSelectionCard.tsx","hooks/useCamera.ts","hooks/useStats.ts","hooks/useVideoResize.ts","components/VideoControl.tsx","components/VideoPlayer.tsx","components/OutputViewer.tsx","components/SourceViewer.tsx","components/ViewerCard.tsx","hooks/useBodyPix.ts","hooks/useTFLite.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["map","imageName","process","useImageThumbnail","makeStyles","theme","createStyles","root","padding","minWidth","spacing","height","width","marginRight","marginBottom","border","alignItems","transitionProperty","transitionDuration","transitions","duration","shorter","transitionTimingFunction","easing","easeInOut","transform","active","borderColor","palette","primary","main","scalableContent","margin","borderRadius","shape","image","objectFit","borderWidth","borderStyle","boxSizing","display","justifyContent","formControl","marginTop","sourceImageUrls","videoName","icon","position","bottom","right","color","common","white","useCamera","videoRef","useRef","useEffect","a","constraints","video","navigator","mediaDevices","getUserMedia","stream","current","srcObject","console","error","alert","playVideoFromCamera","useStats","useState","fps","setFps","durations","setDurations","previousTimeRef","beginTimeRef","durationsRef","eventCount","frameCountRef","beginFrame","useCallback","Date","now","addFrameEvent","time","endFrame","useVideoResize","videoWidth","setVideoWidth","videoHeight","setVideoHeight","log","addEventListener","handleVideoResize","removeEventListener","VideoControl","props","className","clsx","isActivated","onClick","children","VideoPlayer","canvasRef","maskCanvasRef","imageRef","isVideoPlaying","setVideoPlaying","background","setBackground","inferenceDuration","postProcessingDuration","ctx","getContext","maskCtx","mask","ImageData","videoPixelCount","imageWidth","naturalWidth","imageHeight","naturalHeight","imageScale","Math","max","animationRequestId","shouldDrawBackground","drawBackground","cancelAnimationFrame","bodyPixNeuralNetwork","segmentPerson","segmentation","i","data","putImageData","globalCompositeOperation","filter","drawImage","requestAnimationFrame","round","ref","autoPlay","playsInline","controls","hidden","onLoadedData","onAbort","src","alt","canvas","stats","top","left","textAlign","backgroundColor","sourcePlayback","minHeight","overflow","sourceCell","borderRightWidth","borderRightStyle","borderRightColor","divider","outputCell","avatar","useBodyPix","setBodyPixNeuralNetwork","tf","bodyPix","loadBodyPix","useTFLite","createTFLiteModule","tfliteModule","fetch","lightModelResponse","arrayBuffer","lightModel","byteLength","fullModelResponse","fullModel","modelBufferOffset","_getModelBufferMemoryOffset","HEAPU8","set","Uint8Array","_loadModel","_getInputMemoryOffset","_getInputHeight","_getInputWidth","_getInputChannelCount","_getOutputMemoryOffset","_getOutputHeight","_getOutputWidth","_getOutputChannelCount","start","inferenceResult","_runInference","loadTFLite","useStyles","App","type","url","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.cf6a6f2b.chunk.js","sourcesContent":["export type Background = {\n  type: 'none' | 'blur' | 'image'\n  url?: string\n}\n\nexport const backgroundImageUrls = [\n  'architecture-5082700_1280',\n  'porch-691330_1280',\n  'saxon-switzerland-539418_1280',\n  'shibuyasky-4768679_1280',\n].map((imageName) => `${process.env.PUBLIC_URL}/backgrounds/${imageName}.jpg`)\n","import { useEffect, useState } from 'react'\nimport { getThumbnailBlob } from '../helpers/thumbnailHelper'\n\n/**\n * Returns an image thumbnail URL and a function to revoke it.\n */\nfunction useImageThumbnail(imageUrl: string): [string | undefined, () => void] {\n  const [thumbnailUrl, setThumbnailUrl] = useState<string>()\n\n  useEffect(() => {\n    const image = new Image()\n    image.src = imageUrl\n    image.onload = async () => {\n      const blob = await getThumbnailBlob(\n        image,\n        image.naturalWidth,\n        image.naturalHeight\n      )\n      setThumbnailUrl(URL.createObjectURL(blob))\n    }\n  }, [imageUrl])\n\n  return [thumbnailUrl, () => URL.revokeObjectURL(thumbnailUrl!)]\n}\n\nexport default useImageThumbnail\n","import Button from '@material-ui/core/Button'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport clsx from 'clsx'\n\ntype SelectionButtonProps = {\n  active: boolean\n  disabled?: boolean\n  children: React.ReactNode\n  onClick: () => void\n}\n\nfunction SelectionButton(props: SelectionButtonProps) {\n  const classes = useStyles()\n\n  return (\n    <Button\n      className={clsx(classes.root, props.active && classes.active)}\n      disabled={props.disabled}\n      onClick={props.onClick}\n    >\n      {props.children}\n    </Button>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      padding: 0,\n      minWidth: theme.spacing(7) + 2,\n      height: theme.spacing(7) + 2,\n      width: theme.spacing(7) + 2,\n      marginRight: theme.spacing(1),\n      marginBottom: theme.spacing(1),\n      border: '2px solid transparent',\n      alignItems: 'stretch',\n      transitionProperty: 'transform, border-color',\n      transitionDuration: `${theme.transitions.duration.shorter}ms`,\n      transitionTimingFunction: theme.transitions.easing.easeInOut,\n\n      '&:hover': {\n        transform: 'scale(1.125)',\n      },\n    },\n    active: {\n      borderColor: theme.palette.primary.main,\n      transform: 'scale(1.125)',\n    },\n  })\n)\n\nexport default SelectionButton\n","import { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport Skeleton from '@material-ui/lab/Skeleton'\nimport clsx from 'clsx'\nimport SelectionButton from './SelectionButton'\n\ntype ThumbnailButtonProps = {\n  thumbnailUrl?: string\n  active: boolean\n  children?: React.ReactNode\n  onClick: () => void\n  onLoad?: () => void\n}\n\nfunction ThumbnailButton(props: ThumbnailButtonProps) {\n  const classes = useStyles()\n\n  return (\n    <SelectionButton\n      active={!!props.thumbnailUrl && props.active}\n      disabled={!props.thumbnailUrl}\n      onClick={props.onClick}\n    >\n      {props.thumbnailUrl ? (\n        <img\n          className={clsx(classes.scalableContent, classes.image)}\n          src={props.thumbnailUrl}\n          alt=\"\"\n          onLoad={props.onLoad}\n        />\n      ) : (\n        <Skeleton className={classes.scalableContent} variant=\"rect\" />\n      )}\n      {props.children}\n    </SelectionButton>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    scalableContent: {\n      // Fixes rendering issues with border when scaled\n      width: 'calc(100% + 2px)',\n      height: 'calc(100% + 2px)',\n      margin: -1,\n      borderRadius: theme.shape.borderRadius,\n    },\n    image: {\n      objectFit: 'cover',\n    },\n  })\n)\n\nexport default ThumbnailButton\n","import { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport SelectionButton from './SelectionButton'\n\ntype SelectionIconButtonProps = {\n  active: boolean\n  children: React.ReactNode\n  onClick: () => void\n}\n\nfunction SelectionIconButton(props: SelectionIconButtonProps) {\n  const classes = useStyles()\n\n  return (\n    <SelectionButton active={props.active} onClick={props.onClick}>\n      <div className={classes.root}>{props.children}</div>\n    </SelectionButton>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: '100%',\n      height: '100%',\n      borderWidth: 1,\n      borderStyle: 'solid',\n      borderColor: 'rgba(0, 0, 0, 0.23)',\n      borderRadius: theme.shape.borderRadius,\n      margin: -1,\n      boxSizing: 'content-box',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n    },\n  })\n)\n\nexport default SelectionIconButton\n","import Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport Typography from '@material-ui/core/Typography'\nimport BlockIcon from '@material-ui/icons/Block'\nimport BlurOnIcon from '@material-ui/icons/BlurOn'\nimport { Background, backgroundImageUrls } from '../helpers/backgroundHelper'\nimport ImageButton from './ImageButton'\nimport SelectionIconButton from './SelectionIconButton'\n\ntype BackgroundSelectionCardProps = {\n  background: Background\n  onBackgroundChange: (background: Background) => void\n}\n\nfunction BackgroundSelectionCard(props: BackgroundSelectionCardProps) {\n  const classes = useStyles()\n\n  return (\n    <Card className={classes.root}>\n      <CardContent>\n        <Typography gutterBottom variant=\"h6\" component=\"h2\">\n          Background\n        </Typography>\n        <SelectionIconButton\n          active={props.background.type === 'none'}\n          onClick={() => props.onBackgroundChange({ type: 'none' })}\n        >\n          <BlockIcon />\n        </SelectionIconButton>\n        <SelectionIconButton\n          active={props.background.type === 'blur'}\n          onClick={() => props.onBackgroundChange({ type: 'blur' })}\n        >\n          <BlurOnIcon />\n        </SelectionIconButton>\n        {backgroundImageUrls.map((imageUrl) => (\n          <ImageButton\n            key={imageUrl}\n            imageUrl={imageUrl}\n            active={imageUrl === props.background.url}\n            onClick={() =>\n              props.onBackgroundChange({ type: 'image', url: imageUrl })\n            }\n          />\n        ))}\n      </CardContent>\n    </Card>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      height: '100%',\n    },\n  })\n)\n\nexport default BackgroundSelectionCard\n","import Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport FormControl from '@material-ui/core/FormControl'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport Select from '@material-ui/core/Select'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport Typography from '@material-ui/core/Typography'\nimport { Model } from '../helpers/modelHelper'\n\ntype ModelSelectionCardProps = {\n  model: Model\n  onModelChange: (model: Model) => void\n}\n\nfunction ModelSelectionCard(props: ModelSelectionCardProps) {\n  const classes = useStyles()\n\n  return (\n    <Card className={classes.root}>\n      <CardContent>\n        <Typography gutterBottom variant=\"h6\" component=\"h2\">\n          Segmentation\n        </Typography>\n        <FormControl className={classes.formControl} variant=\"outlined\">\n          <InputLabel>Model</InputLabel>\n          <Select\n            label=\"Model\"\n            value={props.model}\n            onChange={(event) =>\n              props.onModelChange(event.target.value as Model)\n            }\n          >\n            <MenuItem value={'bodyPix'}>BodyPix</MenuItem>\n          </Select>\n        </FormControl>\n      </CardContent>\n    </Card>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      height: '100%',\n    },\n    formControl: {\n      marginTop: theme.spacing(1),\n      minWidth: 120,\n    },\n  })\n)\n\nexport default ModelSelectionCard\n","import Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport Typography from '@material-ui/core/Typography'\n\ntype PostProcessingSelectionCardProps = {}\n\nfunction PostProcessingSelectionCard(props: PostProcessingSelectionCardProps) {\n  const classes = useStyles()\n\n  return (\n    <Card className={classes.root}>\n      <CardContent>\n        <Typography gutterBottom variant=\"h6\" component=\"h2\">\n          Post-processing\n        </Typography>\n        <Typography variant=\"body2\" color=\"textSecondary\">\n          Coming soon\n        </Typography>\n      </CardContent>\n    </Card>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      height: '100%',\n    },\n  })\n)\n\nexport default PostProcessingSelectionCard\n","export type Source = {\n  type: 'image' | 'video' | 'camera'\n  url?: string\n}\n\nexport type SourcePlayback = {\n  htmlElement: HTMLImageElement | HTMLVideoElement\n  width: number\n  height: number\n}\n\nexport const sourceImageUrls = [\n  'girl-919048_1280',\n  'doctor-5871743_640',\n  'woman-5883428_1280',\n].map((imageName) => `${process.env.PUBLIC_URL}/images/${imageName}.jpg`)\n\nexport const sourceVideoUrls = [\n  'Dance - 32938',\n  'Doctor - 26732',\n  'Thoughtful - 35590',\n].map((videoName) => `${process.env.PUBLIC_URL}/videos/${videoName}.mp4`)\n","import { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport PlayCircleOutlineIcon from '@material-ui/icons/PlayCircleOutline'\nimport useVideoThumbnail from '../hooks/useVideoThumbnail'\nimport ThumbnailButton from './TumbnailButton'\n\ntype VideoButtonProps = {\n  videoUrl: string\n  active: boolean\n  onClick: () => void\n}\n\nfunction VideoButton(props: VideoButtonProps) {\n  const classes = useStyles()\n  const [thumbnailUrl, revokeThumbnailUrl] = useVideoThumbnail(props.videoUrl)\n\n  return (\n    <ThumbnailButton\n      thumbnailUrl={thumbnailUrl}\n      active={props.active}\n      onClick={props.onClick}\n      onLoad={revokeThumbnailUrl}\n    >\n      <PlayCircleOutlineIcon className={classes.icon} />\n    </ThumbnailButton>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    icon: {\n      position: 'absolute',\n      bottom: 0,\n      right: 0,\n      color: theme.palette.common.white,\n    },\n  })\n)\n\nexport default VideoButton\n","import Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport Typography from '@material-ui/core/Typography'\nimport VideocamIcon from '@material-ui/icons/Videocam'\nimport {\n  Source,\n  sourceImageUrls,\n  sourceVideoUrls,\n} from '../helpers/sourceHelper'\nimport ImageButton from './ImageButton'\nimport SelectionIconButton from './SelectionIconButton'\nimport VideoButton from './VideoButton'\n\ntype SourceSelectionCardProps = {\n  source: Source\n  onSourceChange: (source: Source) => void\n}\n\nfunction SourceSelectionCard(props: SourceSelectionCardProps) {\n  const classes = useStyles()\n\n  return (\n    <Card className={classes.root}>\n      <CardContent>\n        <Typography gutterBottom variant=\"h6\" component=\"h2\">\n          Source\n        </Typography>\n        <SelectionIconButton\n          active={props.source.type === 'camera'}\n          onClick={() => props.onSourceChange({ type: 'camera' })}\n        >\n          <VideocamIcon />\n        </SelectionIconButton>\n        {sourceImageUrls.map((imageUrl) => (\n          <ImageButton\n            key={imageUrl}\n            imageUrl={imageUrl}\n            active={imageUrl === props.source.url}\n            onClick={() => {\n              props.onSourceChange({ type: 'image', url: imageUrl })\n            }}\n          />\n        ))}\n        {sourceVideoUrls.map((videoUrl) => (\n          <VideoButton\n            key={videoUrl}\n            videoUrl={videoUrl}\n            active={videoUrl === props.source.url}\n            onClick={() => {\n              props.onSourceChange({ type: 'video', url: videoUrl })\n            }}\n          />\n        ))}\n      </CardContent>\n    </Card>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      height: '100%',\n    },\n  })\n)\n\nexport default SourceSelectionCard\n","import { useEffect, useRef } from 'react'\n\nfunction useCamera() {\n  const videoRef = useRef<HTMLVideoElement>(null!)\n\n  useEffect(() => {\n    async function playVideoFromCamera() {\n      try {\n        const constraints = { video: true }\n        const stream = await navigator.mediaDevices.getUserMedia(constraints)\n        videoRef.current.srcObject = stream\n      } catch (error) {\n        console.error('Error opening video camera.', error)\n        alert(`Error opening video camera. ${error}`)\n      }\n    }\n\n    playVideoFromCamera()\n  }, [])\n\n  return videoRef\n}\n\nexport default useCamera\n","import { useCallback, useRef, useState } from 'react'\n\nfunction useStats() {\n  const [fps, setFps] = useState(0)\n  const [durations, setDurations] = useState<number[]>([])\n  const previousTimeRef = useRef(0)\n  const beginTimeRef = useRef(0)\n  const durationsRef = useRef<number[]>([])\n  const eventCount = useRef(0)\n  const frameCountRef = useRef(0)\n\n  // The useCallbacks below are required to prevent infinite loop\n  // when the functions are called inside useEffect\n\n  const beginFrame = useCallback(() => {\n    beginTimeRef.current = Date.now()\n  }, [])\n\n  const addFrameEvent = useCallback(() => {\n    const time = Date.now()\n    durationsRef.current[eventCount.current] = time - beginTimeRef.current\n    beginTimeRef.current = time\n    eventCount.current++\n  }, [])\n\n  const endFrame = useCallback(() => {\n    const time = Date.now()\n    durationsRef.current[eventCount.current] = time - beginTimeRef.current\n    frameCountRef.current++\n    if (time >= previousTimeRef.current + 1000) {\n      setFps((frameCountRef.current * 1000) / (time - previousTimeRef.current))\n      setDurations(durationsRef.current)\n      previousTimeRef.current = time\n      frameCountRef.current = 0\n    }\n    eventCount.current = 0\n  }, [])\n\n  return { fps, durations, beginFrame, addFrameEvent, endFrame }\n}\n\nexport default useStats\n","import { RefObject, useEffect, useState } from 'react'\n\nfunction useVideoResize(videoRef: RefObject<HTMLVideoElement>) {\n  const [videoWidth, setVideoWidth] = useState(0)\n  const [videoHeight, setVideoHeight] = useState(0)\n\n  useEffect(() => {\n    if (!videoRef.current) {\n      return\n    }\n    const video = videoRef.current\n\n    function handleVideoResize() {\n      console.log('Video was resized')\n      setVideoWidth(video.videoWidth)\n      setVideoHeight(video.videoHeight)\n    }\n\n    console.log('Listening for video resize')\n    video.addEventListener('resize', handleVideoResize)\n\n    return () => {\n      video.removeEventListener('resize', handleVideoResize)\n    }\n  }, [videoRef])\n\n  return { videoWidth, videoHeight }\n}\n\nexport default useVideoResize\n","import clsx from 'clsx'\nimport './VideoControl.css'\n\ntype VideoControlProps = {\n  children: React.ReactNode\n  isActivated?: boolean\n  onClick: () => void\n}\n\nfunction VideoControl(props: VideoControlProps) {\n  return (\n    <button\n      className={clsx(\n        'VideoControl',\n        props.isActivated && 'VideoControl-activated'\n      )}\n      onClick={props.onClick}\n    >\n      {props.children}\n    </button>\n  )\n}\n\nexport default VideoControl\n","import BlockIcon from '@material-ui/icons/Block'\nimport BlurOnIcon from '@material-ui/icons/BlurOn'\nimport ImageIcon from '@material-ui/icons/Image'\nimport { BodyPix } from '@tensorflow-models/body-pix'\nimport { useEffect, useRef, useState } from 'react'\nimport useCamera from '../hooks/useCamera'\nimport useStats from '../hooks/useStats'\nimport useVideoResize from '../hooks/useVideoResize'\nimport VideoControl from './VideoControl'\nimport './VideoPlayer.css'\n\ntype VideoPlayerProps = {\n  // BodyPix must be loaded outside this component to prevent\n  // GPU memory issues with Create React App HMR\n  bodyPixNeuralNetwork: BodyPix\n}\n\ntype Background = 'none' | 'blur' | 'image'\n\n// FIXME No background icon is displayed while initializing camera\nfunction VideoPlayer(props: VideoPlayerProps) {\n  const canvasRef = useRef<HTMLCanvasElement>(null!)\n  const maskCanvasRef = useRef<HTMLCanvasElement>(null!)\n  const imageRef = useRef<HTMLImageElement>(null!)\n  const videoRef = useCamera()\n  const { videoWidth, videoHeight } = useVideoResize(videoRef)\n  const [isVideoPlaying, setVideoPlaying] = useState(false)\n  const [background, setBackground] = useState<Background>('none')\n  const {\n    fps,\n    durations: [inferenceDuration, postProcessingDuration],\n    beginFrame,\n    addFrameEvent,\n    endFrame,\n  } = useStats()\n\n  useEffect(() => {\n    if (!isVideoPlaying) {\n      return\n    }\n\n    const ctx = canvasRef.current.getContext('2d')!\n    const maskCtx = maskCanvasRef.current.getContext('2d')!\n    const mask = new ImageData(videoWidth, videoHeight)\n    const videoPixelCount = videoWidth * videoHeight\n\n    let imageWidth = imageRef.current.naturalWidth\n    let imageHeight = imageRef.current.naturalHeight\n    const imageScale = Math.max(\n      1,\n      videoWidth / imageWidth,\n      videoHeight / imageHeight\n    )\n    imageWidth *= imageScale\n    imageHeight *= imageScale\n\n    // Required to stop looping in useEffect in development mode\n    let shouldDrawBackground = true\n\n    let animationRequestId: number\n\n    async function drawBackground() {\n      if (!shouldDrawBackground) {\n        return\n      }\n\n      beginFrame()\n      if (background !== 'none') {\n        const segmentation = await props.bodyPixNeuralNetwork.segmentPerson(\n          videoRef.current\n        )\n        for (let i = 0; i < videoPixelCount; i++) {\n          // Set only the alpha component of each pixel\n          mask.data[i * 4 + 3] = segmentation.data[i] ? 255 : 0\n        }\n        maskCtx.putImageData(mask, 0, 0)\n      }\n      addFrameEvent()\n      if (background === 'blur') {\n        ctx.globalCompositeOperation = 'copy'\n        ctx.filter = 'blur(8px)' // FIXME Does not work on Safari\n        ctx.drawImage(maskCanvasRef.current, 0, 0)\n        ctx.globalCompositeOperation = 'source-out'\n        ctx.drawImage(videoRef.current, 0, 0)\n        ctx.globalCompositeOperation = 'destination-over'\n        ctx.filter = 'none'\n      } else if (background === 'image') {\n        ctx.globalCompositeOperation = 'copy'\n        ctx.filter = 'blur(2px)' // FIXME Does not work on Safari\n        ctx.drawImage(maskCanvasRef.current, 0, 0)\n        ctx.globalCompositeOperation = 'source-out'\n        ctx.filter = 'none'\n        ctx.drawImage(imageRef.current, 0, 0, imageWidth, imageHeight)\n        ctx.globalCompositeOperation = 'destination-over'\n      } else {\n        ctx.globalCompositeOperation = 'source-over'\n      }\n      ctx.drawImage(videoRef.current, 0, 0)\n      endFrame()\n\n      animationRequestId = requestAnimationFrame(drawBackground)\n    }\n\n    drawBackground()\n    console.log('Animation started:', background)\n\n    return () => {\n      shouldDrawBackground = false\n      cancelAnimationFrame(animationRequestId)\n      console.log('Animation stopped:', background)\n    }\n  }, [\n    props.bodyPixNeuralNetwork,\n    videoRef,\n    background,\n    videoWidth,\n    videoHeight,\n    isVideoPlaying,\n    beginFrame,\n    addFrameEvent,\n    endFrame,\n  ])\n\n  return (\n    <div className=\"VideoPlayer\">\n      <div className=\"VideoPlayer-root\">\n        <div className=\"VideoPlayer-stats\">\n          <span>{Math.round(fps)} fps</span> (\n          <span>inference {inferenceDuration}ms</span>,{' '}\n          <span>post-processing {postProcessingDuration}ms</span>)\n        </div>\n        <video\n          ref={videoRef}\n          width={videoWidth}\n          height={videoHeight}\n          autoPlay\n          playsInline\n          controls={false}\n          hidden\n          onLoadedData={() => setVideoPlaying(true)}\n          onAbort={() => setVideoPlaying(false)}\n        ></video>\n        <img\n          ref={imageRef}\n          src={`${process.env.PUBLIC_URL}/backgrounds/trees-4830285_640.jpg`}\n          alt=\"\"\n          hidden\n        ></img>\n        <canvas\n          ref={maskCanvasRef}\n          width={videoWidth}\n          height={videoHeight}\n          hidden\n        ></canvas>\n        <canvas\n          ref={canvasRef}\n          className=\"VideoPlayer-video\"\n          width={videoWidth}\n          height={videoHeight}\n        ></canvas>\n        <div className=\"VideoPlayer-controls\">\n          <VideoControl\n            isActivated={background === 'none'}\n            onClick={() => setBackground('none')}\n          >\n            <BlockIcon />\n          </VideoControl>\n          <VideoControl\n            isActivated={background === 'blur'}\n            onClick={() => setBackground('blur')}\n          >\n            <BlurOnIcon />\n          </VideoControl>\n          <VideoControl\n            isActivated={background === 'image'}\n            onClick={() => setBackground('image')}\n          >\n            <ImageIcon />\n          </VideoControl>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default VideoPlayer\n","import { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport Typography from '@material-ui/core/Typography'\nimport React, { useEffect, useRef } from 'react'\nimport { SourcePlayback } from '../helpers/sourceHelper'\nimport useStats from '../hooks/useStats'\n\ntype OutputViewerProps = {\n  sourcePlayback: SourcePlayback\n}\n\nfunction OutputViewer(props: OutputViewerProps) {\n  const classes = useStyles()\n  const canvasRef = useRef<HTMLCanvasElement>(null!)\n  const { fps, beginFrame, endFrame } = useStats()\n\n  useEffect(() => {\n    const ctx = canvasRef.current.getContext('2d')!\n    let renderRequestId: number\n\n    function render() {\n      renderRequestId = requestAnimationFrame(render)\n\n      beginFrame()\n      ctx.drawImage(props.sourcePlayback.htmlElement, 0, 0)\n      endFrame()\n    }\n\n    render()\n\n    return () => {\n      cancelAnimationFrame(renderRequestId)\n    }\n  }, [props.sourcePlayback, beginFrame, endFrame])\n\n  return (\n    <React.Fragment>\n      <Typography className={classes.stats} variant=\"caption\">\n        {Math.round(fps)} fps\n      </Typography>\n      <canvas\n        ref={canvasRef}\n        className={classes.canvas}\n        width={props.sourcePlayback.width}\n        height={props.sourcePlayback.height}\n      />\n    </React.Fragment>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    canvas: {\n      width: '100%',\n      height: '100%',\n      objectFit: 'cover',\n    },\n    stats: {\n      position: 'absolute',\n      top: 0,\n      right: 0,\n      left: 0,\n      textAlign: 'center',\n      backgroundColor: 'rgba(0, 0, 0, 0.48)',\n      color: theme.palette.common.white,\n    },\n  })\n)\n\nexport default OutputViewer\n","import CircularProgress from '@material-ui/core/CircularProgress'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport VideocamOffIcon from '@material-ui/icons/VideocamOff'\nimport React, { SyntheticEvent, useEffect, useRef, useState } from 'react'\nimport { Source, SourcePlayback } from '../helpers/sourceHelper'\n\ntype SourceViewerProps = {\n  source: Source\n  onLoad: (sourcePlayback: SourcePlayback) => void\n}\n\nfunction SourceViewer(props: SourceViewerProps) {\n  const classes = useStyles()\n  const [sourceUrl, setSourceUrl] = useState<string>()\n  const [isLoading, setLoading] = useState(false)\n  const [isCameraError, setCameraError] = useState(false)\n  const videoRef = useRef<HTMLVideoElement>(null)\n\n  useEffect(() => {\n    setSourceUrl(undefined)\n    setLoading(true)\n    setCameraError(false)\n\n    // Enforces reloading the resource, otherwise\n    // onLoad event is not always dispatched and the\n    // progress indicator never disappears\n    setTimeout(() => setSourceUrl(props.source.url))\n  }, [props.source])\n\n  useEffect(() => {\n    async function getCameraStream() {\n      try {\n        const constraint = { video: true }\n        const stream = await navigator.mediaDevices.getUserMedia(constraint)\n        if (videoRef.current) {\n          videoRef.current.srcObject = stream\n          return\n        }\n      } catch (error) {\n        console.error('Error opening video camera.', error)\n      }\n      setLoading(false)\n      setCameraError(true)\n    }\n\n    if (props.source.type === 'camera') {\n      getCameraStream()\n    } else if (videoRef.current) {\n      videoRef.current.srcObject = null\n    }\n  }, [props.source])\n\n  function handleImageLoad(event: SyntheticEvent) {\n    const image = event.target as HTMLImageElement\n    props.onLoad({\n      htmlElement: image,\n      width: image.naturalWidth,\n      height: image.naturalHeight,\n    })\n    setLoading(false)\n  }\n\n  function handleVideoLoad(event: SyntheticEvent) {\n    const video = event.target as HTMLVideoElement\n    props.onLoad({\n      htmlElement: video,\n      width: video.videoWidth,\n      height: video.videoHeight,\n    })\n    setLoading(false)\n  }\n\n  return (\n    <React.Fragment>\n      {isLoading && <CircularProgress />}\n      {props.source.type === 'image' ? (\n        <img\n          className={classes.sourcePlayback}\n          src={sourceUrl}\n          hidden={isLoading}\n          alt=\"\"\n          onLoad={handleImageLoad}\n        />\n      ) : isCameraError ? (\n        <VideocamOffIcon fontSize=\"large\" />\n      ) : (\n        <video\n          ref={videoRef}\n          className={classes.sourcePlayback}\n          src={sourceUrl}\n          hidden={isLoading}\n          autoPlay\n          playsInline\n          controls={false}\n          muted\n          loop\n          onLoadedData={handleVideoLoad}\n        />\n      )}\n    </React.Fragment>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    sourcePlayback: {\n      position: 'absolute',\n      width: '100%',\n      height: '100%',\n      objectFit: 'cover',\n    },\n  })\n)\n\nexport default SourceViewer\n","import Avatar from '@material-ui/core/Avatar'\nimport Grid from '@material-ui/core/Grid'\nimport Paper from '@material-ui/core/Paper'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport { useEffect, useState } from 'react'\nimport { Source, SourcePlayback } from '../helpers/sourceHelper'\nimport OutputViewer from './OutputViewer'\nimport SourceViewer from './SourceViewer'\n\ntype ViewerCardProps = {\n  source: Source\n}\n\nfunction ViewerCard(props: ViewerCardProps) {\n  const classes = useStyles()\n  const [sourcePlayback, setSourcePlayback] = useState<SourcePlayback>()\n\n  useEffect(() => {\n    setSourcePlayback(undefined)\n  }, [props.source])\n\n  return (\n    <Paper className={classes.root}>\n      <Grid container>\n        <Grid className={classes.sourceCell} item xs={6}>\n          <SourceViewer source={props.source} onLoad={setSourcePlayback} />\n        </Grid>\n        <Grid className={classes.outputCell} item xs={6}>\n          {sourcePlayback ? (\n            <OutputViewer sourcePlayback={sourcePlayback} />\n          ) : (\n            <Avatar className={classes.avatar} />\n          )}\n        </Grid>\n      </Grid>\n    </Paper>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      minHeight: theme.spacing(52),\n      height: '100%',\n      display: 'flex',\n      overflow: 'hidden',\n    },\n    sourceCell: {\n      position: 'relative',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      borderRightWidth: 1,\n      borderRightStyle: 'solid',\n      borderRightColor: theme.palette.divider,\n    },\n    outputCell: {\n      position: 'relative',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n    },\n    avatar: {\n      width: theme.spacing(20),\n      height: theme.spacing(20),\n    },\n  })\n)\n\nexport default ViewerCard\n","import * as bodyPix from '@tensorflow-models/body-pix'\nimport * as tf from '@tensorflow/tfjs'\nimport { useEffect, useState } from 'react'\n\nfunction useBodyPix() {\n  const [\n    bodyPixNeuralNetwork,\n    setBodyPixNeuralNetwork,\n  ] = useState<bodyPix.BodyPix | null>(null)\n\n  useEffect(() => {\n    async function loadBodyPix() {\n      console.log('Loading TensorFlow.js and BodyPix segmentation model')\n      await tf.ready()\n      setBodyPixNeuralNetwork(await bodyPix.load())\n      console.log('TensorFlow.js and BodyPix loaded')\n    }\n\n    loadBodyPix()\n  }, [])\n\n  return bodyPixNeuralNetwork\n}\n\nexport default useBodyPix\n","import { useEffect } from 'react'\n\ndeclare function createTFLiteModule(): Promise<TFLiteModule>\n\ninterface TFLiteModule extends EmscriptenModule {\n  _getModelBufferMemoryOffset(): number\n  _getInputMemoryOffset(): number\n  _getInputHeight(): number\n  _getInputWidth(): number\n  _getInputChannelCount(): number\n  _getOutputMemoryOffset(): number\n  _getOutputHeight(): number\n  _getOutputWidth(): number\n  _getOutputChannelCount(): number\n  _loadModel(bufferSize: number): number\n  _runInference(): number\n}\n\nfunction useTFLite() {\n  useEffect(() => {\n    async function loadTFLite() {\n      // TODO Fetch every resources in parallel\n      // TODO Load full or light model depending on the environment\n      // TODO Detect WASM features to handle SIMD and multithreading\n      const tfliteModule = await createTFLiteModule()\n      const lightModelResponse = await fetch(\n        `${process.env.PUBLIC_URL}/models/segm_lite_v681.tflite`\n      )\n      const lightModel = await lightModelResponse.arrayBuffer()\n      console.log('Lite model buffer size:', lightModel.byteLength)\n\n      const fullModelResponse = await fetch(\n        `${process.env.PUBLIC_URL}/models/segm_full_v679.tflite`\n      )\n      const fullModel = await fullModelResponse.arrayBuffer()\n      console.log('Full model buffer size:', fullModel.byteLength)\n\n      const modelBufferOffset = tfliteModule._getModelBufferMemoryOffset()\n      console.log('Model buffer memory offset:', modelBufferOffset)\n      console.log('Loading light model buffer...')\n      tfliteModule.HEAPU8.set(new Uint8Array(lightModel), modelBufferOffset)\n      console.log(\n        '_loadModel result:',\n        tfliteModule._loadModel(lightModel.byteLength)\n      )\n\n      console.log('Input memory offset:', tfliteModule._getInputMemoryOffset())\n      console.log('Input height:', tfliteModule._getInputHeight())\n      console.log('Input width:', tfliteModule._getInputWidth())\n      console.log('Input channels:', tfliteModule._getInputChannelCount())\n\n      console.log(\n        'Output memory offset:',\n        tfliteModule._getOutputMemoryOffset()\n      )\n      console.log('Output height:', tfliteModule._getOutputHeight())\n      console.log('Output width:', tfliteModule._getOutputWidth())\n      console.log('Output channels:', tfliteModule._getOutputChannelCount())\n\n      // TODO Move inference to the real-time render loop\n      const start = Date.now()\n      const inferenceResult = tfliteModule._runInference()\n      const inferenceDuration = Date.now() - start\n      console.log(\n        `_runInference result: ${inferenceResult} (${inferenceDuration}ms)`\n      )\n    }\n\n    loadTFLite()\n  }, [])\n}\n\nexport default useTFLite\n","import Grid from '@material-ui/core/Grid'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport { useState } from 'react'\nimport BackgroundSelectionCard from './components/BackgroundSelectionCard'\nimport ModelSelectionCard from './components/ModelSelectionCard'\nimport PostProcessingSelectionCard from './components/PostProcessingSelectionCard'\nimport SourceSelectionCard from './components/SourceSelectionCard'\nimport VideoPlayer from './components/VideoPlayer'\nimport ViewerCard from './components/ViewerCard'\nimport { Background } from './helpers/backgroundHelper'\nimport { Model } from './helpers/modelHelper'\nimport { Source, sourceImageUrls } from './helpers/sourceHelper'\nimport useBodyPix from './hooks/useBodyPix'\nimport useTFLite from './hooks/useTFLite'\n\nfunction App() {\n  // TODO Inititialize the camera and segmentation models in parallel\n\n  // Loads BodyPix only once outside of VideoPlayer component to prevent\n  // GPU memory issues with Create React App HMR\n  const bodyPixNeuralNetwork = useBodyPix()\n\n  useTFLite()\n\n  const classes = useStyles()\n  const [source, setSource] = useState<Source>({\n    type: 'image',\n    url: sourceImageUrls[0],\n  })\n  const [background, setBackground] = useState<Background>({ type: 'none' })\n  const [model, setModel] = useState<Model>('bodyPix')\n\n  return process.env.NODE_ENV === 'development' ? (\n    // The root level is required to fix negative margin limitations\n    // https://material-ui.com/components/grid/#negative-margin\n    <div className={classes.root}>\n      <Grid container spacing={2}>\n        <Grid item xs={8}>\n          <ViewerCard source={source} />\n        </Grid>\n        <Grid item xs={4}>\n          <SourceSelectionCard source={source} onSourceChange={setSource} />\n        </Grid>\n        <Grid item xs={4}>\n          <ModelSelectionCard model={model} onModelChange={setModel} />\n        </Grid>\n        <Grid item xs={4}>\n          <PostProcessingSelectionCard />\n        </Grid>\n        <Grid item xs={4}>\n          <BackgroundSelectionCard\n            background={background}\n            onBackgroundChange={setBackground}\n          />\n        </Grid>\n      </Grid>\n    </div>\n  ) : (\n    bodyPixNeuralNetwork && (\n      <VideoPlayer bodyPixNeuralNetwork={bodyPixNeuralNetwork} />\n    )\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      padding: theme.spacing(2),\n    },\n  })\n)\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import CssBaseline from '@material-ui/core/CssBaseline'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}